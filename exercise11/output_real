

 Benchmark

 No input file. Using compiled defaults 
 Size:  256x 256x 256  (class B)
 Iterations:                     20

  iter   1
  iter   5
  iter  10
  iter  15
  iter  20

 Benchmark completed
 VERIFICATION SUCCESSFUL
 L2 Norm is  1.8005644013551E-06
 Error is    6.6330115975290E-14


 Benchmark Completed.
 Class           =                        B
 Size            =            256x 256x 256
 Iterations      =                       20
 Operation type  =           floating point
 Verification    =               SUCCESSFUL
 Version         =                    3.3.1
  SECTION   Time (secs)
  benchmk :   14.512  (100.00%)
  mg3P    :   10.771  ( 74.22%)
  psinv   :    3.618  ( 24.93%)
  resid   :    7.348  ( 50.64%)
    --> mg-resid:    3.712  ( 25.58%)
  rprj3   :    1.477  ( 10.18%)
  interp  :    1.429  (  9.85%)
  norm2   :    0.105  (  0.72%)
  comm3   :    0.317  (  2.18%)


 Benchmark

 No input file. Using compiled defaults 
 Size:  256x 256x 256  (class B)
 Iterations:                     20

  iter   1
  iter   5
  iter  10
  iter  15
  iter  20

 Benchmark completed
 VERIFICATION SUCCESSFUL
 L2 Norm is  1.8005644013551E-06
 Error is    6.6330115975290E-14


 Benchmark Completed.
 Class           =                        B
 Size            =            256x 256x 256
 Iterations      =                       20
 Operation type  =           floating point
 Verification    =               SUCCESSFUL
 Version         =                    3.3.1
  SECTION   Time (secs)
  benchmk :   14.622  (100.00%)
  mg3P    :   10.850  ( 74.20%)
  psinv   :    3.644  ( 24.92%)
  resid   :    7.410  ( 50.68%)
    --> mg-resid:    3.743  ( 25.60%)
  rprj3   :    1.486  ( 10.16%)
  interp  :    1.438  (  9.84%)
  norm2   :    0.105  (  0.72%)
  comm3   :    0.319  (  2.18%)


 Benchmark

 No input file. Using compiled defaults 
 Size:  256x 256x 256  (class B)
 Iterations:                     20

  iter   1
  iter   5
  iter  10
  iter  15
  iter  20

 Benchmark completed
 VERIFICATION SUCCESSFUL
 L2 Norm is  1.8005644013551E-06
 Error is    6.6330115975290E-14


 Benchmark Completed.
 Class           =                        B
 Size            =            256x 256x 256
 Iterations      =                       20
 Operation type  =           floating point
 Verification    =               SUCCESSFUL
 Version         =                    3.3.1
  SECTION   Time (secs)
  benchmk :   15.220  (100.00%)
  mg3P    :   11.291  ( 74.19%)
  psinv   :    3.793  ( 24.92%)
  resid   :    7.722  ( 50.74%)
    --> mg-resid:    3.903  ( 25.64%)
  rprj3   :    1.549  ( 10.18%)
  interp  :    1.490  (  9.79%)
  norm2   :    0.109  (  0.72%)
  comm3   :    0.329  (  2.16%)
# To display the perf.data header info, please use --header/--header-only options.
#
#
# Total Lost Samples: 0
#
# Samples: 29K of event 'cycles'
# Event count (approx.): 17620188710
#
# Overhead  Command  Shared Object    
# ........  .......  .................
#
    94.60%  real     real             
     2.72%  real     [kernel.kallsyms]
     2.63%  real     libc-2.17.so     
     0.03%  real     [kvm]            
     0.01%  real     [nfs]            
     0.00%  perf     [kernel.kallsyms]


# Samples: 42K of event 'instructions'
# Event count (approx.): 19046685162
#
# Overhead  Command  Shared Object    
# ........  .......  .................
#
    98.71%  real     real             
     0.80%  real     [kernel.kallsyms]
     0.47%  real     libc-2.17.so     
     0.01%  real     [kvm]            
     0.01%  real     [nfs]            
     0.00%  real     [vdso]           
     0.00%  real     ld-2.17.so       
     0.00%  perf     [kernel.kallsyms]


# Samples: 42K of event 'cache-references'
# Event count (approx.): 723980637
#
# Overhead  Command  Shared Object    
# ........  .......  .................
#
    96.54%  real     real             
     1.88%  real     [kernel.kallsyms]
     1.52%  real     libc-2.17.so     
     0.06%  real     [kvm]            
     0.00%  real     [vdso]           
     0.00%  real     [nfs]            
     0.00%  real     [sunrpc]         
     0.00%  perf     [kernel.kallsyms]


# Samples: 34K of event 'cache-misses'
# Event count (approx.): 17527793
#
# Overhead  Command  Shared Object    
# ........  .......  .................
#
    87.67%  real     real             
     8.44%  real     libc-2.17.so     
     3.80%  real     [kernel.kallsyms]
     0.05%  real     [vdso]           
     0.04%  real     [kvm]            
     0.00%  real     ld-2.17.so       


# Samples: 29K of event 'bus-cycles'
# Event count (approx.): 2358951124
#
# Overhead  Command  Shared Object    
# ........  .......  .................
#
    94.72%  real     real             
     2.82%  real     libc-2.17.so     
     2.44%  real     [kernel.kallsyms]
     0.02%  real     [kvm]            
     0.00%  real     [sunrpc]         
     0.00%  real     [vdso]           


# Samples: 72K of event 'cpu-clock'
# Event count (approx.): 18162750000
#
# Overhead  Command  Shared Object    
# ........  .......  .................
#
    96.19%  real     real             
     2.78%  real     libc-2.17.so     
     1.02%  real     [kernel.kallsyms]
     0.00%  real     [vdso]           
     0.00%  real     [nfs]            


# To display the perf.data header info, please use --header/--header-only options.
#
#
# Total Lost Samples: 0
#
# Samples: 29K of event 'cycles'
# Event count (approx.): 17620188710
#
# Overhead  Command  Shared Object  Symbol                      
# ........  .......  .............  ............................
#
    44.72%  real     real           [.] resid
    21.71%  real     real           [.] psinv
     8.77%  real     real           [.] rprj3
     8.64%  real     real           [.] interp
     7.02%  real     real           [.] vranlc
     2.63%  real     libc-2.17.so   [.] __memset_sse2
     2.06%  real     real           [.] comm3.isra.0
     1.13%  real     real           [.] norm2u3
     0.47%  real     real           [.] zran3.isra.1.constprop.3
     0.06%  real     real           [.] mg3P.constprop.2
     0.03%  real     real           [.] randlc
     0.01%  real     real           [.] memset@plt
     0.00%  real     real           [.] main
     0.00%  real     real           [.] timer_stop


# Samples: 42K of event 'instructions'
# Event count (approx.): 19046685162
#
# Overhead  Command  Shared Object  Symbol                      
# ........  .......  .............  ............................
#
    50.67%  real     real           [.] resid
    26.21%  real     real           [.] psinv
     7.73%  real     real           [.] interp
     6.86%  real     real           [.] rprj3
     3.87%  real     real           [.] vranlc
     2.14%  real     real           [.] norm2u3
     0.84%  real     real           [.] zran3.isra.1.constprop.3
     0.47%  real     libc-2.17.so   [.] __memset_sse2
     0.35%  real     real           [.] comm3.isra.0
     0.02%  real     real           [.] randlc
     0.02%  real     real           [.] mg3P.constprop.2
     0.00%  real     real           [.] main
     0.00%  real     real           [.] memset@plt


# Samples: 42K of event 'cache-references'
# Event count (approx.): 723980637
#
# Overhead  Command  Shared Object  Symbol                      
# ........  .......  .............  ............................
#
    57.35%  real     real           [.] resid
    21.94%  real     real           [.] psinv
     9.05%  real     real           [.] rprj3
     5.44%  real     real           [.] interp
     1.52%  real     libc-2.17.so   [.] __memset_sse2
     1.13%  real     real           [.] comm3.isra.0
     0.75%  real     real           [.] norm2u3
     0.42%  real     real           [.] zran3.isra.1.constprop.3
     0.40%  real     real           [.] vranlc
     0.03%  real     real           [.] mg3P.constprop.2
     0.02%  real     real           [.] main
     0.02%  real     real           [.] memset@plt
     0.01%  real     real           [.] randlc


# Samples: 34K of event 'cache-misses'
# Event count (approx.): 17527793
#
# Overhead  Command  Shared Object  Symbol                      
# ........  .......  .............  ............................
#
    26.55%  real     real           [.] comm3.isra.0
    25.99%  real     real           [.] rprj3
    24.44%  real     real           [.] resid
     8.44%  real     libc-2.17.so   [.] __memset_sse2
     5.75%  real     real           [.] psinv
     2.99%  real     real           [.] interp
     0.83%  real     real           [.] norm2u3
     0.51%  real     real           [.] zran3.isra.1.constprop.3
     0.43%  real     real           [.] vranlc
     0.13%  real     real           [.] mg3P.constprop.2
     0.03%  real     real           [.] memset@plt
     0.02%  real     real           [.] main
     0.00%  real     real           [.] wtime_
     0.00%  real     real           [.] randlc
     0.00%  real     real           [.] timer_stop


# Samples: 29K of event 'bus-cycles'
# Event count (approx.): 2358951124
#
# Overhead  Command  Shared Object  Symbol                      
# ........  .......  .............  ............................
#
    44.76%  real     real           [.] resid
    21.86%  real     real           [.] psinv
     8.75%  real     real           [.] rprj3
     8.50%  real     real           [.] interp
     7.32%  real     real           [.] vranlc
     2.82%  real     libc-2.17.so   [.] __memset_sse2
     1.80%  real     real           [.] comm3.isra.0
     1.12%  real     real           [.] norm2u3
     0.49%  real     real           [.] zran3.isra.1.constprop.3
     0.06%  real     real           [.] mg3P.constprop.2
     0.03%  real     real           [.] randlc
     0.01%  real     real           [.] memset@plt
     0.00%  real     real           [.] wtime_
     0.00%  real     real           [.] main


# Samples: 72K of event 'cpu-clock'
# Event count (approx.): 18162750000
#
# Overhead  Command  Shared Object  Symbol                      
# ........  .......  .............  ............................
#
    45.48%  real     real           [.] resid
    21.93%  real     real           [.] psinv
     8.96%  real     real           [.] rprj3
     8.62%  real     real           [.] interp
     7.34%  real     real           [.] vranlc
     2.78%  real     libc-2.17.so   [.] __memset_sse2
     1.96%  real     real           [.] comm3.isra.0
     1.21%  real     real           [.] norm2u3
     0.58%  real     real           [.] zran3.isra.1.constprop.3
     0.05%  real     real           [.] mg3P.constprop.2
     0.02%  real     real           [.] randlc
     0.01%  real     real           [.] memset@plt
     0.01%  real     real           [.] main
     0.00%  real     real           [.] timer_stop
     0.00%  real     libc-2.17.so   [.] __printf_fp
     0.00%  real     libc-2.17.so   [.] bsearch
     0.00%  real     real           [.] wtime_


#
# (Tip: Use --symfs <dir> if your symbol files are in non-standard locations)
#
 Percent |	Source code & Disassembly of real for cycles (13004 samples)
----------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000405220 <resid>:
         :	resid():
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void resid(void *ou, void *ov, void *or, int n1, int n2, int n3,
         :	                  double a[4], int k)
         :	{
    0.00 :	  405220:       push   %r15
    0.00 :	  405222:       movslq %ecx,%rax
    0.00 :	  405225:       push   %r14
    0.00 :	  405227:       push   %r13
    0.00 :	  405229:       push   %r12
    0.00 :	  40522b:       push   %rbp
    0.00 :	  40522c:       mov    %rsi,%rbp
    0.00 :	  40522f:       push   %rbx
    0.00 :	  405230:       mov    %rdi,%rbx
         :	  double (*u)[n2][n1] = (double (*)[n2][n1])ou;
    0.00 :	  405233:       lea    0x0(,%rax,8),%rdi
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void resid(void *ou, void *ov, void *or, int n1, int n2, int n3,
         :	                  double a[4], int k)
         :	{
    0.00 :	  40523b:       sub    $0x1168,%rsp
    0.00 :	  405242:       mov    %rdx,0xf8(%rsp)
         :	  double (*u)[n2][n1] = (double (*)[n2][n1])ou;
    0.00 :	  40524a:       movslq %r8d,%rdx
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void resid(void *ou, void *ov, void *or, int n1, int n2, int n3,
         :	                  double a[4], int k)
         :	{
    0.00 :	  40524d:       mov    0x11a0(%rsp),%rsi
         :	  double (*u)[n2][n1] = (double (*)[n2][n1])ou;
    0.00 :	  405255:       imul   %rax,%rdx
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void resid(void *ou, void *ov, void *or, int n1, int n2, int n3,
         :	                  double a[4], int k)
         :	{
    0.00 :	  405259:       mov    %eax,0x24(%rsp)
         :	  double (*r)[n2][n1] = (double (*)[n2][n1])or;
         :
         :	  int i3, i2, i1;
         :	  double u1[M], u2[M];
         :
         :	  if (timeron) timer_start(T_resid);
    0.00 :	  40525d:       mov    0x1c50733d(%rip),%eax        # 1c90c5a0 <timeron>
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void resid(void *ou, void *ov, void *or, int n1, int n2, int n3,
         :	                  double a[4], int k)
         :	{
         :	  double (*u)[n2][n1] = (double (*)[n2][n1])ou;
    0.00 :	  405263:       mov    %rdi,0xf0(%rsp)
    0.00 :	  40526b:       lea    -0x1(%r9),%edi
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void resid(void *ou, void *ov, void *or, int n1, int n2, int n3,
         :	                  double a[4], int k)
         :	{
    0.00 :	  40526f:       mov    %r8d,0xd0(%rsp)
    0.00 :	  405277:       mov    %r9d,0x10c(%rsp)
         :	  double (*u)[n2][n1] = (double (*)[n2][n1])ou;
    0.00 :	  40527f:       mov    %rdx,0x100(%rsp)
         :	  double (*r)[n2][n1] = (double (*)[n2][n1])or;
         :
         :	  int i3, i2, i1;
         :	  double u1[M], u2[M];
         :
         :	  if (timeron) timer_start(T_resid);
    0.01 :	  405287:       mov    %eax,0x108(%rsp)
    0.00 :	  40528e:       mov    %edi,0xdc(%rsp)
    0.00 :	  405295:       test   %eax,%eax
    0.00 :	  405297:       jne    405abd <resid+0x89d>
         :	  for (i3 = 1; i3 < n3-1; i3++) {
    0.00 :	  40529d:       cmpl   $0x1,0xdc(%rsp)
    0.00 :	  4052a5:       jle    405834 <resid+0x614>
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    0.00 :	  4052ab:       mov    0xf0(%rsp),%r9
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  4052b3:       mov    0x24(%rsp),%eax
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    0.00 :	  4052b7:       shr    $0x3,%r9
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  4052bb:       sub    $0x1,%eax
    0.00 :	  4052be:       cmpl   $0x2,0xd0(%rsp)
    0.00 :	  4052c6:       mov    %eax,0x54(%rsp)
    0.00 :	  4052ca:       jle    405834 <resid+0x614>
    0.00 :	  4052d0:       mov    0x100(%rsp),%rcx
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.00 :	  4052d8:       mov    %r9,%r8
    0.00 :	  4052db:       mov    0xf8(%rsp),%rdi
    0.00 :	  4052e3:       lea    0x0(,%r9,8),%r10
    0.00 :	  4052eb:       mov    %r10,0x48(%rsp)
    0.00 :	  4052f0:       lea    0x0(,%rcx,8),%rax
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.00 :	  4052f8:       movl   $0x1,0xd4(%rsp)
    0.00 :	  405303:       add    %rax,%rbp
    0.00 :	  405306:       lea    (%rbx,%rax,1),%r12
    0.00 :	  40530a:       add    %rax,%rdi
    0.00 :	  40530d:       mov    %rax,0xe0(%rsp)
    0.00 :	  405315:       mov    %rbp,0x8(%rsp)
    0.00 :	  40531a:       lea    (%r12,%rax,1),%rbp
    0.00 :	  40531e:       lea    (%rcx,%r9,1),%rax
    0.00 :	  405322:       mov    %rdi,0x10(%rsp)
    0.00 :	  405327:       mov    %rbx,%rdi
    0.00 :	  40532a:       lea    (%rbx,%rax,8),%rbx
    0.00 :	  40532e:       add    %rcx,%rax
    0.00 :	  405331:       mov    0x24(%rsp),%ecx
    0.00 :	  405335:       lea    (%rdi,%rax,8),%rax
    0.00 :	  405339:       mov    %rbx,0x70(%rsp)
    0.00 :	  40533e:       lea    (%rdi,%r10,1),%rbx
    0.00 :	  405342:       mov    %rax,0x80(%rsp)
    0.00 :	  40534a:       mov    %ecx,%eax
    0.00 :	  40534c:       mov    %rbx,0x78(%rsp)
    0.00 :	  405351:       mov    %ecx,%ebx
    0.00 :	  405353:       shr    %eax
    0.00 :	  405355:       and    $0xfffffffe,%ebx
    0.00 :	  405358:       shl    $0x4,%rax
    0.00 :	  40535c:       mov    %ebx,0xb0(%rsp)
    0.00 :	  405363:       mov    %rax,0xa8(%rsp)
    0.00 :	  40536b:       lea    -0x2(%rcx),%eax
    0.00 :	  40536e:       mov    %rax,%rbx
    0.00 :	  405371:       mov    %eax,0xa4(%rsp)
    0.00 :	  405378:       shl    $0x3,%rax
    0.00 :	  40537c:       mov    %rax,0x90(%rsp)
    0.00 :	  405384:       mov    %ebx,%eax
    0.00 :	  405386:       shr    %eax
    0.00 :	  405388:       shl    $0x4,%rax
    0.00 :	  40538c:       mov    %rax,0xb8(%rsp)
    0.00 :	  405394:       mov    %ebx,%eax
    0.00 :	  405396:       and    $0xfffffffe,%ebx
    0.00 :	  405399:       lea    0x1(%rbx),%edx
    0.00 :	  40539c:       mov    %ebx,0xb4(%rsp)
    0.00 :	  4053a3:       add    $0x2,%ebx
    0.00 :	  4053a6:       cmp    $0x2,%eax
    0.00 :	  4053a9:       mov    %edx,0x1c(%rsp)
    0.00 :	  4053ad:       setg   %dl
    0.00 :	  4053b0:       cmp    $0x80000001,%ecx
    0.00 :	  4053b6:       setne  %al
    0.00 :	  4053b9:       mov    %ebx,0x20(%rsp)
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.00 :	  4053bd:       mov    %rbp,%rbx
    0.00 :	  4053c0:       mov    %rsi,%rbp
    0.00 :	  4053c3:       and    %eax,%edx
    0.00 :	  4053c5:       lea    0x8(%r10),%rax
    0.00 :	  4053c9:       mov    %rax,0xe8(%rsp)
    0.00 :	  4053d1:       mov    0xd0(%rsp),%eax
    0.00 :	  4053d8:       mov    %dl,0xdb(%rsp)
    0.00 :	  4053df:       sub    $0x1,%eax
    0.00 :	  4053e2:       mov    %eax,0xa0(%rsp)
    0.00 :	  4053e9:       lea    0x20(%rsi),%rax
    0.00 :	  4053ed:       mov    %rax,0x98(%rsp)
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.00 :	  4053f5:       lea    0x948(%rsp),%rax
    0.00 :	  4053fd:       mov    %rax,0xc0(%rsp)
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.00 :	  405405:       lea    0x950(%rsp),%rax
    0.00 :	  40540d:       mov    %rax,0xc8(%rsp)
    0.00 :	  405415:       nopl   (%rax)
    0.00 :	  405418:       mov    0xe8(%rsp),%rax
    0.00 :	  405420:       add    0x10(%rsp),%rax
         :	  int i3, i2, i1;
         :	  double u1[M], u2[M];
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
    0.00 :	  405425:       mov    $0x1,%ecx
    0.00 :	  40542a:       mov    %r8,%r11
    0.00 :	  40542d:       mov    %rax,0x30(%rsp)
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
    0.00 :	  405432:       mov    0x48(%rsp),%rax
    0.00 :	  405437:       addl   $0x1,0xd4(%rsp)
    0.00 :	  40543f:       mov    %rax,0x28(%rsp)
    0.00 :	  405444:       lea    0x8(%r12),%rax
    0.00 :	  405449:       mov    %rax,0x58(%rsp)
    0.00 :	  40544e:       mov    0x8(%rsp),%rax
    0.00 :	  405453:       movq   $0x0,0x38(%rsp)
    0.00 :	  40545c:       lea    0x8(%rax),%rdx
    0.00 :	  405460:       add    $0x18,%rax
    0.00 :	  405464:       mov    %rdx,0x60(%rsp)
    0.00 :	  405469:       lea    0x18(%r12),%rdx
    0.00 :	  40546e:       mov    %rdx,0x68(%rsp)
    0.00 :	  405473:       mov    %rax,0x88(%rsp)
    0.00 :	  40547b:       nopl   0x0(%rax,%rax,1)
         :	  double u1[M], u2[M];
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
    0.01 :	  405480:       mov    0x24(%rsp),%r8d
    0.00 :	  405485:       lea    0x1(%rcx),%eax
    0.00 :	  405488:       mov    %eax,0x4(%rsp)
    0.01 :	  40548c:       test   %r8d,%r8d
    0.01 :	  40548f:       jle    4055e8 <resid+0x3c8>
    0.00 :	  405495:       lea    -0x1(%rcx),%eax
    0.00 :	  405498:       cmpl   $0x1,0x24(%rsp)
    0.00 :	  40549d:       mov    %eax,0x18(%rsp)
    0.00 :	  4054a1:       je     405a88 <resid+0x868>
    0.00 :	  4054a7:       mov    0x28(%rsp),%rax
    0.00 :	  4054ac:       mov    0x38(%rsp),%rdx
    0.02 :	  4054b1:       mov    %ecx,0x50(%rsp)
    0.02 :	  4054b5:       mov    0x70(%rsp),%r14
    0.00 :	  4054ba:       mov    0x78(%rsp),%r10
    0.00 :	  4054bf:       lea    (%rax,%rbx,1),%rsi
    0.00 :	  4054c3:       lea    (%rax,%rdi,1),%r13
    0.03 :	  4054c7:       mov    %rsi,0x40(%rsp)
    0.00 :	  4054cc:       lea    (%rdx,%r12,1),%r15
    0.02 :	  4054d0:       mov    %rdx,%rsi
    0.00 :	  4054d3:       add    %rax,%r14
    0.00 :	  4054d6:       lea    (%rdx,%rdi,1),%rdx
    0.00 :	  4054da:       add    %rax,%r10
    0.01 :	  4054dd:       mov    0x40(%rsp),%rcx
    0.01 :	  4054e2:       lea    (%rsi,%rbx,1),%r9
    0.01 :	  4054e6:       add    0x80(%rsp),%rax
    0.02 :	  4054ee:       mov    %rdi,0x40(%rsp)
    0.02 :	  4054f3:       lea    0x120(%rsp),%rsi
    0.00 :	  4054fb:       mov    0xa8(%rsp),%rdi
    0.00 :	  405503:       mov    %rax,%r8
    0.00 :	  405506:       xor    %eax,%eax
    0.02 :	  405508:       nopl   0x0(%rax,%rax,1)
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    1.91 :	  405510:       movupd (%r14,%rax,1),%xmm5
    4.81 :	  405516:       movupd (%r15,%rax,1),%xmm0
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
    2.31 :	  40551c:       movupd 0x0(%r13,%rax,1),%xmm7
    2.17 :	  405523:       movupd (%rcx,%rax,1),%xmm6
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    3.39 :	  405528:       addpd  %xmm5,%xmm0
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
    0.28 :	  40552c:       movupd (%r10,%rax,1),%xmm4
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
    6.24 :	  405532:       movupd (%r9,%rax,1),%xmm3
    2.85 :	  405538:       movupd (%r8,%rax,1),%xmm5
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
   10.04 :	  40553e:       addpd  %xmm7,%xmm0
    0.02 :	  405542:       addpd  %xmm6,%xmm0
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    1.16 :	  405546:       movaps %xmm0,(%rsi,%rax,1)
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
    1.55 :	  40554a:       movupd (%rdx,%rax,1),%xmm0
    4.36 :	  40554f:       addpd  %xmm4,%xmm0
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
    1.99 :	  405553:       addpd  %xmm3,%xmm0
    2.91 :	  405557:       addpd  %xmm5,%xmm0
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
    3.87 :	  40555b:       movaps %xmm0,0x940(%rsp,%rax,1)
    1.99 :	  405563:       add    $0x10,%rax
    0.00 :	  405567:       cmp    %rdi,%rax
    0.00 :	  40556a:       jne    405510 <resid+0x2f0>
    0.00 :	  40556c:       mov    0xb0(%rsp),%eax
    0.23 :	  405573:       mov    0x24(%rsp),%edx
    0.04 :	  405577:       movslq 0x50(%rsp),%rcx
    0.05 :	  40557c:       mov    0x40(%rsp),%rdi
         :	  double u1[M], u2[M];
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
    0.00 :	  405581:       movslq %eax,%rsi
    0.00 :	  405584:       cmp    %edx,%eax
    0.00 :	  405586:       je     4055e8 <resid+0x3c8>
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    0.00 :	  405588:       movslq 0x18(%rsp),%rdx
    0.00 :	  40558d:       movslq 0x4(%rsp),%rax
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
    0.00 :	  405592:       movslq %ecx,%r8
    0.00 :	  405595:       imul   %r11,%r8
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    0.00 :	  405599:       imul   %r11,%rdx
    0.00 :	  40559d:       imul   %r11,%rax
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
    0.00 :	  4055a1:       add    %rsi,%r8
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    0.00 :	  4055a4:       add    %rsi,%rdx
    0.00 :	  4055a7:       add    %rsi,%rax
    0.00 :	  4055aa:       movsd  (%r12,%rdx,8),%xmm0
    0.00 :	  4055b0:       addsd  (%r12,%rax,8),%xmm0
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
    0.00 :	  4055b6:       addsd  (%rdi,%r8,8),%xmm0
    0.00 :	  4055bc:       addsd  (%rbx,%r8,8),%xmm0
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    0.00 :	  4055c2:       movsd  %xmm0,0x120(%rsp,%rsi,8)
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
    0.00 :	  4055cb:       movsd  (%rdi,%rdx,8),%xmm0
    0.00 :	  4055d0:       addsd  (%rdi,%rax,8),%xmm0
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
    0.00 :	  4055d5:       addsd  (%rbx,%rdx,8),%xmm0
    0.00 :	  4055da:       addsd  (%rbx,%rax,8),%xmm0
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
    0.00 :	  4055df:       movsd  %xmm0,0x940(%rsp,%rsi,8)
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.02 :	  4055e8:       cmpl   $0x1,0x54(%rsp)
    0.02 :	  4055ed:       jle    4057b5 <resid+0x595>
    0.02 :	  4055f3:       mov    0x28(%rsp),%r15
    0.00 :	  4055f8:       mov    0x58(%rsp),%rax
    0.00 :	  4055fd:       mov    0x60(%rsp),%rdx
    0.02 :	  405602:       mov    0x30(%rsp),%r14
    0.00 :	  405607:       mov    0x90(%rsp),%rsi
    0.02 :	  40560f:       add    %r15,%rax
    0.00 :	  405612:       add    %r15,%rdx
    0.00 :	  405615:       cmp    0x98(%rsp),%r14
    0.05 :	  40561d:       lea    0x10(%r14),%r9
    0.00 :	  405621:       setae  %r8b
    0.01 :	  405625:       add    %r14,%rsi
    0.00 :	  405628:       cmp    %rsi,%rbp
    0.00 :	  40562b:       setae  %sil
    0.01 :	  40562f:       or     %r8d,%esi
    0.03 :	  405632:       cmpl   $0x3,0x24(%rsp)
    0.00 :	  405637:       setne  %r8b
    0.00 :	  40563b:       and    %r8d,%esi
    0.03 :	  40563e:       mov    0x68(%rsp),%r8
    0.00 :	  405643:       add    %r15,%r8
    0.04 :	  405646:       cmp    %r8,%r14
    0.01 :	  405649:       setae  %r8b
    0.00 :	  40564d:       cmp    %r9,%rax
    0.02 :	  405650:       setae  %r10b
    0.02 :	  405654:       or     %r10d,%r8d
    0.05 :	  405657:       test   %r8b,%sil
    0.01 :	  40565a:       je     405908 <resid+0x6e8>
    0.01 :	  405660:       mov    0x88(%rsp),%rsi
    0.00 :	  405668:       add    %r15,%rsi
    0.00 :	  40566b:       cmp    %rsi,%r14
    0.02 :	  40566e:       setae  %sil
    0.02 :	  405672:       cmp    %rdx,%r9
    0.00 :	  405675:       setbe  %r8b
    0.00 :	  405679:       or     %r8b,%sil
    0.01 :	  40567c:       je     405908 <resid+0x6e8>
    0.00 :	  405682:       movsd  0x0(%rbp),%xmm7
    0.04 :	  405687:       movsd  0x10(%rbp),%xmm6
    0.01 :	  40568c:       xor    %esi,%esi
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.00 :	  40568e:       mov    %r14,%r9
    0.00 :	  405691:       movsd  0x18(%rbp),%xmm5
    0.00 :	  405696:       mov    0xb8(%rsp),%r8
    0.00 :	  40569e:       mov    0xc0(%rsp),%r10
    0.00 :	  4056a6:       unpcklpd %xmm7,%xmm7
    0.00 :	  4056aa:       unpcklpd %xmm6,%xmm6
    0.00 :	  4056ae:       movapd 0x940(%rsp),%xmm2
    0.00 :	  4056b7:       movapd 0x120(%rsp),%xmm3
    0.02 :	  4056c0:       mov    0xc8(%rsp),%r13
    0.00 :	  4056c8:       unpcklpd %xmm5,%xmm5
    0.00 :	  4056cc:       nopl   0x0(%rax)
    1.88 :	  4056d0:       movupd (%r10,%rsi,1),%xmm1
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    2.25 :	  4056d6:       movupd (%rax,%rsi,1),%xmm0
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    5.21 :	  4056db:       movapd 0x0(%r13,%rsi,1),%xmm4
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    0.04 :	  4056e2:       movupd (%rdx,%rsi,1),%xmm8
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
   14.16 :	  4056e8:       addpd  %xmm3,%xmm1
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    0.04 :	  4056ec:       mulpd  %xmm7,%xmm0
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.25 :	  4056f0:       movapd 0x130(%rsp,%rsi,1),%xmm3
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    1.77 :	  4056f9:       addpd  %xmm4,%xmm2
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.28 :	  4056fd:       addpd  %xmm3,%xmm1
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.15 :	  405701:       mulpd  %xmm5,%xmm2
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    0.19 :	  405705:       subpd  %xmm0,%xmm8
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    2.43 :	  40570a:       mulpd  %xmm6,%xmm1
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    0.25 :	  40570e:       movapd %xmm8,%xmm0
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.68 :	  405713:       subpd  %xmm1,%xmm0
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    2.63 :	  405717:       subpd  %xmm2,%xmm0
    4.40 :	  40571b:       movapd %xmm4,%xmm2
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
    0.00 :	  40571f:       movups %xmm0,(%r9,%rsi,1)
    6.57 :	  405724:       add    $0x10,%rsi
    0.01 :	  405728:       cmp    %r8,%rsi
    1.31 :	  40572b:       jne    4056d0 <resid+0x4b0>
    0.00 :	  40572d:       mov    0xb4(%rsp),%esi
    0.13 :	  405734:       mov    0xa4(%rsp),%eax
    0.02 :	  40573b:       cmp    %eax,%esi
    0.01 :	  40573d:       je     4057b5 <resid+0x595>
    0.00 :	  40573f:       imul   %r11,%rcx
    0.00 :	  405743:       movslq 0x1c(%rsp),%rax
         :	                      - a[0] * u[i3][i2][i1]
    0.00 :	  405748:       mov    0x8(%rsp),%rdx
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
    0.00 :	  40574d:       add    %rax,%rcx
         :	                      - a[0] * u[i3][i2][i1]
    0.00 :	  405750:       movsd  (%r12,%rcx,8),%xmm1
    0.00 :	  405756:       mulsd  0x0(%rbp),%xmm1
    0.00 :	  40575b:       movsd  (%rdx,%rcx,8),%xmm0
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.00 :	  405760:       movslq %esi,%rdx
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    0.00 :	  405763:       subsd  %xmm1,%xmm0
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.00 :	  405767:       movsd  0x120(%rsp,%rdx,8),%xmm1
    0.00 :	  405770:       addsd  0x940(%rsp,%rax,8),%xmm1
    0.00 :	  405779:       movslq 0x20(%rsp),%rax
    0.00 :	  40577e:       addsd  0x120(%rsp,%rax,8),%xmm1
    0.00 :	  405787:       mulsd  0x10(%rbp),%xmm1
    0.00 :	  40578c:       subsd  %xmm1,%xmm0
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.00 :	  405790:       movsd  0x940(%rsp,%rax,8),%xmm1
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
    0.00 :	  405799:       mov    0x10(%rsp),%rax
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.00 :	  40579e:       addsd  0x940(%rsp,%rdx,8),%xmm1
    0.00 :	  4057a7:       mulsd  0x18(%rbp),%xmm1
    0.00 :	  4057ac:       subsd  %xmm1,%xmm0
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
    0.00 :	  4057b0:       movsd  %xmm0,(%rax,%rcx,8)
    0.02 :	  4057b5:       mov    0x48(%rsp),%rax
    0.00 :	  4057ba:       movslq 0x4(%rsp),%rcx
    0.12 :	  4057bf:       add    %rax,0x30(%rsp)
    0.02 :	  4057c4:       add    %rax,0x38(%rsp)
    0.00 :	  4057c9:       add    %rax,0x28(%rsp)
         :	  int i3, i2, i1;
         :	  double u1[M], u2[M];
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
    0.01 :	  4057ce:       cmp    0xa0(%rsp),%ecx
    0.02 :	  4057d5:       jne    405480 <resid+0x260>
    0.00 :	  4057db:       mov    0xe0(%rsp),%rax
    0.01 :	  4057e3:       mov    %r11,%r8
    0.00 :	  4057e6:       add    %rax,0x8(%rsp)
    0.00 :	  4057eb:       add    %rax,0x10(%rsp)
         :
         :	  int i3, i2, i1;
         :	  double u1[M], u2[M];
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
    0.00 :	  4057f0:       mov    0xd4(%rsp),%ecx
    0.00 :	  4057f7:       add    %rax,%r12
    0.00 :	  4057fa:       add    %rax,%rdi
    0.00 :	  4057fd:       add    %rax,%rbx
    0.00 :	  405800:       add    %rax,0x70(%rsp)
    0.00 :	  405805:       add    %rax,0x78(%rsp)
    0.00 :	  40580a:       add    %rax,0x80(%rsp)
    0.00 :	  405812:       cmp    %ecx,0xdc(%rsp)
    0.01 :	  405819:       jg     405418 <resid+0x1f8>
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
         :	      }
         :	    }
         :	  }
         :	  if (timeron) timer_stop(T_resid);
    0.00 :	  40581f:       mov    0x108(%rsp),%esi
    0.00 :	  405826:       test   %esi,%esi
    0.00 :	  405828:       je     405834 <resid+0x614>
    0.00 :	  40582a:       mov    $0x4,%edi
    0.00 :	  40582f:       callq  4015f0 <timer_stop>
         :
         :	  //---------------------------------------------------------------------
         :	  // exchange boundary data
         :	  //---------------------------------------------------------------------
         :	  comm3(r, n1, n2, n3, k);
    0.00 :	  405834:       mov    0x10c(%rsp),%ebp
    0.00 :	  40583b:       mov    0xd0(%rsp),%r15d
    0.00 :	  405843:       mov    0x24(%rsp),%r14d
    0.00 :	  405848:       mov    0xf8(%rsp),%rbx
    0.00 :	  405850:       mov    %ebp,%ecx
    0.00 :	  405852:       mov    %r15d,%edx
    0.00 :	  405855:       mov    %r14d,%esi
    0.00 :	  405858:       mov    %rbx,%rdi
    0.00 :	  40585b:       callq  402560 <comm3.isra.0>
         :
         :	  if (debug_vec[0] >= 1) {
    0.00 :	  405860:       mov    0x1c506e5a(%rip),%ecx        # 1c90c6c0 <debug_vec>
    0.00 :	  405866:       test   %ecx,%ecx
    0.00 :	  405868:       jle    4058df <resid+0x6bf>
         :	rep_nrm():
         :	//---------------------------------------------------------------------
         :	static void rep_nrm(void *u, int n1, int n2, int n3, char *title, int kk)
         :	{
         :	  double rnm2, rnmu;
         :
         :	  norm2u3(u, n1, n2, n3, &rnm2, &rnmu, nx[kk], ny[kk], nz[kk]);
    0.00 :	  40586a:       sub    $0x8,%rsp
    0.00 :	  40586e:       mov    %r14d,%esi
    0.00 :	  405871:       mov    %rbx,%rdi
    0.00 :	  405874:       mov    %ebp,%ecx
    0.00 :	  405876:       movslq 0x11b0(%rsp),%rax
    0.00 :	  40587e:       mov    0x1c90c700(,%rax,4),%edx
    0.00 :	  405885:       push   %rdx
    0.00 :	  405886:       mov    0x1c90c740(,%rax,4),%edx
    0.00 :	  40588d:       mov    0x1c90c780(,%rax,4),%eax
    0.00 :	  405894:       push   %rdx
    0.00 :	  405895:       mov    %r15d,%edx
    0.00 :	  405898:       push   %rax
    0.00 :	  405899:       lea    0x138(%rsp),%r9
    0.00 :	  4058a1:       lea    0x130(%rsp),%r8
    0.00 :	  4058a9:       callq  402380 <norm2u3>
         :	  printf(" Level%2d in %8s: norms =%21.14E%21.14E\n", kk, title, rnm2, rnmu);
    0.00 :	  4058ae:       add    $0x20,%rsp
    0.00 :	  4058b2:       mov    $0x40a4dc,%edx
    0.00 :	  4058b7:       movsd  0x118(%rsp),%xmm1
    0.00 :	  4058c0:       movsd  0x110(%rsp),%xmm0
    0.00 :	  4058c9:       mov    $0x40a748,%edi
    0.00 :	  4058ce:       mov    $0x2,%eax
    0.00 :	  4058d3:       mov    0x11a8(%rsp),%esi
    0.00 :	  4058da:       callq  400750 <printf@plt>
         :	resid():
         :
         :	  if (debug_vec[0] >= 1) {
         :	    rep_nrm(r, n1, n2, n3, "   resid", k);
         :	  }
         :
         :	  if (debug_vec[2] >= k) {
    0.00 :	  4058df:       mov    0x11a8(%rsp),%eax
    0.00 :	  4058e6:       cmp    %eax,0x1c506ddc(%rip)        # 1c90c6c8 <debug_vec+0x8>
    0.00 :	  4058ec:       jge    405b18 <resid+0x8f8>
         :	    showall(r, n1, n2, n3);
         :	  }
         :	}
    0.00 :	  4058f2:       add    $0x1168,%rsp
    0.00 :	  4058f9:       pop    %rbx
    0.00 :	  4058fa:       pop    %rbp
    0.00 :	  4058fb:       pop    %r12
    0.00 :	  4058fd:       pop    %r13
    0.00 :	  4058ff:       pop    %r14
    0.00 :	  405901:       pop    %r15
    0.00 :	  405903:       retq   
    0.00 :	  405904:       nopl   0x0(%rax)
    0.00 :	  405908:       cmpb   $0x0,0xdb(%rsp)
    0.01 :	  405910:       je     405a8f <resid+0x86f>
    0.00 :	  405916:       mov    0x28(%rsp),%r9
    0.00 :	  40591b:       mov    0x8(%rsp),%rcx
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  405920:       mov    $0x3,%eax
    0.00 :	  405925:       lea    0x120(%rsp),%rsi
    0.00 :	  40592d:       movsd  0x120(%rsp),%xmm4
    0.00 :	  405936:       mov    0x10(%rsp),%r10
    0.01 :	  40593b:       movsd  0x128(%rsp),%xmm3
    0.00 :	  405944:       lea    (%r9,%rcx,1),%rdx
    0.00 :	  405948:       lea    (%r9,%r12,1),%rcx
    0.00 :	  40594c:       movsd  0x940(%rsp),%xmm2
    0.00 :	  405955:       movsd  0x948(%rsp),%xmm0
    0.00 :	  40595e:       lea    (%r9,%r10,1),%r8
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.13 :	  405962:       movapd %xmm4,%xmm6
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    0.00 :	  405966:       movsd  -0x10(%rcx,%rax,8),%xmm7
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.01 :	  40596c:       mov    %eax,%r10d
    0.00 :	  40596f:       movsd  -0x8(%rsi,%rax,8),%xmm4
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    0.08 :	  405975:       mulsd  0x0(%rbp),%xmm7
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.01 :	  40597a:       addsd  %xmm0,%xmm6
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    0.00 :	  40597e:       movsd  -0x10(%rdx,%rax,8),%xmm1
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.01 :	  405984:       movsd  0x938(%rsp,%rax,8),%xmm5
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.13 :	  40598d:       addsd  %xmm4,%xmm6
    0.01 :	  405991:       mulsd  0x10(%rbp),%xmm6
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.01 :	  405996:       addsd  %xmm5,%xmm2
    0.00 :	  40599a:       mulsd  0x18(%rbp),%xmm2
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.14 :	  40599f:       addsd  %xmm5,%xmm3
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    0.00 :	  4059a3:       subsd  %xmm7,%xmm1
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.00 :	  4059a7:       movsd  0x940(%rsp,%rax,8),%xmm7
    0.00 :	  4059b0:       addsd  %xmm7,%xmm0
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.11 :	  4059b4:       subsd  %xmm6,%xmm1
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.00 :	  4059b8:       subsd  %xmm2,%xmm1
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.15 :	  4059bc:       movapd %xmm3,%xmm2
    0.00 :	  4059c0:       movsd  (%rsi,%rax,8),%xmm3
    0.08 :	  4059c5:       addsd  %xmm3,%xmm2
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
    0.00 :	  4059c9:       movsd  %xmm1,-0x10(%r8,%rax,8)
         :	                      - a[0] * u[i3][i2][i1]
    0.03 :	  4059d0:       movsd  0x0(%rbp),%xmm6
    0.00 :	  4059d5:       mulsd  -0x8(%rcx,%rax,8),%xmm6
    0.06 :	  4059db:       movsd  -0x8(%rdx,%rax,8),%xmm1
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.30 :	  4059e1:       mulsd  0x10(%rbp),%xmm2
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.15 :	  4059e6:       mulsd  0x18(%rbp),%xmm0
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
         :	                      - a[0] * u[i3][i2][i1]
    0.01 :	  4059eb:       subsd  %xmm6,%xmm1
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.04 :	  4059ef:       subsd  %xmm2,%xmm1
    0.29 :	  4059f3:       movapd %xmm5,%xmm2
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.00 :	  4059f7:       subsd  %xmm0,%xmm1
    0.35 :	  4059fb:       movapd %xmm7,%xmm0
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
    0.02 :	  4059ff:       movsd  %xmm1,-0x8(%r8,%rax,8)
    0.12 :	  405a06:       add    $0x2,%rax
    0.00 :	  405a0a:       lea    -0x1(%rax),%r9d
    0.00 :	  405a0e:       cmp    %r9d,0xa4(%rsp)
    0.01 :	  405a16:       jg     405962 <resid+0x742>
    0.00 :	  405a1c:       mov    0x54(%rsp),%r9d
    0.00 :	  405a21:       movslq %r10d,%rax
    0.00 :	  405a24:       nopl   0x0(%rax)
         :	                      - a[0] * u[i3][i2][i1]
    0.00 :	  405a28:       movsd  (%rcx,%rax,8),%xmm1
    0.00 :	  405a2d:       mulsd  0x0(%rbp),%xmm1
    0.00 :	  405a32:       movsd  (%rdx,%rax,8),%xmm0
    0.01 :	  405a37:       subsd  %xmm1,%xmm0
         :	        //  Assume a[1] = 0      (Enable 2 lines below if a[1] not= 0)
         :	        //-------------------------------------------------------------------
         :	        //            - a[1] * ( u[i3][i2][i1-1] + u[i3][i2][i1+1]
         :	        //                     + u1[i1] )
         :	        //-------------------------------------------------------------------
         :	                      - a[2] * ( u2[i1] + u1[i1-1] + u1[i1+1] )
    0.00 :	  405a3b:       movsd  -0x8(%rsi,%rax,8),%xmm1
    0.00 :	  405a41:       addsd  0x940(%rsp,%rax,8),%xmm1
    0.00 :	  405a4a:       addsd  0x8(%rsi,%rax,8),%xmm1
    0.00 :	  405a50:       mulsd  0x10(%rbp),%xmm1
    0.02 :	  405a55:       subsd  %xmm1,%xmm0
         :	                      - a[3] * ( u2[i1-1] + u2[i1+1] );
    0.01 :	  405a59:       movsd  0x938(%rsp,%rax,8),%xmm1
    0.00 :	  405a62:       addsd  0x948(%rsp,%rax,8),%xmm1
    0.00 :	  405a6b:       mulsd  0x18(%rbp),%xmm1
    0.01 :	  405a70:       subsd  %xmm1,%xmm0
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        r[i3][i2][i1] = v[i3][i2][i1]
    0.02 :	  405a74:       movsd  %xmm0,(%r8,%rax,8)
    0.00 :	  405a7a:       add    $0x1,%rax
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  405a7e:       cmp    %eax,%r9d
    0.00 :	  405a81:       jg     405a28 <resid+0x808>
    0.00 :	  405a83:       jmpq   4057b5 <resid+0x595>
         :	  double u1[M], u2[M];
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
    0.00 :	  405a88:       xor    %esi,%esi
    0.00 :	  405a8a:       jmpq   405588 <resid+0x368>
    0.00 :	  405a8f:       mov    0x28(%rsp),%rax
    0.00 :	  405a94:       mov    0x8(%rsp),%rcx
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  405a99:       mov    $0x1,%r10d
    0.00 :	  405a9f:       lea    0x120(%rsp),%rsi
    0.00 :	  405aa7:       mov    0x10(%rsp),%r9
    0.00 :	  405aac:       lea    (%rax,%rcx,1),%rdx
    0.00 :	  405ab0:       lea    (%rax,%r12,1),%rcx
    0.00 :	  405ab4:       lea    (%rax,%r9,1),%r8
    0.00 :	  405ab8:       jmpq   405a1c <resid+0x7fc>
         :	  double (*r)[n2][n1] = (double (*)[n2][n1])or;
         :
         :	  int i3, i2, i1;
         :	  double u1[M], u2[M];
         :
         :	  if (timeron) timer_start(T_resid);
    0.00 :	  405abd:       mov    $0x4,%edi
    0.00 :	  405ac2:       callq  4015c0 <timer_start>
         :	  for (i3 = 1; i3 < n3-1; i3++) {
    0.00 :	  405ac7:       cmpl   $0x1,0xdc(%rsp)
    0.00 :	  405acf:       mov    0x11a0(%rsp),%rsi
    0.00 :	  405ad7:       jle    405c26 <resid+0xa06>
    0.00 :	  405add:       mov    0x1c506abd(%rip),%eax        # 1c90c5a0 <timeron>
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    0.00 :	  405ae3:       mov    0xf0(%rsp),%r9
    0.00 :	  405aeb:       mov    %eax,0x108(%rsp)
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  405af2:       mov    0x24(%rsp),%eax
         :
         :	  if (timeron) timer_start(T_resid);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        u1[i1] = u[i3][i2-1][i1] + u[i3][i2+1][i1]
    0.00 :	  405af6:       shr    $0x3,%r9
         :	               + u[i3-1][i2][i1] + u[i3+1][i2][i1];
         :	        u2[i1] = u[i3-1][i2-1][i1] + u[i3-1][i2+1][i1]
         :	               + u[i3+1][i2-1][i1] + u[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  405afa:       sub    $0x1,%eax
    0.00 :	  405afd:       cmpl   $0x2,0xd0(%rsp)
    0.00 :	  405b05:       mov    %eax,0x54(%rsp)
    0.00 :	  405b09:       jg     4052d0 <resid+0xb0>
    0.00 :	  405b0f:       jmpq   40581f <resid+0x5ff>
    0.00 :	  405b14:       nopl   0x0(%rax)
         :	showall():
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  405b18:       mov    0x24(%rsp),%ebx
    0.00 :	  405b1c:       mov    $0x12,%eax
         :	  m2 = min(n2, 14);
    0.00 :	  405b21:       mov    $0xe,%r12d
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
    0.00 :	  405b27:       mov    $0x40a4e5,%edi
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  405b2c:       cmp    $0x12,%ebx
    0.00 :	  405b2f:       cmovg  %eax,%ebx
    0.00 :	  405b32:       mov    %ebx,0x4(%rsp)
         :	  m2 = min(n2, 14);
    0.00 :	  405b36:       mov    0xd0(%rsp),%ebx
    0.00 :	  405b3d:       cmp    $0xe,%ebx
    0.00 :	  405b40:       cmovle %ebx,%r12d
         :	  m3 = min(n3, 18);
    0.00 :	  405b44:       mov    0x10c(%rsp),%ebx
    0.00 :	  405b4b:       cmp    $0x12,%ebx
    0.00 :	  405b4e:       cmovle %ebx,%eax
    0.00 :	  405b51:       mov    %eax,0x8(%rsp)
         :
         :	  printf("   \n");
    0.00 :	  405b55:       callq  400730 <puts@plt>
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  405b5a:       test   %ebx,%ebx
    0.00 :	  405b5c:       jle    405c17 <resid+0x9f7>
    0.00 :	  405b62:       mov    0x100(%rsp),%rax
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  405b6a:       mov    0xf0(%rsp),%r13
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  405b72:       movl   $0x0,0x18(%rsp)
    0.00 :	  405b7a:       mov    0xf8(%rsp),%rbp
    0.00 :	  405b82:       shl    $0x3,%rax
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  405b86:       shr    $0x3,%r13
    0.00 :	  405b8a:       mov    %rax,0x10(%rsp)
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  405b8f:       mov    0x24(%rsp),%eax
    0.00 :	  405b93:       test   %eax,%eax
    0.00 :	  405b95:       jle    405bf5 <resid+0x9d5>
    0.00 :	  405b97:       xor    %r14d,%r14d
    0.00 :	  405b9a:       nopw   0x0(%rax,%rax,1)
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  405ba0:       mov    0xd0(%rsp),%edx
    0.00 :	  405ba7:       xor    %r15d,%r15d
    0.00 :	  405baa:       movslq %r14d,%rbx
    0.00 :	  405bad:       test   %edx,%edx
    0.00 :	  405baf:       jle    405be0 <resid+0x9c0>
    0.00 :	  405bb1:       nopl   0x0(%rax)
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  405bb8:       movslq %r15d,%rax
    0.00 :	  405bbb:       mov    $0x40a4e9,%edi
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  405bc0:       add    $0x1,%r15d
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  405bc4:       imul   %r13,%rax
    0.00 :	  405bc8:       add    %rbx,%rax
    0.00 :	  405bcb:       movsd  0x0(%rbp,%rax,8),%xmm0
    0.00 :	  405bd1:       mov    $0x1,%eax
    0.00 :	  405bd6:       callq  400750 <printf@plt>
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  405bdb:       cmp    %r15d,%r12d
    0.00 :	  405bde:       jg     405bb8 <resid+0x998>
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
    0.00 :	  405be0:       mov    $0xa,%edi
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  405be5:       add    $0x1,%r14d
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
    0.00 :	  405be9:       callq  400710 <putchar@plt>
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  405bee:       cmp    %r14d,0x4(%rsp)
    0.00 :	  405bf3:       jg     405ba0 <resid+0x980>
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
    0.00 :	  405bf5:       mov    $0x40a4ef,%edi
    0.00 :	  405bfa:       callq  400730 <puts@plt>
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  405bff:       addl   $0x1,0x18(%rsp)
    0.00 :	  405c04:       add    0x10(%rsp),%rbp
    0.00 :	  405c09:       mov    0x18(%rsp),%eax
    0.00 :	  405c0d:       cmp    %eax,0x8(%rsp)
    0.00 :	  405c11:       jg     405b8f <resid+0x96f>
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
         :	  }
         :	  printf("   \n");
    0.00 :	  405c17:       mov    $0x40a4e5,%edi
    0.00 :	  405c1c:       callq  400730 <puts@plt>
         :	resid():
         :	  }
         :
         :	  if (debug_vec[2] >= k) {
         :	    showall(r, n1, n2, n3);
         :	  }
         :	}
    0.00 :	  405c21:       jmpq   4058f2 <resid+0x6d2>
    0.00 :	  405c26:       mov    0x1c506974(%rip),%eax        # 1c90c5a0 <timeron>
    0.00 :	  405c2c:       mov    %eax,0x108(%rsp)
    0.00 :	  405c33:       jmpq   40581f <resid+0x5ff>
 Percent |	Source code & Disassembly of real for cycles (6303 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000405c40 <psinv>:
         :	psinv():
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void psinv(void *or, void *ou, int n1, int n2, int n3,
         :	                  double c[4], int k)
         :	{
    0.00 :	  405c40:       push   %r15
    0.00 :	  405c42:       movslq %edx,%rax
         :	  double (*r)[n2][n1] = (double (*)[n2][n1])or;
    0.00 :	  405c45:       movslq %ecx,%rdx
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void psinv(void *or, void *ou, int n1, int n2, int n3,
         :	                  double c[4], int k)
         :	{
    0.00 :	  405c48:       push   %r14
         :	  double (*r)[n2][n1] = (double (*)[n2][n1])or;
    0.00 :	  405c4a:       imul   %rax,%rdx
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void psinv(void *or, void *ou, int n1, int n2, int n3,
         :	                  double c[4], int k)
         :	{
    0.00 :	  405c4e:       mov    %r9,%r14
    0.00 :	  405c51:       push   %r13
    0.00 :	  405c53:       push   %r12
    0.00 :	  405c55:       push   %rbp
    0.00 :	  405c56:       push   %rbx
    0.00 :	  405c57:       mov    %rdi,%rbx
         :	  double (*r)[n2][n1] = (double (*)[n2][n1])or;
    0.00 :	  405c5a:       lea    0x0(,%rax,8),%rdi
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void psinv(void *or, void *ou, int n1, int n2, int n3,
         :	                  double c[4], int k)
         :	{
    0.00 :	  405c62:       sub    $0x1168,%rsp
    0.00 :	  405c69:       mov    %eax,0x48(%rsp)
         :
         :	  int i3, i2, i1;
         :
         :	  double r1[M], r2[M];
         :
         :	  if (timeron) timer_start(T_psinv);
    0.00 :	  405c6d:       mov    0x1c50692d(%rip),%eax        # 1c90c5a0 <timeron>
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void psinv(void *or, void *ou, int n1, int n2, int n3,
         :	                  double c[4], int k)
         :	{
    0.00 :	  405c73:       mov    %ecx,0xbc(%rsp)
    0.00 :	  405c7a:       lea    -0x1(%r8),%ecx
    0.00 :	  405c7e:       mov    %rsi,0xf8(%rsp)
    0.00 :	  405c86:       mov    %r8d,0x10c(%rsp)
         :	  double (*r)[n2][n1] = (double (*)[n2][n1])or;
    0.00 :	  405c8e:       mov    %rdi,0xf0(%rsp)
    0.00 :	  405c96:       mov    %rdx,0x100(%rsp)
         :
         :	  int i3, i2, i1;
         :
         :	  double r1[M], r2[M];
         :
         :	  if (timeron) timer_start(T_psinv);
    0.00 :	  405c9e:       mov    %eax,0x108(%rsp)
    0.00 :	  405ca5:       mov    %ecx,0xe0(%rsp)
    0.00 :	  405cac:       test   %eax,%eax
    0.00 :	  405cae:       jne    4064a2 <psinv+0x862>
         :	  for (i3 = 1; i3 < n3-1; i3++) {
    0.00 :	  405cb4:       cmpl   $0x1,0xe0(%rsp)
    0.00 :	  405cbc:       jle    40620b <psinv+0x5cb>
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  405cc2:       mov    0x48(%rsp),%eax
    0.00 :	  405cc6:       mov    %rdi,%r9
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    0.00 :	  405cc9:       shr    $0x3,%r9
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  405ccd:       sub    $0x1,%eax
    0.00 :	  405cd0:       cmpl   $0x2,0xbc(%rsp)
    0.00 :	  405cd8:       mov    %eax,0x68(%rsp)
    0.00 :	  405cdc:       jle    40620b <psinv+0x5cb>
    0.00 :	  405ce2:       mov    0x100(%rsp),%rcx
    0.00 :	  405cea:       mov    0xf8(%rsp),%rdi
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    0.00 :	  405cf2:       mov    %r9,%r8
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  405cf5:       movl   $0x1,0xd8(%rsp)
    0.00 :	  405d00:       lea    0x0(,%rcx,8),%rax
    0.00 :	  405d08:       mov    %rax,0xc0(%rsp)
    0.00 :	  405d10:       lea    (%rbx,%rax,1),%rbp
    0.00 :	  405d14:       lea    (%rcx,%r9,1),%rax
    0.00 :	  405d18:       shl    $0x3,%rax
    0.00 :	  405d1c:       add    %rax,%rdi
    0.00 :	  405d1f:       lea    (%rbx,%rax,1),%r15
    0.00 :	  405d23:       mov    %rcx,%rax
    0.00 :	  405d26:       neg    %rax
    0.00 :	  405d29:       mov    %rdi,0xc8(%rsp)
    0.00 :	  405d31:       mov    0x48(%rsp),%edi
    0.00 :	  405d35:       shl    $0x3,%rax
    0.00 :	  405d39:       mov    %rax,0xe8(%rsp)
    0.00 :	  405d41:       mov    %r9,%rax
    0.00 :	  405d44:       mov    %edi,%ecx
    0.00 :	  405d46:       neg    %rax
    0.00 :	  405d49:       and    $0xfffffffe,%ecx
    0.00 :	  405d4c:       shl    $0x3,%rax
    0.00 :	  405d50:       mov    %ecx,0x94(%rsp)
    0.00 :	  405d57:       mov    %rax,0x70(%rsp)
    0.00 :	  405d5c:       lea    0x0(,%r9,8),%rax
    0.00 :	  405d64:       mov    %rax,0x28(%rsp)
    0.00 :	  405d69:       mov    %edi,%eax
    0.00 :	  405d6b:       shr    %eax
    0.00 :	  405d6d:       shl    $0x4,%rax
    0.00 :	  405d71:       mov    %rax,0x98(%rsp)
    0.00 :	  405d79:       lea    -0x2(%rdi),%eax
    0.00 :	  405d7c:       mov    %rax,%rcx
    0.00 :	  405d7f:       mov    %eax,0x90(%rsp)
    0.00 :	  405d86:       shl    $0x3,%rax
    0.00 :	  405d8a:       mov    %rax,0x78(%rsp)
    0.00 :	  405d8f:       mov    %ecx,%eax
    0.00 :	  405d91:       shr    %eax
    0.00 :	  405d93:       shl    $0x4,%rax
    0.00 :	  405d97:       mov    %rax,0xa0(%rsp)
    0.00 :	  405d9f:       mov    %ecx,%eax
    0.00 :	  405da1:       and    $0xfffffffe,%ecx
    0.00 :	  405da4:       lea    0x1(%rcx),%esi
    0.00 :	  405da7:       mov    %ecx,0xb8(%rsp)
    0.00 :	  405dae:       add    $0x2,%ecx
    0.00 :	  405db1:       cmp    $0x80000001,%edi
    0.00 :	  405db7:       setne  %dl
    0.00 :	  405dba:       cmp    $0x2,%eax
    0.00 :	  405dbd:       mov    %esi,0xe4(%rsp)
    0.00 :	  405dc4:       setg   %al
    0.00 :	  405dc7:       mov    %ecx,0x1c(%rsp)
    0.00 :	  405dcb:       and    %eax,%edx
    0.00 :	  405dcd:       mov    0xbc(%rsp),%eax
    0.00 :	  405dd4:       mov    %dl,0xdf(%rsp)
    0.00 :	  405ddb:       sub    $0x1,%eax
    0.00 :	  405dde:       mov    %eax,0x6c(%rsp)
    0.00 :	  405de2:       lea    0x18(%r14),%rax
    0.00 :	  405de6:       mov    %rax,0x80(%rsp)
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    0.00 :	  405dee:       lea    0x948(%rsp),%rax
    0.00 :	  405df6:       mov    %rax,0xa8(%rsp)
    0.00 :	  405dfe:       lea    0x130(%rsp),%rax
    0.00 :	  405e06:       mov    %rax,0xb0(%rsp)
    0.00 :	  405e0e:       xchg   %ax,%ax
    0.00 :	  405e10:       mov    0xc8(%rsp),%rax
    0.02 :	  405e18:       mov    0x70(%rsp),%rdi
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    0.00 :	  405e1d:       mov    %r8,0x60(%rsp)
         :
         :	  double r1[M], r2[M];
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
    0.00 :	  405e22:       mov    $0x1,%ebx
    0.00 :	  405e27:       mov    0xe8(%rsp),%rsi
    0.00 :	  405e2f:       mov    0xc0(%rsp),%rdx
    0.00 :	  405e37:       add    %rax,%rdi
    0.00 :	  405e3a:       lea    0x8(%rax),%r13
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    0.00 :	  405e3e:       mov    %rax,0x58(%rsp)
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
    0.02 :	  405e43:       lea    0x128(%rsp),%rax
    0.00 :	  405e4b:       lea    0x0(%rbp,%rsi,1),%rcx
    0.00 :	  405e50:       mov    %rdi,0x10(%rsp)
    0.02 :	  405e55:       lea    (%r15,%rsi,1),%rdi
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
    0.00 :	  405e59:       movslq 0xe4(%rsp),%r12
    0.00 :	  405e61:       lea    (%rdx,%r15,1),%rsi
    0.00 :	  405e65:       addl   $0x1,0xd8(%rsp)
    0.00 :	  405e6d:       lea    0x0(%rbp,%rdx,1),%r9
    0.00 :	  405e72:       mov    %rsi,0xd0(%rsp)
    0.00 :	  405e7a:       mov    %r12,%r11
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
    0.00 :	  405e7d:       mov    %rax,0x88(%rsp)
    0.00 :	  405e85:       nopl   (%rax)
         :	  double r1[M], r2[M];
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
    0.00 :	  405e88:       mov    0x48(%rsp),%r10d
    0.02 :	  405e8d:       lea    0x1(%rbx),%eax
    0.00 :	  405e90:       mov    %eax,0x18(%rsp)
    0.00 :	  405e94:       test   %r10d,%r10d
    0.02 :	  405e97:       jle    406460 <psinv+0x820>
    0.00 :	  405e9d:       lea    -0x1(%rbx),%eax
    0.00 :	  405ea0:       cmpl   $0x1,0x48(%rsp)
    0.00 :	  405ea5:       mov    %eax,0x8(%rsp)
    0.00 :	  405ea9:       je     40647b <psinv+0x83b>
    0.00 :	  405eaf:       mov    0x70(%rsp),%rax
    0.00 :	  405eb4:       mov    %r8,0x40(%rsp)
    0.00 :	  405eb9:       mov    %ebx,0x4c(%rsp)
    0.03 :	  405ebd:       lea    (%r15,%rax,1),%rdx
    0.00 :	  405ec1:       lea    (%rdi,%rax,1),%r12
    0.00 :	  405ec5:       mov    %r13,0x50(%rsp)
    0.00 :	  405eca:       mov    %rdx,0x30(%rsp)
    0.00 :	  405ecf:       mov    0x28(%rsp),%rdx
    0.00 :	  405ed4:       mov    %r12,0x38(%rsp)
    0.05 :	  405ed9:       mov    0x30(%rsp),%r8
    0.06 :	  405ede:       lea    (%rdx,%r15,1),%r10
    0.02 :	  405ee2:       mov    %rdx,%r12
    0.00 :	  405ee5:       mov    %rcx,0x30(%rsp)
    0.00 :	  405eea:       mov    0x38(%rsp),%rbx
    0.02 :	  405eef:       mov    %r10,0x20(%rsp)
    0.00 :	  405ef4:       mov    0x98(%rsp),%rcx
    0.00 :	  405efc:       lea    (%rdx,%rdi,1),%r10
    0.00 :	  405f00:       add    %rsi,%r12
    0.02 :	  405f03:       mov    0x20(%rsp),%r13
    0.00 :	  405f08:       lea    (%rsi,%rax,1),%rdx
    0.00 :	  405f0c:       xor    %eax,%eax
    0.00 :	  405f0e:       xchg   %ax,%ax
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    2.00 :	  405f10:       movupd 0x0(%r13,%rax,1),%xmm7
    4.90 :	  405f17:       movupd (%r8,%rax,1),%xmm0
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
    2.36 :	  405f1d:       movupd (%rdi,%rax,1),%xmm5
    2.38 :	  405f22:       movupd (%rsi,%rax,1),%xmm6
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    2.82 :	  405f27:       addpd  %xmm7,%xmm0
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
    0.36 :	  405f2b:       movupd (%r10,%rax,1),%xmm4
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
    5.85 :	  405f31:       movupd (%rdx,%rax,1),%xmm7
    2.94 :	  405f36:       movupd (%r12,%rax,1),%xmm3
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
    9.71 :	  405f3c:       addpd  %xmm5,%xmm0
    0.05 :	  405f40:       addpd  %xmm6,%xmm0
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    1.30 :	  405f44:       movaps %xmm0,0x120(%rsp,%rax,1)
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
    1.73 :	  405f4c:       movupd (%rbx,%rax,1),%xmm0
    4.51 :	  405f51:       addpd  %xmm4,%xmm0
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
    1.89 :	  405f55:       addpd  %xmm7,%xmm0
    2.62 :	  405f59:       addpd  %xmm3,%xmm0
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
    4.30 :	  405f5d:       movaps %xmm0,0x940(%rsp,%rax,1)
    2.09 :	  405f65:       add    $0x10,%rax
    0.00 :	  405f69:       cmp    %rcx,%rax
    0.00 :	  405f6c:       jne    405f10 <psinv+0x2d0>
    0.00 :	  405f6e:       mov    0x94(%rsp),%eax
    0.13 :	  405f75:       mov    0x48(%rsp),%edi
    0.03 :	  405f79:       mov    0x40(%rsp),%r8
    0.00 :	  405f7e:       mov    0x4c(%rsp),%ebx
    0.02 :	  405f82:       mov    0x50(%rsp),%r13
    0.02 :	  405f87:       mov    0x30(%rsp),%rcx
    0.03 :	  405f8c:       cmp    %edi,%eax
    0.00 :	  405f8e:       je     405ff4 <psinv+0x3b4>
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    0.00 :	  405f90:       movslq %eax,%rsi
    0.00 :	  405f93:       movslq 0x8(%rsp),%rdx
    0.00 :	  405f98:       movslq 0x18(%rsp),%rax
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
    0.00 :	  405f9d:       movslq %ebx,%rdi
    0.00 :	  405fa0:       imul   %r8,%rdi
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    0.00 :	  405fa4:       imul   %r8,%rdx
    0.00 :	  405fa8:       imul   %r8,%rax
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
    0.00 :	  405fac:       add    %rsi,%rdi
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    0.00 :	  405faf:       add    %rsi,%rdx
    0.00 :	  405fb2:       add    %rsi,%rax
    0.00 :	  405fb5:       movsd  0x0(%rbp,%rdx,8),%xmm0
    0.00 :	  405fbb:       addsd  0x0(%rbp,%rax,8),%xmm0
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
    0.00 :	  405fc1:       addsd  (%rcx,%rdi,8),%xmm0
    0.00 :	  405fc6:       addsd  (%r9,%rdi,8),%xmm0
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    0.00 :	  405fcc:       movsd  %xmm0,0x120(%rsp,%rsi,8)
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
    0.00 :	  405fd5:       movsd  (%rcx,%rdx,8),%xmm0
    0.00 :	  405fda:       addsd  (%rcx,%rax,8),%xmm0
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
    0.00 :	  405fdf:       addsd  (%r9,%rdx,8),%xmm0
    0.00 :	  405fe5:       addsd  (%r9,%rax,8),%xmm0
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
    0.00 :	  405feb:       movsd  %xmm0,0x940(%rsp,%rsi,8)
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  405ff4:       cmpl   $0x1,0x68(%rsp)
    0.03 :	  405ff9:       jle    40619c <psinv+0x55c>
    0.03 :	  405fff:       mov    0x78(%rsp),%rax
    0.03 :	  406004:       cmp    0x80(%rsp),%r13
    0.00 :	  40600c:       lea    0x20(%r15),%rsi
    0.00 :	  406010:       setae  %dl
    0.00 :	  406013:       add    %r13,%rax
    0.00 :	  406016:       cmp    %rax,%r14
    0.02 :	  406019:       setae  %al
    0.02 :	  40601c:       or     %eax,%edx
    0.05 :	  40601e:       lea    0x10(%r13),%rax
    0.00 :	  406022:       cmp    %rax,%r15
    0.00 :	  406025:       setae  %al
    0.03 :	  406028:       cmp    %rsi,%r13
    0.00 :	  40602b:       setae  %sil
    0.00 :	  40602f:       or     %esi,%eax
    0.00 :	  406031:       test   %al,%dl
    0.02 :	  406033:       je     4062e0 <psinv+0x6a0>
    0.02 :	  406039:       cmpl   $0x3,0x48(%rsp)
    0.00 :	  40603e:       je     4062e0 <psinv+0x6a0>
    0.05 :	  406044:       movsd  (%r14),%xmm6
    0.05 :	  406049:       mov    %r8,0x8(%rsp)
    0.03 :	  40604e:       lea    0x8(%r15),%rsi
    0.00 :	  406052:       xor    %eax,%eax
    0.00 :	  406054:       movsd  0x8(%r14),%xmm5
    0.00 :	  40605a:       movsd  0x10(%r14),%xmm4
    0.00 :	  406060:       mov    %ebx,0x30(%rsp)
    0.05 :	  406064:       lea    0x10(%r15),%rdx
    0.00 :	  406068:       mov    %rcx,0x38(%rsp)
    0.02 :	  40606d:       mov    0xa8(%rsp),%rdi
    0.00 :	  406075:       unpcklpd %xmm6,%xmm6
    0.00 :	  406079:       mov    0xa0(%rsp),%rcx
    0.00 :	  406081:       unpcklpd %xmm5,%xmm5
    0.00 :	  406085:       unpcklpd %xmm4,%xmm4
    0.00 :	  406089:       movapd 0x120(%rsp),%xmm3
    0.02 :	  406092:       mov    0xb0(%rsp),%r8
    0.02 :	  40609a:       mov    0x88(%rsp),%rbx
    0.02 :	  4060a2:       nopw   0x0(%rax,%rax,1)
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    2.13 :	  4060a8:       movupd (%r15,%rax,1),%xmm7
    2.24 :	  4060ae:       movupd (%rdx,%rax,1),%xmm0
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    2.41 :	  4060b3:       movupd (%rdi,%rax,1),%xmm1
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
    2.24 :	  4060b8:       movupd (%rsi,%rax,1),%xmm2
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    2.03 :	  4060bd:       addpd  %xmm7,%xmm0
         :	                               + r1[i1] )
    0.03 :	  4060c1:       movupd (%rbx,%rax,1),%xmm7
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    1.98 :	  4060c6:       addpd  %xmm3,%xmm1
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
    0.05 :	  4060ca:       mulpd  %xmm6,%xmm2
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    0.05 :	  4060ce:       movapd (%r8,%rax,1),%xmm3
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
    2.00 :	  4060d4:       addpd  %xmm7,%xmm0
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
    0.03 :	  4060d8:       movupd 0x0(%r13,%rax,1),%xmm7
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
   14.66 :	  4060df:       addpd  %xmm3,%xmm1
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.08 :	  4060e3:       mulpd  %xmm5,%xmm0
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
    0.65 :	  4060e7:       addpd  %xmm7,%xmm2
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    3.51 :	  4060eb:       mulpd  %xmm4,%xmm1
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.44 :	  4060ef:       addpd  %xmm2,%xmm0
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    2.87 :	  4060f3:       addpd  %xmm1,%xmm0
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
    4.00 :	  4060f7:       movups %xmm0,0x0(%r13,%rax,1)
    5.39 :	  4060fd:       add    $0x10,%rax
    0.00 :	  406101:       cmp    %rcx,%rax
    0.00 :	  406104:       jne    4060a8 <psinv+0x468>
    0.02 :	  406106:       movslq 0xb8(%rsp),%rsi
    0.13 :	  40610e:       mov    0x90(%rsp),%eax
    0.00 :	  406115:       mov    0x8(%rsp),%r8
    0.00 :	  40611a:       movslq 0x30(%rsp),%rbx
    0.05 :	  40611f:       mov    0x38(%rsp),%rcx
    0.00 :	  406124:       cmp    %eax,%esi
    0.02 :	  406126:       je     40619c <psinv+0x55c>
    0.00 :	  406128:       imul   %r8,%rbx
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  40612c:       movslq 0x1c(%rsp),%rdx
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
    0.00 :	  406131:       lea    (%r11,%rbx,1),%rax
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  406135:       lea    (%rdx,%rbx,1),%rdi
    0.00 :	  406139:       add    %rsi,%rbx
    0.00 :	  40613c:       movsd  0x0(%rbp,%rdi,8),%xmm0
    0.00 :	  406142:       addsd  0x0(%rbp,%rbx,8),%xmm0
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
    0.00 :	  406148:       mov    0x10(%rsp),%rbx
    0.00 :	  40614d:       movsd  0x0(%rbp,%rax,8),%xmm1
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
    0.00 :	  406153:       addsd  0x120(%rsp,%r11,8),%xmm0
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  40615d:       mulsd  0x8(%r14),%xmm0
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
    0.00 :	  406163:       mulsd  (%r14),%xmm1
    0.00 :	  406168:       addsd  (%rbx,%rax,8),%xmm1
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  40616d:       addsd  %xmm1,%xmm0
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    0.00 :	  406171:       movsd  0x120(%rsp,%rsi,8),%xmm1
    0.00 :	  40617a:       addsd  0x940(%rsp,%r11,8),%xmm1
    0.00 :	  406184:       addsd  0x120(%rsp,%rdx,8),%xmm1
    0.00 :	  40618d:       mulsd  0x10(%r14),%xmm1
    0.00 :	  406193:       addsd  %xmm1,%xmm0
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
    0.00 :	  406197:       movsd  %xmm0,(%rbx,%rax,8)
    0.03 :	  40619c:       mov    0x28(%rsp),%rdi
    0.00 :	  4061a1:       mov    0x20(%rsp),%r15
    0.02 :	  4061a6:       mov    %r12,%rsi
    0.00 :	  4061a9:       add    %rdi,0x58(%rsp)
    0.10 :	  4061ae:       mov    0x18(%rsp),%ebx
    0.00 :	  4061b2:       add    %rdi,%r13
    0.00 :	  4061b5:       add    %r8,0x60(%rsp)
    0.06 :	  4061ba:       mov    %r10,%rdi
         :
         :	  double r1[M], r2[M];
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
    0.00 :	  4061bd:       cmp    0x6c(%rsp),%ebx
    0.00 :	  4061c1:       jne    405e88 <psinv+0x248>
    0.00 :	  4061c7:       mov    0xc0(%rsp),%rcx
    0.02 :	  4061cf:       mov    %r9,%rbp
    0.00 :	  4061d2:       add    %rcx,0xc8(%rsp)
    0.00 :	  4061da:       mov    0xd0(%rsp),%r15
         :	  int i3, i2, i1;
         :
         :	  double r1[M], r2[M];
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
    0.00 :	  4061e2:       mov    0xd8(%rsp),%ecx
    0.00 :	  4061e9:       cmp    %ecx,0xe0(%rsp)
    0.00 :	  4061f0:       jg     405e10 <psinv+0x1d0>
         :	        //            + c[3] * ( r2[i1-1] + r2[i1+1] )
         :	        //--------------------------------------------------------------------
         :	      }
         :	    }
         :	  }
         :	  if (timeron) timer_stop(T_psinv);
    0.00 :	  4061f6:       mov    0x108(%rsp),%esi
    0.00 :	  4061fd:       test   %esi,%esi
    0.00 :	  4061ff:       je     40620b <psinv+0x5cb>
    0.00 :	  406201:       mov    $0x3,%edi
    0.00 :	  406206:       callq  4015f0 <timer_stop>
         :
         :	  //---------------------------------------------------------------------
         :	  // exchange boundary points
         :	  //---------------------------------------------------------------------
         :	  comm3(u, n1, n2, n3, k);
    0.00 :	  40620b:       mov    0x10c(%rsp),%ebp
    0.00 :	  406212:       mov    0xbc(%rsp),%r14d
    0.00 :	  40621a:       mov    0x48(%rsp),%r15d
    0.00 :	  40621f:       mov    0xf8(%rsp),%rbx
    0.00 :	  406227:       mov    %ebp,%ecx
    0.00 :	  406229:       mov    %r14d,%edx
    0.00 :	  40622c:       mov    %r15d,%esi
    0.00 :	  40622f:       mov    %rbx,%rdi
    0.00 :	  406232:       callq  402560 <comm3.isra.0>
         :
         :	  if (debug_vec[0] >= 1) {
    0.00 :	  406237:       mov    0x1c506483(%rip),%ecx        # 1c90c6c0 <debug_vec>
    0.00 :	  40623d:       test   %ecx,%ecx
    0.00 :	  40623f:       jle    4062b6 <psinv+0x676>
         :	rep_nrm():
         :	//---------------------------------------------------------------------
         :	static void rep_nrm(void *u, int n1, int n2, int n3, char *title, int kk)
         :	{
         :	  double rnm2, rnmu;
         :
         :	  norm2u3(u, n1, n2, n3, &rnm2, &rnmu, nx[kk], ny[kk], nz[kk]);
    0.00 :	  406241:       sub    $0x8,%rsp
    0.00 :	  406245:       mov    %r15d,%esi
    0.00 :	  406248:       mov    %rbx,%rdi
    0.00 :	  40624b:       mov    %ebp,%ecx
    0.00 :	  40624d:       movslq 0x11a8(%rsp),%rax
    0.00 :	  406255:       mov    0x1c90c700(,%rax,4),%edx
    0.00 :	  40625c:       push   %rdx
    0.00 :	  40625d:       mov    0x1c90c740(,%rax,4),%edx
    0.00 :	  406264:       mov    0x1c90c780(,%rax,4),%eax
    0.00 :	  40626b:       push   %rdx
    0.00 :	  40626c:       mov    %r14d,%edx
    0.00 :	  40626f:       push   %rax
    0.00 :	  406270:       lea    0x138(%rsp),%r9
    0.00 :	  406278:       lea    0x130(%rsp),%r8
    0.00 :	  406280:       callq  402380 <norm2u3>
         :	  printf(" Level%2d in %8s: norms =%21.14E%21.14E\n", kk, title, rnm2, rnmu);
    0.00 :	  406285:       add    $0x20,%rsp
    0.00 :	  406289:       mov    $0x40a500,%edx
    0.00 :	  40628e:       movsd  0x118(%rsp),%xmm1
    0.00 :	  406297:       movsd  0x110(%rsp),%xmm0
    0.00 :	  4062a0:       mov    $0x40a748,%edi
    0.00 :	  4062a5:       mov    $0x2,%eax
    0.00 :	  4062aa:       mov    0x11a0(%rsp),%esi
    0.00 :	  4062b1:       callq  400750 <printf@plt>
         :	psinv():
         :
         :	  if (debug_vec[0] >= 1) {
         :	    rep_nrm(u, n1, n2, n3, "   psinv", k);
         :	  }
         :
         :	  if (debug_vec[3] >= k) {
    0.00 :	  4062b6:       mov    0x11a0(%rsp),%eax
    0.00 :	  4062bd:       cmp    %eax,0x1c506409(%rip)        # 1c90c6cc <debug_vec+0xc>
    0.00 :	  4062c3:       jge    4064f8 <psinv+0x8b8>
         :	    showall(u, n1, n2, n3);
         :	  }
         :	}
    0.00 :	  4062c9:       add    $0x1168,%rsp
    0.00 :	  4062d0:       pop    %rbx
    0.00 :	  4062d1:       pop    %rbp
    0.00 :	  4062d2:       pop    %r12
    0.00 :	  4062d4:       pop    %r13
    0.00 :	  4062d6:       pop    %r14
    0.00 :	  4062d8:       pop    %r15
    0.00 :	  4062da:       retq   
    0.00 :	  4062db:       nopl   0x0(%rax,%rax,1)
    0.00 :	  4062e0:       cmpb   $0x0,0xdf(%rsp)
    0.00 :	  4062e8:       je     406498 <psinv+0x858>
    0.00 :	  4062ee:       mov    0x58(%rsp),%rax
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  4062f3:       mov    $0x3,%esi
    0.00 :	  4062f8:       movsd  0x120(%rsp),%xmm3
    0.00 :	  406301:       movsd  0x128(%rsp),%xmm2
    0.00 :	  40630a:       lea    0x8(%rax),%rdi
    0.00 :	  40630e:       mov    0x60(%rsp),%rax
    0.00 :	  406313:       lea    0x0(%rbp,%rax,8),%rax
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  406318:       movsd  0x10(%rax),%xmm0
    0.00 :	  40631d:       addsd  (%rax),%xmm0
    0.00 :	  406321:       mov    %esi,%ebx
    0.00 :	  406323:       add    $0x10,%rdi
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    0.00 :	  406327:       addsd  0x930(%rsp,%rsi,8),%xmm3
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
    0.00 :	  406330:       movsd  0x8(%rax),%xmm4
    0.00 :	  406335:       add    $0x10,%rax
    0.00 :	  406339:       mulsd  (%r14),%xmm4
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
    0.00 :	  40633e:       addsd  %xmm2,%xmm0
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  406342:       mulsd  0x8(%r14),%xmm0
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
    0.00 :	  406348:       addsd  -0x10(%rdi),%xmm4
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    0.00 :	  40634d:       addsd  0x938(%rsp,%rsi,8),%xmm2
    0.00 :	  406356:       movapd %xmm3,%xmm1
    0.00 :	  40635a:       movsd  0x118(%rsp,%rsi,8),%xmm3
    0.00 :	  406363:       addsd  %xmm3,%xmm1
    0.00 :	  406367:       mulsd  0x10(%r14),%xmm1
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  40636d:       addsd  %xmm4,%xmm0
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    0.00 :	  406371:       addsd  %xmm1,%xmm0
    0.00 :	  406375:       movapd %xmm2,%xmm1
    0.00 :	  406379:       movsd  0x120(%rsp,%rsi,8),%xmm2
    0.00 :	  406382:       add    $0x2,%rsi
    0.00 :	  406386:       lea    -0x1(%rsi),%edx
    0.00 :	  406389:       addsd  %xmm2,%xmm1
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
    0.00 :	  40638d:       movsd  %xmm0,-0x10(%rdi)
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  406392:       movsd  -0x8(%rax),%xmm0
    0.00 :	  406397:       addsd  0x8(%rax),%xmm0
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
    0.00 :	  40639c:       movsd  (%rax),%xmm4
    0.00 :	  4063a0:       mulsd  (%r14),%xmm4
    0.00 :	  4063a5:       addsd  -0x8(%rdi),%xmm4
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    0.00 :	  4063aa:       mulsd  0x10(%r14),%xmm1
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
         :	                               + r1[i1] )
    0.00 :	  4063b0:       addsd  %xmm3,%xmm0
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  4063b4:       mulsd  0x8(%r14),%xmm0
    0.00 :	  4063ba:       addsd  %xmm4,%xmm0
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    0.00 :	  4063be:       addsd  %xmm1,%xmm0
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
    0.00 :	  4063c2:       movsd  %xmm0,-0x8(%rdi)
    0.00 :	  4063c7:       cmp    %edx,0x90(%rsp)
    0.00 :	  4063ce:       jg     406318 <psinv+0x6d8>
    0.00 :	  4063d4:       mov    0x60(%rsp),%rdi
    0.00 :	  4063d9:       movslq %ebx,%rax
    0.00 :	  4063dc:       mov    0x58(%rsp),%rsi
    0.00 :	  4063e1:       lea    (%rax,%rdi,1),%rdx
    0.00 :	  4063e5:       mov    0x68(%rsp),%edi
    0.00 :	  4063e9:       lea    0x0(%rbp,%rdx,8),%rdx
    0.00 :	  4063ee:       xchg   %ax,%ax
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  4063f0:       movsd  -0x8(%rdx),%xmm0
    0.00 :	  4063f5:       addsd  0x8(%rdx),%xmm0
    0.00 :	  4063fa:       add    $0x8,%rdx
         :	                               + r1[i1] )
    0.00 :	  4063fe:       addsd  0x120(%rsp,%rax,8),%xmm0
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  406407:       mulsd  0x8(%r14),%xmm0
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
         :	                      + c[0] * r[i3][i2][i1]
    0.00 :	  40640d:       movsd  (%r14),%xmm1
    0.00 :	  406412:       mulsd  -0x8(%rdx),%xmm1
    0.00 :	  406417:       addsd  (%rsi,%rax,8),%xmm1
         :	                      + c[1] * ( r[i3][i2][i1-1] + r[i3][i2][i1+1]
    0.00 :	  40641c:       addsd  %xmm1,%xmm0
         :	                               + r1[i1] )
         :	                      + c[2] * ( r2[i1] + r1[i1-1] + r1[i1+1] );
    0.00 :	  406420:       movsd  0x940(%rsp,%rax,8),%xmm1
    0.00 :	  406429:       addsd  0x118(%rsp,%rax,8),%xmm1
    0.00 :	  406432:       addsd  0x128(%rsp,%rax,8),%xmm1
    0.00 :	  40643b:       mulsd  0x10(%r14),%xmm1
    0.00 :	  406441:       addsd  %xmm1,%xmm0
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
         :	        u[i3][i2][i1] = u[i3][i2][i1]
    0.00 :	  406445:       movsd  %xmm0,(%rsi,%rax,8)
    0.00 :	  40644a:       add    $0x1,%rax
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  40644e:       cmp    %eax,%edi
    0.00 :	  406450:       jg     4063f0 <psinv+0x7b0>
    0.00 :	  406452:       jmpq   40619c <psinv+0x55c>
    0.00 :	  406457:       nopw   0x0(%rax,%rax,1)
    0.00 :	  406460:       mov    0x28(%rsp),%rax
    0.00 :	  406465:       lea    (%rax,%r15,1),%rdx
    0.00 :	  406469:       lea    (%rax,%rdi,1),%r10
    0.00 :	  40646d:       mov    %rdx,0x20(%rsp)
    0.00 :	  406472:       lea    (%rax,%rsi,1),%r12
    0.00 :	  406476:       jmpq   405ff4 <psinv+0x3b4>
    0.00 :	  40647b:       mov    0x28(%rsp),%rdx
         :	  double r1[M], r2[M];
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
    0.00 :	  406480:       xor    %eax,%eax
    0.00 :	  406482:       lea    (%rdx,%r15,1),%r10
    0.00 :	  406486:       lea    (%rdx,%rsi,1),%r12
    0.00 :	  40648a:       mov    %r10,0x20(%rsp)
    0.00 :	  40648f:       lea    (%rdx,%rdi,1),%r10
    0.00 :	  406493:       jmpq   405f90 <psinv+0x350>
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  406498:       mov    $0x1,%ebx
    0.00 :	  40649d:       jmpq   4063d4 <psinv+0x794>
         :
         :	  int i3, i2, i1;
         :
         :	  double r1[M], r2[M];
         :
         :	  if (timeron) timer_start(T_psinv);
    0.00 :	  4064a2:       mov    $0x3,%edi
    0.00 :	  4064a7:       callq  4015c0 <timer_start>
         :	  for (i3 = 1; i3 < n3-1; i3++) {
    0.00 :	  4064ac:       cmpl   $0x1,0xe0(%rsp)
    0.00 :	  4064b4:       jle    406606 <psinv+0x9c6>
    0.00 :	  4064ba:       mov    0x1c5060e0(%rip),%eax        # 1c90c5a0 <timeron>
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    0.00 :	  4064c0:       mov    0xf0(%rsp),%r9
    0.00 :	  4064c8:       mov    %eax,0x108(%rsp)
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  4064cf:       mov    0x48(%rsp),%eax
         :
         :	  if (timeron) timer_start(T_psinv);
         :	  for (i3 = 1; i3 < n3-1; i3++) {
         :	    for (i2 = 1; i2 < n2-1; i2++) {
         :	      for (i1 = 0; i1 < n1; i1++) {
         :	        r1[i1] = r[i3][i2-1][i1] + r[i3][i2+1][i1]
    0.00 :	  4064d3:       shr    $0x3,%r9
         :	               + r[i3-1][i2][i1] + r[i3+1][i2][i1];
         :	        r2[i1] = r[i3-1][i2-1][i1] + r[i3-1][i2+1][i1]
         :	               + r[i3+1][i2-1][i1] + r[i3+1][i2+1][i1];
         :	      }
         :	      for (i1 = 1; i1 < n1-1; i1++) {
    0.00 :	  4064d7:       sub    $0x1,%eax
    0.00 :	  4064da:       cmpl   $0x2,0xbc(%rsp)
    0.00 :	  4064e2:       mov    %eax,0x68(%rsp)
    0.00 :	  4064e6:       jg     405ce2 <psinv+0xa2>
    0.00 :	  4064ec:       jmpq   4061f6 <psinv+0x5b6>
    0.00 :	  4064f1:       nopl   0x0(%rax)
         :	showall():
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  4064f8:       mov    0x48(%rsp),%ecx
    0.00 :	  4064fc:       mov    $0x12,%eax
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
    0.00 :	  406501:       mov    $0x40a4e5,%edi
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
    0.00 :	  406506:       mov    0x10c(%rsp),%ebx
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
    0.00 :	  40650d:       mov    $0xe,%r12d
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  406513:       cmp    $0x12,%ecx
    0.00 :	  406516:       cmovg  %eax,%ecx
    0.00 :	  406519:       mov    %ecx,0x18(%rsp)
         :	  m2 = min(n2, 14);
    0.00 :	  40651d:       mov    0xbc(%rsp),%ecx
    0.00 :	  406524:       cmp    $0xe,%ecx
    0.00 :	  406527:       cmovle %ecx,%r12d
         :	  m3 = min(n3, 18);
    0.00 :	  40652b:       cmp    $0x12,%ebx
    0.00 :	  40652e:       cmovle %ebx,%eax
    0.00 :	  406531:       mov    %eax,0x1c(%rsp)
         :
         :	  printf("   \n");
    0.00 :	  406535:       callq  400730 <puts@plt>
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  40653a:       test   %ebx,%ebx
    0.00 :	  40653c:       jle    4065f7 <psinv+0x9b7>
    0.00 :	  406542:       mov    0x100(%rsp),%rax
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  40654a:       mov    0xf0(%rsp),%r13
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  406552:       movl   $0x0,0x8(%rsp)
    0.00 :	  40655a:       mov    0xf8(%rsp),%rbp
    0.00 :	  406562:       shl    $0x3,%rax
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  406566:       shr    $0x3,%r13
    0.00 :	  40656a:       mov    %rax,0x10(%rsp)
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  40656f:       mov    0x48(%rsp),%eax
    0.00 :	  406573:       test   %eax,%eax
    0.00 :	  406575:       jle    4065d5 <psinv+0x995>
    0.00 :	  406577:       xor    %r14d,%r14d
    0.00 :	  40657a:       nopw   0x0(%rax,%rax,1)
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  406580:       mov    0xbc(%rsp),%edx
    0.00 :	  406587:       xor    %r15d,%r15d
    0.00 :	  40658a:       movslq %r14d,%rbx
    0.00 :	  40658d:       test   %edx,%edx
    0.00 :	  40658f:       jle    4065c0 <psinv+0x980>
    0.00 :	  406591:       nopl   0x0(%rax)
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  406598:       movslq %r15d,%rax
    0.00 :	  40659b:       mov    $0x40a4e9,%edi
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  4065a0:       add    $0x1,%r15d
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  4065a4:       imul   %r13,%rax
    0.00 :	  4065a8:       add    %rbx,%rax
    0.00 :	  4065ab:       movsd  0x0(%rbp,%rax,8),%xmm0
    0.00 :	  4065b1:       mov    $0x1,%eax
    0.00 :	  4065b6:       callq  400750 <printf@plt>
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  4065bb:       cmp    %r15d,%r12d
    0.00 :	  4065be:       jg     406598 <psinv+0x958>
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
    0.00 :	  4065c0:       mov    $0xa,%edi
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  4065c5:       add    $0x1,%r14d
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
    0.00 :	  4065c9:       callq  400710 <putchar@plt>
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  4065ce:       cmp    %r14d,0x18(%rsp)
    0.00 :	  4065d3:       jg     406580 <psinv+0x940>
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
    0.00 :	  4065d5:       mov    $0x40a4ef,%edi
    0.00 :	  4065da:       callq  400730 <puts@plt>
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  4065df:       addl   $0x1,0x8(%rsp)
    0.00 :	  4065e4:       add    0x10(%rsp),%rbp
    0.00 :	  4065e9:       mov    0x8(%rsp),%eax
    0.00 :	  4065ed:       cmp    %eax,0x1c(%rsp)
    0.00 :	  4065f1:       jg     40656f <psinv+0x92f>
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
         :	  }
         :	  printf("   \n");
    0.00 :	  4065f7:       mov    $0x40a4e5,%edi
    0.00 :	  4065fc:       callq  400730 <puts@plt>
         :	psinv():
         :	  }
         :
         :	  if (debug_vec[3] >= k) {
         :	    showall(u, n1, n2, n3);
         :	  }
         :	}
    0.00 :	  406601:       jmpq   4062c9 <psinv+0x689>
    0.00 :	  406606:       mov    0x1c505f94(%rip),%eax        # 1c90c5a0 <timeron>
    0.00 :	  40660c:       mov    %eax,0x108(%rsp)
    0.00 :	  406613:       jmpq   4061f6 <psinv+0x5b6>
 Percent |	Source code & Disassembly of real for cycles (2548 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000406620 <rprj3>:
         :	rprj3():
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void rprj3(void *or, int m1k, int m2k, int m3k,
         :	                  void *os, int m1j, int m2j, int m3j, int k)
         :	{
    0.00 :	  406620:       push   %r15
    0.00 :	  406622:       movslq %esi,%rax
    0.00 :	  406625:       movslq %edx,%rdx
    0.00 :	  406628:       push   %r14
         :	  double (*r)[m2k][m1k] = (double (*)[m2k][m1k])or;
    0.00 :	  40662a:       lea    0x0(,%rax,8),%rsi
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void rprj3(void *or, int m1k, int m2k, int m3k,
         :	                  void *os, int m1j, int m2j, int m3j, int k)
         :	{
    0.00 :	  406632:       push   %r13
    0.00 :	  406634:       push   %r12
    0.00 :	  406636:       mov    %rax,%r12
    0.00 :	  406639:       push   %rbp
    0.00 :	  40663a:       mov    %rdx,%rbp
         :	  double (*r)[m2k][m1k] = (double (*)[m2k][m1k])or;
    0.00 :	  40663d:       imul   %rax,%rdx
         :	  double (*s)[m2j][m1j] = (double (*)[m2j][m1j])os;
    0.00 :	  406641:       movslq %r9d,%rax
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void rprj3(void *or, int m1k, int m2k, int m3k,
         :	                  void *os, int m1j, int m2j, int m3j, int k)
         :	{
    0.00 :	  406644:       push   %rbx
    0.00 :	  406645:       mov    %ecx,%ebx
    0.00 :	  406647:       sub    $0x1288,%rsp
         :	  double (*r)[m2k][m1k] = (double (*)[m2k][m1k])or;
    0.00 :	  40664e:       mov    %rdx,0x1b8(%rsp)
         :	  double (*s)[m2j][m1j] = (double (*)[m2j][m1j])os;
    0.00 :	  406656:       movslq 0x12c0(%rsp),%rdx
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void rprj3(void *or, int m1k, int m2k, int m3k,
         :	                  void *os, int m1j, int m2j, int m3j, int k)
         :	{
         :	  double (*r)[m2k][m1k] = (double (*)[m2k][m1k])or;
    0.00 :	  40665e:       mov    %rsi,0xd0(%rsp)
         :	  double (*s)[m2j][m1j] = (double (*)[m2j][m1j])os;
    0.00 :	  406666:       lea    0x0(,%rax,8),%rsi
    0.00 :	  40666e:       imul   %rax,%rdx
         :
         :	  int j3, j2, j1, i3, i2, i1, d1, d2, d3, j;
         :
         :	  double x1[M], y1[M], x2, y2;
         :
         :	  if (timeron) timer_start(T_rprj3);
    0.00 :	  406672:       mov    0x1c505f28(%rip),%eax        # 1c90c5a0 <timeron>
         :	// Note that this vectorizes, and is also fine for cache
         :	// based machines.
         :	//---------------------------------------------------------------------
         :	static void rprj3(void *or, int m1k, int m2k, int m3k,
         :	                  void *os, int m1j, int m2j, int m3j, int k)
         :	{
    0.00 :	  406678:       mov    %rdi,(%rsp)
    0.00 :	  40667c:       mov    %r8,0x218(%rsp)
    0.00 :	  406684:       mov    %r9d,0xdc(%rsp)
         :	  double (*r)[m2k][m1k] = (double (*)[m2k][m1k])or;
         :	  double (*s)[m2j][m1j] = (double (*)[m2j][m1j])os;
    0.00 :	  40668c:       mov    %rsi,0xe0(%rsp)
    0.00 :	  406694:       mov    %rdx,0x220(%rsp)
         :
         :	  int j3, j2, j1, i3, i2, i1, d1, d2, d3, j;
         :
         :	  double x1[M], y1[M], x2, y2;
         :
         :	  if (timeron) timer_start(T_rprj3);
    0.00 :	  40669c:       mov    %eax,0x22c(%rsp)
    0.00 :	  4066a3:       test   %eax,%eax
    0.00 :	  4066a5:       jne    4075b3 <rprj3+0xf93>
         :	  if (m1k == 3) {
         :	    d1 = 2;
         :	  } else {
         :	    d1 = 1;
    0.00 :	  4066ab:       xor    %eax,%eax
    0.00 :	  4066ad:       cmp    $0x3,%r12d
    0.00 :	  4066b1:       sete   %al
    0.00 :	  4066b4:       add    $0x1,%eax
    0.00 :	  4066b7:       mov    %eax,0x1a4(%rsp)
         :	  }
         :
         :	  if (m2k == 3) {
         :	    d2 = 2;
         :	  } else {
         :	    d2 = 1;
    0.00 :	  4066be:       xor    %eax,%eax
    0.00 :	  4066c0:       cmp    $0x3,%ebp
    0.00 :	  4066c3:       sete   %al
         :	  }
         :
         :	  if (m3k == 3) {
         :	    d3 = 2;
         :	  } else {
         :	    d3 = 1;
    0.00 :	  4066c6:       xor    %ecx,%ecx
         :	  }
         :
         :	  if (m2k == 3) {
         :	    d2 = 2;
         :	  } else {
         :	    d2 = 1;
    0.00 :	  4066c8:       add    $0x1,%eax
         :	  }
         :
         :	  if (m3k == 3) {
         :	    d3 = 2;
         :	  } else {
         :	    d3 = 1;
    0.00 :	  4066cb:       cmp    $0x3,%ebx
    0.00 :	  4066ce:       sete   %cl
         :	  }
         :
         :	  if (m2k == 3) {
         :	    d2 = 2;
         :	  } else {
         :	    d2 = 1;
    0.00 :	  4066d1:       mov    %eax,0xd8(%rsp)
         :	  }
         :
         :	  if (m3k == 3) {
         :	    d3 = 2;
         :	  } else {
         :	    d3 = 1;
    0.00 :	  4066d8:       add    $0x1,%ecx
         :	  }
         :
         :	  for (j3 = 1; j3 < m3j-1; j3++) {
    0.00 :	  4066db:       cmpl   $0x2,0x12c8(%rsp)
    0.00 :	  4066e3:       jle    407352 <rprj3+0xd32>
         :	    for (j2 = 1; j2 < m2j-1; j2++) {
         :	      i2 = 2*j2-d2;
         :
         :	      for (j1 = 1; j1 < m1j; j1++) {
         :	        i1 = 2*j1-d1;
         :	        x1[i1] = r[i3+1][i2  ][i1] + r[i3+1][i2+2][i1]
    0.00 :	  4066e9:       mov    0xd0(%rsp),%rsi
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
    0.00 :	  4066f1:       mov    0xdc(%rsp),%r10d
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.00 :	  4066f9:       mov    0xe0(%rsp),%rbp
         :	    for (j2 = 1; j2 < m2j-1; j2++) {
         :	      i2 = 2*j2-d2;
         :
         :	      for (j1 = 1; j1 < m1j; j1++) {
         :	        i1 = 2*j1-d1;
         :	        x1[i1] = r[i3+1][i2  ][i1] + r[i3+1][i2+2][i1]
    0.00 :	  406701:       shr    $0x3,%rsi
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
    0.00 :	  406705:       lea    -0x1(%r10),%eax
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.00 :	  406709:       shr    $0x3,%rbp
    0.00 :	  40670d:       cmpl   $0x2,0x12c0(%rsp)
         :	    for (j2 = 1; j2 < m2j-1; j2++) {
         :	      i2 = 2*j2-d2;
         :
         :	      for (j1 = 1; j1 < m1j; j1++) {
         :	        i1 = 2*j1-d1;
         :	        x1[i1] = r[i3+1][i2  ][i1] + r[i3+1][i2+2][i1]
    0.00 :	  406715:       mov    %rsi,0xa8(%rsp)
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
    0.00 :	  40671d:       mov    %eax,0xa0(%rsp)
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.00 :	  406724:       mov    %rbp,0x148(%rsp)
    0.00 :	  40672c:       jle    407352 <rprj3+0xd32>
    0.00 :	  406732:       mov    $0x4,%edi
    0.00 :	  406737:       mov    0x1b8(%rsp),%rbx
    0.00 :	  40673f:       lea    -0x3(%r10),%r11d
    0.00 :	  406743:       mov    $0x2,%r9d
    0.00 :	  406749:       mov    %edi,%eax
    0.00 :	  40674b:       movslq 0x1a4(%rsp),%r15
    0.00 :	  406753:       mov    %r11d,0x11c(%rsp)
    0.00 :	  40675b:       sub    %ecx,%eax
    0.00 :	  40675d:       lea    (%rbx,%rbx,1),%r14
    0.00 :	  406761:       mov    %eax,0x1a0(%rsp)
    0.00 :	  406768:       mov    %rbx,%rax
    0.00 :	  40676b:       shl    $0x4,%rax
    0.00 :	  40676f:       mov    %r14,0x1e0(%rsp)
    0.00 :	  406777:       mov    %r9,%r14
    0.00 :	  40677a:       mov    %rax,0x1d8(%rsp)
    0.00 :	  406782:       movslq %ecx,%rax
    0.00 :	  406785:       sub    %rax,%r14
    0.00 :	  406788:       mov    %rax,%rdx
    0.00 :	  40678b:       mov    %r15,0x98(%rsp)
    0.00 :	  406793:       mov    %r14,%rax
    0.00 :	  406796:       neg    %rdx
    0.00 :	  406799:       imul   %rbx,%rax
    0.00 :	  40679d:       lea    0x10(,%rdx,8),%rdx
    0.00 :	  4067a5:       imul   %rbx,%rdx
    0.00 :	  4067a9:       add    (%rsp),%rdx
    0.00 :	  4067ad:       mov    %rax,0x190(%rsp)
    0.00 :	  4067b5:       mov    0x220(%rsp),%rax
    0.00 :	  4067bd:       lea    0x0(,%rax,8),%rbx
    0.00 :	  4067c5:       lea    0x1(%rax,%rbp,1),%rax
    0.00 :	  4067ca:       mov    %rbx,0x1e8(%rsp)
    0.00 :	  4067d2:       mov    0x218(%rsp),%rbx
    0.00 :	  4067da:       lea    (%rbx,%rax,8),%rax
    0.00 :	  4067de:       mov    %rsi,%rbx
    0.00 :	  4067e1:       shl    $0x4,%rsi
    0.00 :	  4067e5:       mov    %rax,0x198(%rsp)
    0.00 :	  4067ed:       mov    0x12c8(%rsp),%eax
    0.00 :	  4067f4:       mov    %rsi,0xe8(%rsp)
    0.00 :	  4067fc:       movslq 0xd8(%rsp),%rsi
    0.00 :	  406804:       add    %eax,%eax
    0.00 :	  406806:       sub    %ecx,%eax
    0.00 :	  406808:       mov    %eax,0x228(%rsp)
    0.00 :	  40680f:       mov    $0x3,%eax
    0.00 :	  406814:       mov    %eax,%r8d
    0.00 :	  406817:       mov    %r9,%rax
    0.00 :	  40681a:       sub    %rsi,%rax
    0.00 :	  40681d:       sub    %r15d,%r8d
    0.00 :	  406820:       imul   %rbx,%rax
    0.00 :	  406824:       lea    (%r8,%rax,1),%rcx
    0.00 :	  406828:       sub    %r15,%rax
    0.00 :	  40682b:       mov    %rax,%r9
    0.00 :	  40682e:       mov    %r15,%rax
    0.00 :	  406831:       shl    $0x3,%rcx
    0.00 :	  406835:       neg    %rax
    0.00 :	  406838:       mov    %rcx,0x1d0(%rsp)
    0.00 :	  406840:       lea    0x0(,%rax,8),%rcx
    0.00 :	  406848:       mov    %rsi,%rax
    0.00 :	  40684b:       neg    %rax
    0.00 :	  40684e:       lea    0x10(,%rax,8),%rax
    0.00 :	  406856:       imul   %rbx,%rax
    0.00 :	  40685a:       mov    %r15d,%ebx
    0.00 :	  40685d:       mov    %rax,%r12
    0.00 :	  406860:       mov    %rax,0x1f0(%rsp)
    0.00 :	  406868:       lea    -0x2(%r10),%eax
    0.00 :	  40686c:       lea    0x0(,%rax,8),%rsi
    0.00 :	  406874:       lea    (%rax,%rax,1),%r14
    0.00 :	  406878:       shl    $0x4,%rax
    0.00 :	  40687c:       mov    %rsi,0x1f8(%rsp)
    0.00 :	  406884:       mov    $0x2,%esi
    0.00 :	  406889:       sub    %r15d,%esi
    0.00 :	  40688c:       mov    %rax,0x130(%rsp)
    0.00 :	  406894:       lea    0x240(%rsp),%rax
    0.00 :	  40689c:       lea    0x0(,%rsi,8),%r13
    0.00 :	  4068a4:       lea    0x2(%rsi,%r14,1),%rsi
    0.00 :	  4068a9:       mov    %r14,0x1c8(%rsp)
    0.00 :	  4068b1:       shl    $0x3,%rsi
    0.00 :	  4068b5:       lea    0x240(%rsp),%r14
    0.00 :	  4068bd:       mov    %r13,0x120(%rsp)
    0.00 :	  4068c5:       mov    %rsi,0x128(%rsp)
    0.00 :	  4068cd:       lea    0x10(%rcx),%rsi
    0.00 :	  4068d1:       add    %rsi,%rax
    0.00 :	  4068d4:       mov    %rax,0x158(%rsp)
    0.00 :	  4068dc:       lea    0x20(%rcx),%rax
    0.00 :	  4068e0:       add    %rax,%r14
    0.00 :	  4068e3:       mov    %r14,0x20(%rsp)
    0.00 :	  4068e8:       lea    0xa60(%rsp),%r14
    0.00 :	  4068f0:       add    %r14,%rax
    0.00 :	  4068f3:       add    %r14,%rsi
    0.00 :	  4068f6:       mov    %rax,0x168(%rsp)
    0.00 :	  4068fe:       mov    %r14,%rax
    0.00 :	  406901:       mov    %r15,%r14
    0.00 :	  406904:       add    %rcx,%rax
    0.00 :	  406907:       mov    %rsi,0x160(%rsp)
    0.00 :	  40690f:       mov    %r11d,%esi
    0.00 :	  406912:       shr    %r11d
    0.00 :	  406915:       mov    %rax,0x110(%rsp)
    0.00 :	  40691d:       lea    0x240(%rsp),%rax
    0.00 :	  406925:       add    %rcx,%rax
    0.00 :	  406928:       mov    %rax,0x108(%rsp)
    0.00 :	  406930:       mov    %r11d,%eax
    0.00 :	  406933:       mov    %esi,%r11d
    0.00 :	  406936:       and    $0xfffffffe,%esi
    0.00 :	  406939:       shl    $0x4,%rax
    0.00 :	  40693d:       lea    (%rsi,%rsi,1),%r10d
    0.00 :	  406941:       mov    %rax,0x28(%rsp)
    0.00 :	  406946:       lea    0x1(%rsi),%eax
    0.00 :	  406949:       mov    %eax,0x154(%rsp)
    0.00 :	  406950:       movslq %r10d,%rax
    0.00 :	  406953:       sub    %r15,%rax
    0.00 :	  406956:       lea    0xa60(%rsp),%r15
    0.00 :	  40695e:       shl    $0x3,%rax
    0.00 :	  406962:       add    %rax,%r15
    0.00 :	  406965:       mov    %r15,0x138(%rsp)
    0.00 :	  40696d:       lea    0x240(%rsp),%r15
    0.00 :	  406975:       movapd 0x3f13(%rip),%xmm2        # 40a890 <_IO_stdin_used+0x520>
    0.00 :	  40697d:       add    %r15,%rax
    0.00 :	  406980:       mov    %rdx,0x40(%rsp)
    0.00 :	  406985:       mov    %rax,0x140(%rsp)
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
    0.00 :	  40698d:       lea    0x2(%r10),%eax
    0.00 :	  406991:       sub    %ebx,%eax
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.00 :	  406993:       lea    0x1(%rax),%r15d
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
    0.00 :	  406997:       mov    %eax,0x178(%rsp)
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  40699e:       add    $0x2,%eax
    0.00 :	  4069a1:       mov    %eax,0x170(%rsp)
    0.00 :	  4069a8:       mov    %edi,%eax
    0.00 :	  4069aa:       sub    %ebx,%eax
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.00 :	  4069ac:       mov    %r15d,0x150(%rsp)
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
    0.00 :	  4069b4:       lea    0x2(%rsi),%r15d
    0.00 :	  4069b8:       lea    0x0(,%rax,8),%rsi
    0.00 :	  4069c0:       mov    %r15d,0x174(%rsp)
    0.00 :	  4069c8:       mov    %rsi,0x1a8(%rsp)
    0.00 :	  4069d0:       mov    %r11d,%esi
    0.00 :	  4069d3:       lea    0x2(%rax,%rsi,2),%rax
    0.00 :	  4069d8:       shl    $0x3,%rax
    0.00 :	  4069dc:       mov    %rax,0x1b0(%rsp)
    0.00 :	  4069e4:       mov    %r8,%rax
    0.00 :	  4069e7:       neg    %rax
    0.00 :	  4069ea:       lea    0x0(%r13,%rax,8),%rax
    0.00 :	  4069ef:       mov    %rax,0x1c0(%rsp)
    0.00 :	  4069f7:       lea    0x18(%r12,%rcx,1),%rax
    0.00 :	  4069fc:       mov    %rax,0x208(%rsp)
    0.00 :	  406a04:       lea    0x3(%r9),%rax
    0.00 :	  406a08:       mov    %rax,0x210(%rsp)
    0.00 :	  406a10:       mov    0x12c0(%rsp),%eax
    0.00 :	  406a17:       sub    $0x1,%eax
    0.00 :	  406a1a:       mov    %eax,0x118(%rsp)
    0.00 :	  406a21:       mov    %rbp,%rax
    0.00 :	  406a24:       not    %rax
    0.00 :	  406a27:       shl    $0x3,%rax
    0.00 :	  406a2b:       mov    %rax,0x200(%rsp)
    0.00 :	  406a33:       mov    $0x3,%eax
    0.00 :	  406a38:       sub    %r14,%rax
    0.00 :	  406a3b:       mov    %rax,0xf0(%rsp)
         :	        i1 = 2*j1-d1;
    0.00 :	  406a43:       lea    (%r15,%r15,1),%eax
    0.00 :	  406a47:       sub    %ebx,%eax
    0.00 :	  406a49:       mov    %eax,0x17c(%rsp)
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.00 :	  406a50:       add    $0x1,%eax
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  406a53:       cltq   
    0.00 :	  406a55:       mov    %rax,0x180(%rsp)
    0.00 :	  406a5d:       nopl   (%rax)
         :	    for (j2 = 1; j2 < m2j-1; j2++) {
         :	      i2 = 2*j2-d2;
         :
         :	      for (j1 = 1; j1 < m1j; j1++) {
         :	        i1 = 2*j1-d1;
         :	        x1[i1] = r[i3+1][i2  ][i1] + r[i3+1][i2+2][i1]
    0.00 :	  406a60:       mov    0x1a0(%rsp),%edi
    0.00 :	  406a67:       mov    0x1b8(%rsp),%rbx
         :	    d3 = 1;
         :	  }
         :
         :	  for (j3 = 1; j3 < m3j-1; j3++) {
         :	    i3 = 2*j3-d3;
         :	    for (j2 = 1; j2 < m2j-1; j2++) {
    0.00 :	  406a6f:       movl   $0x1,0x1c(%rsp)
         :	      i2 = 2*j2-d2;
         :
         :	      for (j1 = 1; j1 < m1j; j1++) {
         :	        i1 = 2*j1-d1;
         :	        x1[i1] = r[i3+1][i2  ][i1] + r[i3+1][i2+2][i1]
    0.00 :	  406a77:       mov    (%rsp),%rcx
    0.00 :	  406a7b:       mov    0x210(%rsp),%r15
    0.00 :	  406a83:       lea    -0x1(%rdi),%eax
    0.00 :	  406a86:       mov    0x208(%rsp),%r12
    0.00 :	  406a8e:       cltq   
    0.00 :	  406a90:       imul   %rbx,%rax
    0.00 :	  406a94:       lea    (%rcx,%rax,8),%rdx
    0.00 :	  406a98:       mov    %rax,%rsi
    0.00 :	  406a9b:       mov    %rax,0x50(%rsp)
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
    0.00 :	  406aa0:       movslq %edi,%rax
    0.00 :	  406aa3:       imul   %rbx,%rax
    0.00 :	  406aa7:       mov    0x198(%rsp),%rdi
    0.00 :	  406aaf:       mov    %rdx,%r13
    0.00 :	  406ab2:       mov    0x200(%rsp),%rbx
         :	    for (j2 = 1; j2 < m2j-1; j2++) {
         :	      i2 = 2*j2-d2;
         :
         :	      for (j1 = 1; j1 < m1j; j1++) {
         :	        i1 = 2*j1-d1;
         :	        x1[i1] = r[i3+1][i2  ][i1] + r[i3+1][i2+2][i1]
    0.00 :	  406aba:       mov    %rdx,0x70(%rsp)
    0.00 :	  406abf:       add    0x1c0(%rsp),%rdx
    0.00 :	  406ac7:       add    %rdi,%rbx
    0.00 :	  406aca:       mov    %rdx,0x188(%rsp)
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
    0.00 :	  406ad2:       lea    (%rcx,%rax,8),%r8
    0.00 :	  406ad6:       mov    %rax,0xf8(%rsp)
    0.00 :	  406ade:       add    %r15,%rax
    0.00 :	  406ae1:       lea    (%rcx,%rax,8),%r14
    0.00 :	  406ae5:       mov    %rsi,%rax
    0.00 :	  406ae8:       mov    %r8,0x48(%rsp)
    0.00 :	  406aed:       mov    0x190(%rsp),%rsi
    0.00 :	  406af5:       add    %r15,%rax
    0.00 :	  406af8:       mov    %rbx,0xb8(%rsp)
    0.00 :	  406b00:       mov    0xd8(%rsp),%ebx
    0.00 :	  406b07:       lea    (%rcx,%rax,8),%r15
    0.00 :	  406b0b:       mov    0x1f8(%rsp),%rax
    0.00 :	  406b13:       mov    %rdi,0x8(%rsp)
    0.00 :	  406b18:       neg    %ebx
    0.00 :	  406b1a:       mov    %rdi,0xc0(%rsp)
    0.00 :	  406b22:       add    %rdi,%rax
    0.00 :	  406b25:       mov    %ebx,0x88(%rsp)
    0.00 :	  406b2c:       mov    0x40(%rsp),%rbx
    0.00 :	  406b31:       mov    %rax,0x30(%rsp)
    0.00 :	  406b36:       mov    0x1f0(%rsp),%rax
    0.00 :	  406b3e:       add    %rbx,%r12
    0.00 :	  406b41:       add    %rax,%r8
    0.00 :	  406b44:       add    %rax,%rbx
    0.00 :	  406b47:       add    %rax,%r13
    0.00 :	  406b4a:       mov    0x1d0(%rsp),%rax
    0.00 :	  406b52:       mov    %r8,0x68(%rsp)
    0.00 :	  406b57:       mov    %rax,0xc8(%rsp)
    0.00 :	  406b5f:       mov    0xf0(%rsp),%rax
    0.00 :	  406b67:       add    %rsi,%rax
    0.00 :	  406b6a:       mov    %rax,0x100(%rsp)
    0.00 :	  406b72:       mov    0x1c8(%rsp),%rax
    0.00 :	  406b7a:       add    $0x3,%rax
    0.00 :	  406b7e:       sub    0x98(%rsp),%rax
    0.00 :	  406b86:       mov    %rax,0x78(%rsp)
    0.00 :	  406b8b:       add    %rsi,%rax
    0.00 :	  406b8e:       mov    %rax,0x80(%rsp)
    0.00 :	  406b96:       mov    %rbx,0x38(%rsp)
    0.00 :	  406b9b:       nopl   0x0(%rax,%rax,1)
         :	  }
         :
         :	  for (j3 = 1; j3 < m3j-1; j3++) {
         :	    i3 = 2*j3-d3;
         :	    for (j2 = 1; j2 < m2j-1; j2++) {
         :	      i2 = 2*j2-d2;
    0.00 :	  406ba0:       mov    0x1c(%rsp),%eax
    0.00 :	  406ba4:       add    %eax,%eax
    0.00 :	  406ba6:       sub    0xd8(%rsp),%eax
         :
         :	      for (j1 = 1; j1 < m1j; j1++) {
    0.00 :	  406bad:       cmpl   $0x1,0xdc(%rsp)
    0.04 :	  406bb5:       mov    %eax,0xa4(%rsp)
    0.00 :	  406bbc:       jle    406c6c <rprj3+0x64c>
    0.00 :	  406bc2:       mov    0x88(%rsp),%eax
    0.00 :	  406bc9:       mov    0xd0(%rsp),%rsi
    0.00 :	  406bd1:       mov    0x48(%rsp),%rbx
    0.00 :	  406bd6:       mov    0x70(%rsp),%rdi
    0.00 :	  406bdb:       lea    0x4(%rax),%edx
    0.00 :	  406bde:       lea    0x3(%rax),%ecx
    0.00 :	  406be1:       mov    0x40(%rsp),%rax
    0.00 :	  406be6:       mov    0x128(%rsp),%r9
    0.00 :	  406bee:       movslq %edx,%rdx
    0.00 :	  406bf1:       movslq %ecx,%rcx
    0.00 :	  406bf4:       mov    0x68(%rsp),%r10
    0.00 :	  406bf9:       imul   %rsi,%rdx
    0.00 :	  406bfd:       imul   %rsi,%rcx
    0.00 :	  406c01:       lea    (%rdi,%rdx,1),%r8
    0.04 :	  406c05:       lea    (%rax,%rdx,1),%rsi
    0.00 :	  406c09:       add    %rbx,%rdx
    0.00 :	  406c0c:       lea    (%rax,%rcx,1),%rdi
    0.00 :	  406c10:       add    %rbx,%rcx
    0.04 :	  406c13:       mov    0x120(%rsp),%rax
    0.00 :	  406c1b:       mov    0x38(%rsp),%rbx
         :	        i1 = 2*j1-d1;
         :	        x1[i1] = r[i3+1][i2  ][i1] + r[i3+1][i2+2][i1]
    1.41 :	  406c20:       movsd  0x0(%r13,%rax,1),%xmm0
    0.63 :	  406c27:       addsd  (%r8,%rax,1),%xmm0
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
   13.93 :	  406c2d:       addsd  (%rdi,%rax,1),%xmm0
    2.04 :	  406c32:       addsd  (%rcx,%rax,1),%xmm0
         :	    for (j2 = 1; j2 < m2j-1; j2++) {
         :	      i2 = 2*j2-d2;
         :
         :	      for (j1 = 1; j1 < m1j; j1++) {
         :	        i1 = 2*j1-d1;
         :	        x1[i1] = r[i3+1][i2  ][i1] + r[i3+1][i2+2][i1]
   20.92 :	  406c37:       movsd  %xmm0,0x240(%rsp,%rax,1)
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
    0.39 :	  406c40:       movsd  (%rbx,%rax,1),%xmm0
    0.31 :	  406c45:       addsd  (%r10,%rax,1),%xmm0
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
    0.98 :	  406c4b:       addsd  (%rsi,%rax,1),%xmm0
    2.20 :	  406c50:       addsd  (%rdx,%rax,1),%xmm0
         :
         :	      for (j1 = 1; j1 < m1j; j1++) {
         :	        i1 = 2*j1-d1;
         :	        x1[i1] = r[i3+1][i2  ][i1] + r[i3+1][i2+2][i1]
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
   13.58 :	  406c55:       movsd  %xmm0,0xa60(%rsp,%rax,1)
    0.31 :	  406c5e:       add    $0x10,%rax
         :	  for (j3 = 1; j3 < m3j-1; j3++) {
         :	    i3 = 2*j3-d3;
         :	    for (j2 = 1; j2 < m2j-1; j2++) {
         :	      i2 = 2*j2-d2;
         :
         :	      for (j1 = 1; j1 < m1j; j1++) {
    0.00 :	  406c62:       cmp    %r9,%rax
    0.59 :	  406c65:       jne    406c20 <rprj3+0x600>
    0.00 :	  406c67:       mov    %rbx,0x38(%rsp)
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
    0.20 :	  406c6c:       cmpl   $0x1,0xa0(%rsp)
    0.00 :	  406c74:       jle    4072ab <rprj3+0xc8b>
    0.00 :	  406c7a:       mov    0x88(%rsp),%eax
    0.00 :	  406c81:       mov    0xa8(%rsp),%rbx
    0.00 :	  406c89:       mov    0x100(%rsp),%r8
    0.00 :	  406c91:       mov    (%rsp),%r11
    0.00 :	  406c95:       lea    0x4(%rax),%esi
    0.00 :	  406c98:       lea    0x3(%rax),%ecx
    0.00 :	  406c9b:       mov    0x130(%rsp),%rax
    0.00 :	  406ca3:       mov    0xf0(%rsp),%r10
    0.00 :	  406cab:       movslq %ecx,%rcx
    0.00 :	  406cae:       lea    -0x8(%rax),%rbp
    0.00 :	  406cb2:       movslq %esi,%rax
    0.00 :	  406cb5:       mov    %rcx,0x90(%rsp)
    0.00 :	  406cbd:       mov    %rax,%rdx
    0.00 :	  406cc0:       mov    %rax,0xb0(%rsp)
    0.00 :	  406cc8:       imul   %rbx,%rdx
    0.04 :	  406ccc:       lea    (%r8,%rdx,1),%rax
    0.04 :	  406cd0:       lea    (%r11,%rax,8),%rdi
    0.00 :	  406cd4:       mov    %rbx,%rax
    0.00 :	  406cd7:       mov    0xf8(%rsp),%rbx
    0.00 :	  406cdf:       imul   %rcx,%rax
    0.00 :	  406ce3:       lea    (%rax,%r8,1),%rcx
    0.08 :	  406ce7:       mov    %rbx,%r8
    0.00 :	  406cea:       add    0x78(%rsp),%rbx
    0.00 :	  406cef:       mov    %rbx,0x10(%rsp)
    0.00 :	  406cf4:       mov    0x50(%rsp),%rbx
    0.04 :	  406cf9:       add    %r10,%r8
    0.00 :	  406cfc:       lea    (%r11,%rcx,8),%rsi
    0.00 :	  406d00:       lea    (%rdx,%r8,1),%rcx
    0.00 :	  406d04:       add    %rax,%r8
    0.00 :	  406d07:       mov    %rbx,%r9
    0.00 :	  406d0a:       lea    (%r11,%rcx,8),%rcx
    0.04 :	  406d0e:       lea    (%r11,%r8,8),%r8
    0.00 :	  406d12:       add    %r10,%r9
    0.00 :	  406d15:       add    %rdx,%r9
    0.00 :	  406d18:       lea    (%r11,%r9,8),%r10
    0.00 :	  406d1c:       mov    %rbx,%r9
    0.00 :	  406d1f:       sub    0x98(%rsp),%r9
    0.00 :	  406d27:       add    0x78(%rsp),%rbx
    0.00 :	  406d2c:       lea    0x2(%rax,%r9,1),%r9
    0.00 :	  406d31:       mov    %rbx,0x58(%rsp)
    0.00 :	  406d36:       mov    0x30(%rsp),%rbx
    0.00 :	  406d3b:       lea    (%r11,%r9,8),%r11
    0.00 :	  406d3f:       mov    0x8(%rsp),%r9
    0.00 :	  406d44:       mov    %r11,0x60(%rsp)
    0.00 :	  406d49:       lea    0x0(%rbp,%r14,1),%r11
    0.00 :	  406d4e:       cmp    %r11,%r9
    0.00 :	  406d51:       setae  0x8(%rsp)
    0.04 :	  406d56:       cmp    %r14,%rbx
    0.00 :	  406d59:       setbe  %r11b
    0.00 :	  406d5d:       or     0x8(%rsp),%r11b
    0.00 :	  406d62:       mov    %r11b,0x8(%rsp)
    0.00 :	  406d67:       lea    0x0(%rbp,%r12,1),%r11
    0.00 :	  406d6c:       cmp    %r11,%r9
    0.00 :	  406d6f:       setae  %r11b
    0.00 :	  406d73:       cmp    %rbx,%r12
    0.00 :	  406d76:       setae  0x30(%rsp)
    0.00 :	  406d7b:       or     0x30(%rsp),%r11b
    0.00 :	  406d80:       and    0x8(%rsp),%r11b
    0.04 :	  406d85:       cmpl   $0x1,0x11c(%rsp)
    0.00 :	  406d8d:       mov    %rbx,0x30(%rsp)
    0.00 :	  406d92:       seta   0x8(%rsp)
    0.00 :	  406d97:       add    %r15,%rbp
    0.00 :	  406d9a:       and    0x8(%rsp),%r11b
    0.00 :	  406d9f:       cmp    %rbp,%r9
    0.00 :	  406da2:       mov    %r11b,0x8(%rsp)
    0.00 :	  406da7:       setae  %bpl
    0.00 :	  406dab:       cmp    %r15,%rbx
    0.00 :	  406dae:       mov    0x58(%rsp),%rbx
    0.00 :	  406db3:       setbe  %r11b
    0.00 :	  406db7:       or     %ebp,%r11d
    0.00 :	  406dba:       and    0x8(%rsp),%r11b
    0.04 :	  406dbf:       mov    %r11b,0x8(%rsp)
    0.04 :	  406dc4:       mov    (%rsp),%rbp
    0.00 :	  406dc8:       lea    (%rax,%rbx,1),%r11
    0.00 :	  406dcc:       mov    0x30(%rsp),%rbx
    0.00 :	  406dd1:       lea    0x0(%rbp,%r11,8),%r11
    0.04 :	  406dd6:       cmp    %r11,%r9
    0.00 :	  406dd9:       setae  %bpl
    0.00 :	  406ddd:       cmp    %rbx,0x60(%rsp)
    0.00 :	  406de2:       setae  %r11b
    0.00 :	  406de6:       or     %ebp,%r11d
    0.04 :	  406de9:       mov    0x80(%rsp),%rbp
    0.00 :	  406df1:       and    0x8(%rsp),%r11b
    0.08 :	  406df6:       mov    %r11b,0x8(%rsp)
    0.04 :	  406dfb:       lea    (%rdx,%rbp,1),%r11
    0.00 :	  406dff:       mov    (%rsp),%rbp
    0.00 :	  406e03:       lea    -0x8(%rbp,%r11,8),%r11
    0.00 :	  406e08:       cmp    %r11,%r9
    0.00 :	  406e0b:       setae  %bpl
    0.04 :	  406e0f:       cmp    %rbx,%rdi
    0.00 :	  406e12:       setae  %r11b
    0.00 :	  406e16:       or     %ebp,%r11d
    0.00 :	  406e19:       mov    0x80(%rsp),%rbp
    0.04 :	  406e21:       and    0x8(%rsp),%r11b
    0.04 :	  406e26:       mov    %r11b,0x8(%rsp)
    0.04 :	  406e2b:       lea    (%rax,%rbp,1),%r11
    0.00 :	  406e2f:       mov    (%rsp),%rbp
    0.00 :	  406e33:       lea    -0x8(%rbp,%r11,8),%r11
    0.00 :	  406e38:       cmp    %r11,%r9
    0.08 :	  406e3b:       setae  %bpl
    0.00 :	  406e3f:       cmp    %rbx,%rsi
    0.00 :	  406e42:       setae  %r11b
    0.00 :	  406e46:       or     %ebp,%r11d
    0.08 :	  406e49:       movzbl 0x8(%rsp),%ebp
    0.00 :	  406e4e:       mov    %r9,0x8(%rsp)
    0.04 :	  406e53:       and    %r11d,%ebp
    0.00 :	  406e56:       mov    0x10(%rsp),%r11
    0.00 :	  406e5b:       mov    %bpl,0x8f(%rsp)
    0.04 :	  406e63:       mov    (%rsp),%rbp
    0.00 :	  406e67:       add    %rdx,%r11
    0.00 :	  406e6a:       lea    -0x8(%rbp,%r11,8),%r11
    0.00 :	  406e6f:       cmp    %r11,%r9
    0.00 :	  406e72:       mov    (%rsp),%r9
    0.00 :	  406e76:       setae  %bpl
    0.04 :	  406e7a:       cmp    %rbx,%rcx
    0.00 :	  406e7d:       setae  %r11b
    0.00 :	  406e81:       or     %ebp,%r11d
    0.00 :	  406e84:       mov    0x10(%rsp),%rbp
    0.00 :	  406e89:       and    0x8f(%rsp),%r11b
    0.00 :	  406e91:       add    %rax,%rbp
    0.00 :	  406e94:       lea    -0x8(%r9,%rbp,8),%rbp
    0.00 :	  406e99:       cmp    %rbp,0x8(%rsp)
    0.00 :	  406e9e:       setae  %bpl
    0.00 :	  406ea2:       cmp    %rbx,%r8
    0.00 :	  406ea5:       setae  0x10(%rsp)
    0.00 :	  406eaa:       movzbl 0x10(%rsp),%r9d
    0.04 :	  406eb0:       or     %r9d,%ebp
    0.00 :	  406eb3:       test   %bpl,%r11b
    0.08 :	  406eb6:       je     407440 <rprj3+0xe20>
    0.00 :	  406ebc:       mov    0x58(%rsp),%r11
    0.00 :	  406ec1:       mov    (%rsp),%r9
    0.00 :	  406ec5:       add    %rdx,%r11
    0.00 :	  406ec8:       lea    -0x8(%r9,%r11,8),%r11
    0.04 :	  406ecd:       cmp    %r11,0x8(%rsp)
    0.00 :	  406ed2:       setae  %bpl
    0.00 :	  406ed6:       cmp    %rbx,%r10
    0.00 :	  406ed9:       setae  %r11b
    0.00 :	  406edd:       or     %r11b,%bpl
    0.00 :	  406ee0:       je     407440 <rprj3+0xe20>
    0.00 :	  406ee6:       mov    0x50(%rsp),%rdx
    0.00 :	  406eeb:       mov    %r13,0x58(%rsp)
    0.00 :	  406ef0:       sub    0x98(%rsp),%rdx
    0.00 :	  406ef8:       mov    0x168(%rsp),%rbx
    0.08 :	  406f00:       lea    0x4(%rax,%rdx,1),%rax
    0.00 :	  406f05:       movapd 0x39a3(%rip),%xmm7        # 40a8b0 <_IO_stdin_used+0x540>
    0.12 :	  406f0d:       movapd 0x398a(%rip),%xmm8        # 40a8a0 <_IO_stdin_used+0x530>
    0.00 :	  406f16:       lea    (%r9,%rax,8),%rdx
    0.04 :	  406f1a:       mov    0x108(%rsp),%rax
    0.00 :	  406f22:       mov    %rbx,0x10(%rsp)
    0.04 :	  406f27:       movapd 0x3991(%rip),%xmm6        # 40a8c0 <_IO_stdin_used+0x550>
    0.00 :	  406f2f:       mov    0x60(%rsp),%r9
    0.00 :	  406f34:       movupd 0x10(%rax),%xmm9
    0.08 :	  406f3a:       mov    0x110(%rsp),%rax
    0.00 :	  406f42:       mov    0x158(%rsp),%r11
    0.00 :	  406f4a:       mov    0x8(%rsp),%r13
    0.00 :	  406f4f:       mov    0x160(%rsp),%rbx
    0.00 :	  406f57:       movupd 0x10(%rax),%xmm3
    0.04 :	  406f5c:       xor    %eax,%eax
    0.00 :	  406f5e:       xchg   %ax,%ax
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.67 :	  406f60:       movupd (%r15,%rax,2),%xmm1
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.78 :	  406f66:       mov    0x20(%rsp),%rbp
    0.08 :	  406f6b:       movhpd 0x10(%r11,%rax,2),%xmm9
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.08 :	  406f72:       movhpd 0x10(%rbx,%rax,2),%xmm3
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.51 :	  406f78:       movupd (%r10,%rax,2),%xmm0
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
    0.47 :	  406f7e:       movupd (%r9,%rax,2),%xmm10
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.47 :	  406f84:       movhpd 0x10(%r15,%rax,2),%xmm1
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  406f8b:       movupd 0x10(%rbp,%rax,2),%xmm4
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.67 :	  406f91:       mov    0x10(%rsp),%rbp
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.47 :	  406f96:       movhpd 0x10(%r10,%rax,2),%xmm0
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
    0.08 :	  406f9d:       movhpd 0x10(%r9,%rax,2),%xmm10
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.75 :	  406fa4:       addpd  %xmm0,%xmm1
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
    0.04 :	  406fa8:       movupd (%rsi,%rax,2),%xmm0
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    1.14 :	  406fad:       movupd 0x10(%rbp,%rax,2),%xmm5
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
    1.06 :	  406fb3:       movhpd 0x10(%rsi,%rax,2),%xmm0
    0.04 :	  406fb9:       addpd  %xmm0,%xmm1
    0.55 :	  406fbd:       movupd (%r8,%rax,2),%xmm0
    0.59 :	  406fc3:       movhpd 0x10(%r8,%rax,2),%xmm0
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  406fca:       addpd  %xmm0,%xmm1
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.20 :	  406fce:       movupd (%rdx,%rax,2),%xmm0
    6.24 :	  406fd3:       movhpd 0x10(%rdx,%rax,2),%xmm0
    0.55 :	  406fd9:       addpd  %xmm10,%xmm0
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.51 :	  406fde:       movupd (%r14,%rax,2),%xmm10
    0.67 :	  406fe4:       movhpd 0x10(%r14,%rax,2),%xmm10
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.63 :	  406feb:       addpd  %xmm0,%xmm1
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
    0.75 :	  406fef:       movupd 0x10(%r9,%rax,2),%xmm0
    0.59 :	  406ff6:       movlpd 0x8(%r9,%rax,2),%xmm0
    0.20 :	  406ffd:       mulpd  %xmm8,%xmm0
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    2.08 :	  407002:       mulpd  %xmm2,%xmm1
    0.86 :	  407006:       addpd  %xmm0,%xmm1
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    1.92 :	  40700a:       movupd (%r12,%rax,2),%xmm0
    0.82 :	  407010:       movhpd 0x10(%r12,%rax,2),%xmm0
    0.04 :	  407017:       addpd  %xmm10,%xmm0
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
    0.04 :	  40701c:       movupd (%rdi,%rax,2),%xmm10
    0.67 :	  407022:       movhpd 0x10(%rdi,%rax,2),%xmm10
    0.55 :	  407029:       addpd  %xmm10,%xmm0
    0.08 :	  40702e:       movupd (%rcx,%rax,2),%xmm10
    0.51 :	  407034:       movhpd 0x10(%rcx,%rax,2),%xmm10
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.31 :	  40703b:       addpd  %xmm10,%xmm0
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.24 :	  407040:       movupd 0x10(%r11,%rax,2),%xmm10
    0.59 :	  407047:       unpcklpd %xmm4,%xmm10
    0.00 :	  40704c:       addpd  %xmm9,%xmm10
    0.08 :	  407051:       movapd %xmm4,%xmm9
    0.78 :	  407056:       addpd  %xmm10,%xmm0
    1.45 :	  40705b:       mulpd  %xmm7,%xmm0
    3.06 :	  40705f:       addpd  %xmm1,%xmm0
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    2.08 :	  407063:       movupd 0x10(%rbx,%rax,2),%xmm1
    0.59 :	  407069:       unpcklpd %xmm5,%xmm1
    0.00 :	  40706d:       addpd  %xmm1,%xmm3
    0.00 :	  407071:       mulpd  %xmm6,%xmm3
    0.00 :	  407075:       addpd  %xmm3,%xmm0
    1.33 :	  407079:       movapd %xmm5,%xmm3
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.04 :	  40707d:       movups %xmm0,0x0(%r13,%rax,1)
    1.92 :	  407083:       add    $0x10,%rax
    0.00 :	  407087:       cmp    0x28(%rsp),%rax
    0.98 :	  40708c:       jne    406f60 <rprj3+0x940>
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  407092:       mov    0xa8(%rsp),%r11
    0.00 :	  40709a:       movslq 0xa4(%rsp),%rax
    0.00 :	  4070a2:       mov    0xb0(%rsp),%rsi
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
    0.04 :	  4070aa:       mov    0x90(%rsp),%rcx
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  4070b2:       imul   %r11,%rax
    0.00 :	  4070b6:       movslq 0x150(%rsp),%rdx
    0.00 :	  4070be:       mov    0x70(%rsp),%rbx
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
    0.00 :	  4070c3:       imul   %r11,%rcx
         :	        s[j3][j2][j1] =
    0.00 :	  4070c7:       movslq 0x1c(%rsp),%r8
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  4070cc:       movslq 0x170(%rsp),%rdi
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  4070d4:       imul   %r11,%rsi
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
    0.00 :	  4070d8:       mov    0x40(%rsp),%r11
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  4070dd:       movsd  0x386a(%rip),%xmm9        # 40a950 <_IO_stdin_used+0x5e0>
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  4070e6:       lea    (%rdx,%rax,1),%r10
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.00 :	  4070ea:       movslq 0x154(%rsp),%rbp
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  4070f2:       movsd  0x240(%rsp,%rdi,8),%xmm3
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  4070fb:       movsd  (%rbx,%r10,8),%xmm0
    0.00 :	  407101:       mov    0x58(%rsp),%r13
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.00 :	  407106:       movsd  0xa60(%rsp,%rdi,8),%xmm1
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  40710f:       lea    (%rdx,%rsi,1),%r9
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
    0.00 :	  407113:       add    %rcx,%rdx
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  407116:       add    %rcx,%rdi
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  407119:       addsd  (%rbx,%r9,8),%xmm0
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
    0.04 :	  40711f:       addsd  (%r11,%rdx,8),%xmm0
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.16 :	  407125:       mov    0x48(%rsp),%r11
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
    0.00 :	  40712a:       movsd  (%rbx,%rdx,8),%xmm5
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.00 :	  40712f:       imul   0x148(%rsp),%r8
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  407138:       addsd  (%r11,%rdx,8),%xmm0
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  40713e:       movslq 0x178(%rsp),%r11
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  407146:       mov    0x140(%rsp),%rdx
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  40714e:       add    %rcx,%r11
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.00 :	  407151:       add    %r8,%rbp
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  407154:       movsd  (%rbx,%r11,8),%xmm4
    0.00 :	  40715a:       addsd  (%rbx,%rdi,8),%xmm4
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.00 :	  40715f:       mov    0x48(%rsp),%r11
    0.00 :	  407164:       mov    0x40(%rsp),%rdi
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.04 :	  407169:       addsd  %xmm4,%xmm0
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
    0.04 :	  40716d:       movsd  0x37e3(%rip),%xmm4        # 40a958 <_IO_stdin_used+0x5e8>
    0.00 :	  407175:       mulsd  %xmm4,%xmm5
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  407179:       mulsd  %xmm9,%xmm0
    0.08 :	  40717e:       addsd  %xmm5,%xmm0
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.04 :	  407182:       movsd  (%rdi,%r10,8),%xmm5
    0.00 :	  407188:       addsd  (%r11,%r10,8),%xmm5
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
    0.00 :	  40718e:       mov    %rdi,%r10
    0.00 :	  407191:       addsd  (%rdi,%r9,8),%xmm5
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.04 :	  407197:       addsd  (%r11,%r9,8),%xmm5
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  40719d:       movsd  0x10(%rdx),%xmm6
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.00 :	  4071a2:       mov    0x138(%rsp),%rdx
    0.00 :	  4071aa:       movsd  0x37b6(%rip),%xmm7        # 40a968 <_IO_stdin_used+0x5f8>
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
    0.00 :	  4071b2:       movslq 0x174(%rsp),%rdi
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  4071ba:       movsd  0x379d(%rip),%xmm8        # 40a960 <_IO_stdin_used+0x5f0>
    0.00 :	  4071c3:       addsd  %xmm3,%xmm6
    0.04 :	  4071c7:       addsd  %xmm6,%xmm5
    0.00 :	  4071cb:       mulsd  %xmm8,%xmm5
    0.00 :	  4071d0:       addsd  %xmm5,%xmm0
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.04 :	  4071d4:       movsd  0x10(%rdx),%xmm5
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.00 :	  4071d9:       mov    0xb8(%rsp),%rdx
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.00 :	  4071e1:       addsd  %xmm1,%xmm5
    0.00 :	  4071e5:       mulsd  %xmm7,%xmm5
    0.00 :	  4071e9:       addsd  %xmm5,%xmm0
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.00 :	  4071ed:       movsd  %xmm0,(%rdx,%rbp,8)
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
    0.00 :	  4071f2:       cmp    %edi,0xa0(%rsp)
    0.00 :	  4071f9:       jle    4072ab <rprj3+0xc8b>
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  4071ff:       movslq 0x17c(%rsp),%r9
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.04 :	  407207:       add    %rdi,%r8
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  40720a:       mov    0x180(%rsp),%rdi
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  407212:       lea    0x2(%r9),%edx
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  407216:       add    %rdi,%rax
    0.00 :	  407219:       add    %rdi,%rsi
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  40721c:       add    %rcx,%r9
    0.00 :	  40721f:       movslq %edx,%rdx
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
    0.00 :	  407222:       add    %rcx,%rdi
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.04 :	  407225:       movsd  (%rbx,%rax,8),%xmm0
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  40722a:       movsd  (%rbx,%r9,8),%xmm5
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  407230:       addsd  (%rbx,%rsi,8),%xmm0
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  407235:       add    %rdx,%rcx
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
    0.04 :	  407238:       addsd  (%r10,%rdi,8),%xmm0
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  40723e:       addsd  (%rbx,%rcx,8),%xmm5
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  407243:       addsd  (%r11,%rdi,8),%xmm0
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  407249:       addsd  0x240(%rsp,%rdx,8),%xmm3
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
    0.00 :	  407252:       mulsd  (%rbx,%rdi,8),%xmm4
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.00 :	  407257:       addsd  0xa60(%rsp,%rdx,8),%xmm1
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.00 :	  407260:       mov    0xb8(%rsp),%rdx
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  407268:       addsd  %xmm5,%xmm0
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.00 :	  40726c:       mulsd  %xmm1,%xmm7
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.08 :	  407270:       mulsd  %xmm0,%xmm9
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.04 :	  407275:       movsd  (%r10,%rax,8),%xmm0
    0.00 :	  40727b:       addsd  (%r11,%rax,8),%xmm0
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
    0.00 :	  407281:       addsd  (%r10,%rsi,8),%xmm0
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.00 :	  407287:       addsd  (%r11,%rsi,8),%xmm0
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  40728d:       addsd  %xmm0,%xmm3
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  407291:       addsd  %xmm9,%xmm4
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  407296:       mulsd  %xmm3,%xmm8
    0.08 :	  40729b:       addsd  %xmm4,%xmm8
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.04 :	  4072a0:       addsd  %xmm8,%xmm7
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.04 :	  4072a5:       movsd  %xmm7,(%rdx,%r8,8)
    0.00 :	  4072ab:       mov    0xe8(%rsp),%rax
    0.00 :	  4072b3:       mov    0xe0(%rsp),%rdi
         :	    d3 = 1;
         :	  }
         :
         :	  for (j3 = 1; j3 < m3j-1; j3++) {
         :	    i3 = 2*j3-d3;
         :	    for (j2 = 1; j2 < m2j-1; j2++) {
    0.00 :	  4072bb:       addl   $0x1,0x1c(%rsp)
    0.00 :	  4072c0:       mov    0x1c(%rsp),%esi
    0.00 :	  4072c4:       add    %rax,%r12
    0.00 :	  4072c7:       add    %rax,%r14
    0.00 :	  4072ca:       add    %rax,%r15
    0.04 :	  4072cd:       add    %rdi,0x8(%rsp)
    0.00 :	  4072d2:       add    %rdi,0xc0(%rsp)
    0.00 :	  4072da:       add    %rax,%r13
    0.00 :	  4072dd:       add    %rax,0xc8(%rsp)
    0.00 :	  4072e5:       addl   $0x2,0x88(%rsp)
    0.04 :	  4072ed:       add    %rdi,0x30(%rsp)
    0.00 :	  4072f2:       add    %rax,0x38(%rsp)
    0.00 :	  4072f7:       add    %rax,0x68(%rsp)
    0.00 :	  4072fc:       cmp    0x118(%rsp),%esi
    0.00 :	  407303:       jne    406ba0 <rprj3+0x580>
    0.00 :	  407309:       mov    0x1d8(%rsp),%rdx
    0.00 :	  407311:       addl   $0x2,0x1a0(%rsp)
    0.00 :	  407319:       add    %rdx,0x40(%rsp)
    0.00 :	  40731e:       mov    0x1a0(%rsp),%eax
    0.00 :	  407325:       mov    0x1e0(%rsp),%rdx
    0.00 :	  40732d:       add    %rdx,0x190(%rsp)
    0.00 :	  407335:       mov    0x1e8(%rsp),%rdx
    0.00 :	  40733d:       add    %rdx,0x198(%rsp)
         :	    d3 = 2;
         :	  } else {
         :	    d3 = 1;
         :	  }
         :
         :	  for (j3 = 1; j3 < m3j-1; j3++) {
    0.00 :	  407345:       cmp    0x228(%rsp),%eax
    0.00 :	  40734c:       jne    406a60 <rprj3+0x440>
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
         :	      }
         :	    }
         :	  }
         :	  if (timeron) timer_stop(T_rprj3);
    0.00 :	  407352:       mov    0x22c(%rsp),%edi
    0.00 :	  407359:       test   %edi,%edi
    0.00 :	  40735b:       jne    4075a4 <rprj3+0xf84>
         :
         :	  j = k-1;
         :	  comm3(s, m1j, m2j, m3j, j);
    0.00 :	  407361:       mov    0xdc(%rsp),%r15d
    0.00 :	  407369:       mov    0x218(%rsp),%r14
    0.00 :	  407371:       mov    0x12c8(%rsp),%ecx
    0.00 :	  407378:       mov    0x12c0(%rsp),%edx
    0.00 :	  40737f:       mov    %r15d,%esi
    0.00 :	  407382:       mov    %r14,%rdi
    0.00 :	  407385:       callq  402560 <comm3.isra.0>
         :
         :	  if (debug_vec[0] >= 1) {
    0.00 :	  40738a:       mov    0x1c505330(%rip),%esi        # 1c90c6c0 <debug_vec>
    0.00 :	  407390:       test   %esi,%esi
    0.00 :	  407392:       jle    407412 <rprj3+0xdf2>
         :	      }
         :	    }
         :	  }
         :	  if (timeron) timer_stop(T_rprj3);
         :
         :	  j = k-1;
    0.00 :	  407394:       mov    0x12d0(%rsp),%eax
         :	rep_nrm():
         :	//---------------------------------------------------------------------
         :	static void rep_nrm(void *u, int n1, int n2, int n3, char *title, int kk)
         :	{
         :	  double rnm2, rnmu;
         :
         :	  norm2u3(u, n1, n2, n3, &rnm2, &rnmu, nx[kk], ny[kk], nz[kk]);
    0.00 :	  40739b:       sub    $0x8,%rsp
    0.00 :	  40739f:       mov    %r15d,%esi
    0.00 :	  4073a2:       mov    %r14,%rdi
         :	rprj3():
         :	      }
         :	    }
         :	  }
         :	  if (timeron) timer_stop(T_rprj3);
         :
         :	  j = k-1;
    0.00 :	  4073a5:       lea    -0x1(%rax),%ebx
         :	rep_nrm():
         :	//---------------------------------------------------------------------
         :	static void rep_nrm(void *u, int n1, int n2, int n3, char *title, int kk)
         :	{
         :	  double rnm2, rnmu;
         :
         :	  norm2u3(u, n1, n2, n3, &rnm2, &rnmu, nx[kk], ny[kk], nz[kk]);
    0.00 :	  4073a8:       movslq %ebx,%rax
    0.00 :	  4073ab:       mov    0x1c90c700(,%rax,4),%edx
    0.00 :	  4073b2:       push   %rdx
    0.00 :	  4073b3:       mov    0x1c90c740(,%rax,4),%edx
    0.00 :	  4073ba:       mov    0x1c90c780(,%rax,4),%eax
    0.00 :	  4073c1:       push   %rdx
    0.00 :	  4073c2:       push   %rax
    0.00 :	  4073c3:       mov    0x12e0(%rsp),%edx
    0.00 :	  4073ca:       mov    0x12e8(%rsp),%ecx
    0.00 :	  4073d1:       lea    0x258(%rsp),%r9
    0.00 :	  4073d9:       lea    0x250(%rsp),%r8
    0.00 :	  4073e1:       callq  402380 <norm2u3>
         :	  printf(" Level%2d in %8s: norms =%21.14E%21.14E\n", kk, title, rnm2, rnmu);
    0.00 :	  4073e6:       add    $0x20,%rsp
    0.00 :	  4073ea:       mov    $0x40a509,%edx
    0.00 :	  4073ef:       mov    %ebx,%esi
    0.00 :	  4073f1:       movsd  0x238(%rsp),%xmm1
    0.00 :	  4073fa:       mov    $0x40a748,%edi
    0.00 :	  4073ff:       mov    $0x2,%eax
    0.00 :	  407404:       movsd  0x230(%rsp),%xmm0
    0.00 :	  40740d:       callq  400750 <printf@plt>
         :	rprj3():
         :
         :	  if (debug_vec[0] >= 1) {
         :	    rep_nrm(s, m1j, m2j, m3j, "   rprj3", k-1);
         :	  }
         :
         :	  if (debug_vec[4] >= k) {
    0.00 :	  407412:       mov    0x12d0(%rsp),%eax
    0.00 :	  407419:       cmp    %eax,0x1c5052b1(%rip)        # 1c90c6d0 <debug_vec+0x10>
    0.00 :	  40741f:       jge    4075cf <rprj3+0xfaf>
         :	    showall(s, m1j, m2j, m3j);
         :	  }
         :	}
    0.00 :	  407425:       add    $0x1288,%rsp
    0.00 :	  40742c:       pop    %rbx
    0.00 :	  40742d:       pop    %rbp
    0.00 :	  40742e:       pop    %r12
    0.00 :	  407430:       pop    %r13
    0.00 :	  407432:       pop    %r14
    0.00 :	  407434:       pop    %r15
    0.00 :	  407436:       retq   
    0.00 :	  407437:       nopw   0x0(%rax,%rax,1)
    0.00 :	  407440:       mov    $0x3,%ecx
    0.00 :	  407445:       sub    0x1a4(%rsp),%ecx
    0.00 :	  40744c:       mov    0x110(%rsp),%rsi
    0.00 :	  407454:       movslq %ecx,%rcx
    0.00 :	  407457:       mov    0x70(%rsp),%r9
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
    0.00 :	  40745c:       mov    0xc0(%rsp),%rdi
    0.00 :	  407464:       add    %rcx,%rdx
    0.00 :	  407467:       add    %rcx,%rax
    0.00 :	  40746a:       movsd  0x10(%rsi),%xmm3
    0.00 :	  40746f:       mov    0x48(%rsp),%r10
    0.00 :	  407474:       mov    0x90(%rsp),%rcx
    0.00 :	  40747c:       mov    0x108(%rsp),%rsi
    0.00 :	  407484:       shl    $0x3,%rdx
    0.00 :	  407488:       shl    $0x3,%rax
    0.00 :	  40748c:       imul   0xd0(%rsp),%rcx
    0.00 :	  407495:       mov    0x40(%rsp),%r11
    0.00 :	  40749a:       movsd  0x10(%rsi),%xmm10
    0.00 :	  4074a0:       movsd  0x34a7(%rip),%xmm9        # 40a950 <_IO_stdin_used+0x5e0>
    0.00 :	  4074a9:       mov    0xc8(%rsp),%rsi
    0.00 :	  4074b1:       movsd  0x349f(%rip),%xmm4        # 40a958 <_IO_stdin_used+0x5e8>
    0.00 :	  4074b9:       lea    (%r9,%rcx,1),%r8
    0.00 :	  4074bd:       movsd  0x34a3(%rip),%xmm7        # 40a968 <_IO_stdin_used+0x5f8>
    0.00 :	  4074c5:       mov    0x1a8(%rsp),%rcx
    0.00 :	  4074cd:       mov    0x188(%rsp),%rbp
    0.00 :	  4074d5:       mov    0x1b0(%rsp),%rbx
    0.00 :	  4074dd:       movsd  0x347a(%rip),%xmm8        # 40a960 <_IO_stdin_used+0x5f0>
    0.00 :	  4074e6:       nopw   %cs:0x0(%rax,%rax,1)
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  4074f0:       movsd  (%r9,%rsi,1),%xmm1
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  4074f6:       movsd  0x0(%rbp,%rax,1),%xmm0
    0.00 :	  4074fc:       add    $0x8,%rdi
    0.00 :	  407500:       addsd  (%r8,%rcx,1),%xmm0
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  407506:       addsd  (%r9,%rdx,1),%xmm1
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  40750c:       movsd  0x240(%rsp,%rcx,1),%xmm5
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
    0.00 :	  407515:       addsd  (%r11,%rax,1),%xmm1
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.00 :	  40751b:       movsd  0xa60(%rsp,%rcx,1),%xmm6
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
    0.00 :	  407524:       addsd  (%r10,%rax,1),%xmm1
    0.00 :	  40752a:       add    $0x10,%rcx
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  40752e:       addsd  %xmm5,%xmm10
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.00 :	  407533:       addsd  %xmm6,%xmm3
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  407537:       addsd  %xmm0,%xmm1
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
    0.00 :	  40753b:       movsd  (%r9,%rax,1),%xmm0
    0.00 :	  407541:       add    $0x10,%rax
    0.00 :	  407545:       mulsd  %xmm4,%xmm0
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  407549:       mulsd  %xmm9,%xmm1
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.00 :	  40754e:       mulsd  %xmm7,%xmm3
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
    0.00 :	  407552:       addsd  %xmm0,%xmm1
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.00 :	  407556:       movsd  (%r11,%rsi,1),%xmm0
    0.00 :	  40755c:       addsd  (%r10,%rsi,1),%xmm0
    0.00 :	  407562:       add    $0x10,%rsi
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
    0.00 :	  407566:       addsd  (%r11,%rdx,1),%xmm0
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
    0.00 :	  40756c:       addsd  (%r10,%rdx,1),%xmm0
    0.00 :	  407572:       add    $0x10,%rdx
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
         :	                0.5 * r[i3+1][i2+1][i1+1]
         :	              + 0.25 * (r[i3+1][i2+1][i1] + r[i3+1][i2+1][i1+2] + x2)
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
    0.00 :	  407576:       addsd  %xmm10,%xmm0
    0.00 :	  40757b:       movapd %xmm5,%xmm10
    0.00 :	  407580:       mulsd  %xmm8,%xmm0
    0.00 :	  407585:       addsd  %xmm1,%xmm0
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
    0.00 :	  407589:       addsd  %xmm3,%xmm0
    0.00 :	  40758d:       movapd %xmm6,%xmm3
         :	        i1 = 2*j1-d1;
         :	        y2 = r[i3  ][i2  ][i1+1] + r[i3+2][i2  ][i1+1]
         :	           + r[i3  ][i2+2][i1+1] + r[i3+2][i2+2][i1+1];
         :	        x2 = r[i3+1][i2  ][i1+1] + r[i3+1][i2+2][i1+1]
         :	           + r[i3  ][i2+1][i1+1] + r[i3+2][i2+1][i1+1];
         :	        s[j3][j2][j1] =
    0.00 :	  407591:       movsd  %xmm0,-0x8(%rdi)
         :	               + r[i3  ][i2+1][i1] + r[i3+2][i2+1][i1];
         :	        y1[i1] = r[i3  ][i2  ][i1] + r[i3+2][i2  ][i1]
         :	               + r[i3  ][i2+2][i1] + r[i3+2][i2+2][i1];
         :	      }
         :
         :	      for (j1 = 1; j1 < m1j-1; j1++) {
    0.00 :	  407596:       cmp    %rbx,%rcx
    0.00 :	  407599:       jne    4074f0 <rprj3+0xed0>
    0.00 :	  40759f:       jmpq   4072ab <rprj3+0xc8b>
         :	              + 0.125 * (x1[i1] + x1[i1+2] + y2)
         :	              + 0.0625 * (y1[i1] + y1[i1+2]);
         :	      }
         :	    }
         :	  }
         :	  if (timeron) timer_stop(T_rprj3);
    0.00 :	  4075a4:       mov    $0x6,%edi
    0.00 :	  4075a9:       callq  4015f0 <timer_stop>
    0.00 :	  4075ae:       jmpq   407361 <rprj3+0xd41>
         :
         :	  int j3, j2, j1, i3, i2, i1, d1, d2, d3, j;
         :
         :	  double x1[M], y1[M], x2, y2;
         :
         :	  if (timeron) timer_start(T_rprj3);
    0.00 :	  4075b3:       mov    $0x6,%edi
    0.00 :	  4075b8:       callq  4015c0 <timer_start>
    0.00 :	  4075bd:       mov    0x1c504fdd(%rip),%eax        # 1c90c5a0 <timeron>
    0.00 :	  4075c3:       mov    %eax,0x22c(%rsp)
    0.00 :	  4075ca:       jmpq   4066ab <rprj3+0x8b>
         :	showall():
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  4075cf:       mov    $0x12,%eax
         :	  m2 = min(n2, 14);
    0.00 :	  4075d4:       mov    $0xe,%r13d
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
    0.00 :	  4075da:       mov    $0x40a4e5,%edi
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  4075df:       mov    0xdc(%rsp),%esi
    0.00 :	  4075e6:       cmp    $0x12,%esi
    0.00 :	  4075e9:       cmovg  %eax,%esi
         :	  m2 = min(n2, 14);
    0.00 :	  4075ec:       cmpl   $0xe,0x12c0(%rsp)
    0.00 :	  4075f4:       cmovle 0x12c0(%rsp),%r13d
         :	  m3 = min(n3, 18);
    0.00 :	  4075fd:       cmpl   $0x12,0x12c8(%rsp)
    0.00 :	  407605:       cmovle 0x12c8(%rsp),%eax
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  40760d:       mov    %esi,(%rsp)
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
    0.00 :	  407610:       mov    %eax,0x1c(%rsp)
         :
         :	  printf("   \n");
    0.00 :	  407614:       callq  400730 <puts@plt>
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  407619:       mov    0x12c8(%rsp),%ecx
    0.00 :	  407620:       test   %ecx,%ecx
    0.00 :	  407622:       jle    4076de <rprj3+0x10be>
    0.00 :	  407628:       mov    0x220(%rsp),%rax
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  407630:       mov    0xe0(%rsp),%rbx
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  407638:       movl   $0x0,0x8(%rsp)
    0.00 :	  407640:       mov    0x218(%rsp),%r12
    0.00 :	  407648:       shl    $0x3,%rax
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  40764c:       shr    $0x3,%rbx
    0.00 :	  407650:       mov    %rax,0x10(%rsp)
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  407655:       mov    0xdc(%rsp),%eax
    0.00 :	  40765c:       test   %eax,%eax
    0.00 :	  40765e:       jle    4076bc <rprj3+0x109c>
    0.00 :	  407660:       xor    %r14d,%r14d
    0.00 :	  407663:       nopl   0x0(%rax,%rax,1)
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  407668:       mov    0x12c0(%rsp),%edx
    0.00 :	  40766f:       xor    %r15d,%r15d
    0.00 :	  407672:       movslq %r14d,%rbp
    0.00 :	  407675:       test   %edx,%edx
    0.00 :	  407677:       jle    4076a8 <rprj3+0x1088>
    0.00 :	  407679:       nopl   0x0(%rax)
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  407680:       movslq %r15d,%rax
    0.00 :	  407683:       mov    $0x40a4e9,%edi
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  407688:       add    $0x1,%r15d
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  40768c:       imul   %rbx,%rax
    0.00 :	  407690:       add    %rbp,%rax
    0.00 :	  407693:       movsd  (%r12,%rax,8),%xmm0
    0.00 :	  407699:       mov    $0x1,%eax
    0.00 :	  40769e:       callq  400750 <printf@plt>
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  4076a3:       cmp    %r15d,%r13d
    0.00 :	  4076a6:       jg     407680 <rprj3+0x1060>
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
    0.00 :	  4076a8:       mov    $0xa,%edi
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  4076ad:       add    $0x1,%r14d
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
    0.00 :	  4076b1:       callq  400710 <putchar@plt>
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  4076b6:       cmp    %r14d,(%rsp)
    0.00 :	  4076ba:       jg     407668 <rprj3+0x1048>
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
    0.00 :	  4076bc:       mov    $0x40a4ef,%edi
    0.00 :	  4076c1:       callq  400730 <puts@plt>
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  4076c6:       addl   $0x1,0x8(%rsp)
    0.00 :	  4076cb:       add    0x10(%rsp),%r12
    0.00 :	  4076d0:       mov    0x8(%rsp),%eax
    0.00 :	  4076d4:       cmp    %eax,0x1c(%rsp)
    0.00 :	  4076d8:       jg     407655 <rprj3+0x1035>
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
         :	  }
         :	  printf("   \n");
    0.00 :	  4076de:       mov    $0x40a4e5,%edi
    0.00 :	  4076e3:       callq  400730 <puts@plt>
         :	rprj3():
         :	  }
         :
         :	  if (debug_vec[4] >= k) {
         :	    showall(s, m1j, m2j, m3j);
         :	  }
         :	}
    0.00 :	  4076e8:       jmpq   407425 <rprj3+0xe05>
 Percent |	Source code & Disassembly of real for cycles (2506 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	00000000004076f0 <interp>:
         :	interp():
         :	// based machines.  Vector machines may get slightly better
         :	// performance however, with 8 separate "do i1" loops, rather than 4.
         :	//---------------------------------------------------------------------
         :	static void interp(void *oz, int mm1, int mm2, int mm3,
         :	                   void *ou, int n1, int n2, int n3, int k)
         :	{
    0.00 :	  4076f0:       push   %r15
    0.00 :	  4076f2:       movslq %esi,%rax
    0.00 :	  4076f5:       push   %r14
    0.00 :	  4076f7:       push   %r13
    0.00 :	  4076f9:       push   %r12
    0.00 :	  4076fb:       push   %rbp
    0.00 :	  4076fc:       push   %rbx
         :	  double (*z)[mm2][mm1] = (double (*)[mm2][mm1])oz;
    0.00 :	  4076fd:       lea    0x0(,%rax,8),%rbx
         :	// based machines.  Vector machines may get slightly better
         :	// performance however, with 8 separate "do i1" loops, rather than 4.
         :	//---------------------------------------------------------------------
         :	static void interp(void *oz, int mm1, int mm2, int mm3,
         :	                   void *ou, int n1, int n2, int n3, int k)
         :	{
    0.00 :	  407705:       sub    $0x1a48,%rsp
    0.00 :	  40770c:       mov    %edx,0x4c(%rsp)
         :	  double (*z)[mm2][mm1] = (double (*)[mm2][mm1])oz;
    0.00 :	  407710:       movslq %edx,%rdx
    0.00 :	  407713:       imul   %rax,%rdx
         :	// based machines.  Vector machines may get slightly better
         :	// performance however, with 8 separate "do i1" loops, rather than 4.
         :	//---------------------------------------------------------------------
         :	static void interp(void *oz, int mm1, int mm2, int mm3,
         :	                   void *ou, int n1, int n2, int n3, int k)
         :	{
    0.00 :	  407717:       mov    %eax,0x24(%rsp)
         :	  double (*z)[mm2][mm1] = (double (*)[mm2][mm1])oz;
         :	  double (*u)[n2][n1] = (double (*)[n2][n1])ou;
    0.00 :	  40771b:       movslq %r9d,%rax
         :	// performance however, with 8 separate "do i1" loops, rather than 4.
         :	//---------------------------------------------------------------------
         :	static void interp(void *oz, int mm1, int mm2, int mm3,
         :	                   void *ou, int n1, int n2, int n3, int k)
         :	{
         :	  double (*z)[mm2][mm1] = (double (*)[mm2][mm1])oz;
    0.00 :	  40771e:       mov    %rbx,0x98(%rsp)
         :	  double (*u)[n2][n1] = (double (*)[n2][n1])ou;
    0.00 :	  407726:       lea    0x0(,%rax,8),%rbx
         :	// based machines.  Vector machines may get slightly better
         :	// performance however, with 8 separate "do i1" loops, rather than 4.
         :	//---------------------------------------------------------------------
         :	static void interp(void *oz, int mm1, int mm2, int mm3,
         :	                   void *ou, int n1, int n2, int n3, int k)
         :	{
    0.00 :	  40772e:       mov    %rdi,0x148(%rsp)
         :	  double (*z)[mm2][mm1] = (double (*)[mm2][mm1])oz;
    0.00 :	  407736:       mov    %rdx,0x170(%rsp)
         :	  double (*u)[n2][n1] = (double (*)[n2][n1])ou;
    0.00 :	  40773e:       movslq 0x1a80(%rsp),%rdx
         :	// based machines.  Vector machines may get slightly better
         :	// performance however, with 8 separate "do i1" loops, rather than 4.
         :	//---------------------------------------------------------------------
         :	static void interp(void *oz, int mm1, int mm2, int mm3,
         :	                   void *ou, int n1, int n2, int n3, int k)
         :	{
    0.00 :	  407746:       mov    %ecx,0x184(%rsp)
         :	  double (*z)[mm2][mm1] = (double (*)[mm2][mm1])oz;
         :	  double (*u)[n2][n1] = (double (*)[n2][n1])ou;
    0.00 :	  40774d:       imul   %rax,%rdx
         :	  // 535 to handle up to 1024^3
         :	  //      integer m
         :	  //      parameter( m=535 )
         :	  double z1[M], z2[M], z3[M];
         :
         :	  if (timeron) timer_start(T_interp);
    0.00 :	  407751:       mov    0x1c504e49(%rip),%eax        # 1c90c5a0 <timeron>
         :	// based machines.  Vector machines may get slightly better
         :	// performance however, with 8 separate "do i1" loops, rather than 4.
         :	//---------------------------------------------------------------------
         :	static void interp(void *oz, int mm1, int mm2, int mm3,
         :	                   void *ou, int n1, int n2, int n3, int k)
         :	{
    0.00 :	  407757:       mov    %r8,0x18(%rsp)
    0.00 :	  40775c:       mov    %r9d,0x1c8(%rsp)
         :	  double (*z)[mm2][mm1] = (double (*)[mm2][mm1])oz;
         :	  double (*u)[n2][n1] = (double (*)[n2][n1])ou;
    0.00 :	  407764:       mov    %rbx,0x188(%rsp)
    0.00 :	  40776c:       mov    %rdx,0x168(%rsp)
         :	  // 535 to handle up to 1024^3
         :	  //      integer m
         :	  //      parameter( m=535 )
         :	  double z1[M], z2[M], z3[M];
         :
         :	  if (timeron) timer_start(T_interp);
    0.00 :	  407774:       mov    %eax,0x1cc(%rsp)
    0.00 :	  40777b:       test   %eax,%eax
    0.00 :	  40777d:       jne    409b5d <interp+0x246d>
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
    0.00 :	  407783:       cmpl   $0x3,0x1c8(%rsp)
    0.00 :	  40778b:       je     4080ca <interp+0x9da>
    0.00 :	  407791:       cmpl   $0x3,0x1a80(%rsp)
    0.00 :	  407799:       je     4080ca <interp+0x9da>
    0.00 :	  40779f:       cmpl   $0x3,0x1a88(%rsp)
    0.00 :	  4077a7:       je     409d95 <interp+0x26a5>
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
    0.00 :	  4077ad:       mov    0x184(%rsp),%ecx
    0.00 :	  4077b4:       cmp    $0x1,%ecx
    0.00 :	  4077b7:       jle    407f7f <interp+0x88f>
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  4077bd:       mov    0x24(%rsp),%edi
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
         :	        for (i1 = 0; i1 < mm1; i1++) {
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
    0.00 :	  4077c1:       mov    0x98(%rsp),%r13
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.00 :	  4077c9:       mov    0x188(%rsp),%rbx
    0.00 :	  4077d1:       mov    0x4c(%rsp),%r10d
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  4077d6:       lea    -0x1(%rdi),%esi
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
         :	        for (i1 = 0; i1 < mm1; i1++) {
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
    0.00 :	  4077d9:       shr    $0x3,%r13
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  4077dd:       mov    %esi,0x38(%rsp)
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.00 :	  4077e1:       shr    $0x3,%rbx
    0.00 :	  4077e5:       cmp    $0x1,%r10d
    0.00 :	  4077e9:       jle    407f7f <interp+0x88f>
    0.00 :	  4077ef:       mov    0x170(%rsp),%rax
    0.00 :	  4077f7:       mov    %esi,%edx
    0.00 :	  4077f9:       movapd 0x308f(%rip),%xmm3        # 40a890 <_IO_stdin_used+0x520>
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
    0.00 :	  407801:       movl   $0x0,0xbc(%rsp)
    0.00 :	  40780c:       movapd 0x308c(%rip),%xmm4        # 40a8a0 <_IO_stdin_used+0x530>
    0.00 :	  407814:       movapd 0x3094(%rip),%xmm6        # 40a8b0 <_IO_stdin_used+0x540>
    0.00 :	  40781c:       mov    %edi,%r12d
    0.00 :	  40781f:       lea    0x0(,%rax,8),%r15
    0.00 :	  407827:       movapd %xmm3,%xmm5
    0.00 :	  40782b:       movapd %xmm3,%xmm1
    0.00 :	  40782f:       mov    0x148(%rsp),%rax
    0.00 :	  407837:       mov    %r15,0xc8(%rsp)
    0.00 :	  40783f:       movapd %xmm4,%xmm7
    0.00 :	  407843:       lea    (%rax,%rdx,8),%r11
    0.00 :	  407847:       mov    %rax,%r14
    0.00 :	  40784a:       add    %r15,%rax
    0.00 :	  40784d:       mov    %r11,0x88(%rsp)
    0.00 :	  407855:       mov    %rax,%r11
    0.00 :	  407858:       lea    0x7fffffff(%rcx),%eax
    0.00 :	  40785e:       add    %eax,%eax
    0.00 :	  407860:       mov    %r11,%rbp
    0.00 :	  407863:       mov    %r13,%r11
    0.00 :	  407866:       mov    %eax,0xd0(%rsp)
    0.00 :	  40786d:       mov    %edi,%eax
    0.00 :	  40786f:       shr    %eax
    0.00 :	  407871:       shl    $0x4,%rax
    0.00 :	  407875:       mov    %rax,0xa8(%rsp)
    0.00 :	  40787d:       mov    %edi,%eax
    0.00 :	  40787f:       and    $0xfffffffe,%eax
    0.00 :	  407882:       mov    %eax,0xb0(%rsp)
    0.00 :	  407889:       lea    (%rdx,%rdx,1),%rax
    0.00 :	  40788d:       mov    %esi,%edx
    0.00 :	  40788f:       shr    %esi
    0.00 :	  407891:       mov    %rax,0xd8(%rsp)
    0.00 :	  407899:       mov    %esi,%eax
    0.00 :	  40789b:       mov    %edx,%esi
    0.00 :	  40789d:       and    $0xfffffffe,%esi
    0.00 :	  4078a0:       shl    $0x4,%rax
    0.00 :	  4078a4:       mov    %rax,%r15
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.00 :	  4078a7:       lea    (%rsi,%rsi,1),%eax
    0.00 :	  4078aa:       mov    %esi,0x48(%rsp)
    0.00 :	  4078ae:       mov    %eax,0x30(%rsp)
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
    0.00 :	  4078b2:       add    $0x1,%eax
    0.00 :	  4078b5:       mov    %eax,0x28(%rsp)
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
    0.00 :	  4078b9:       lea    0x1(%rsi),%eax
    0.00 :	  4078bc:       mov    %eax,0x10(%rsp)
    0.00 :	  4078c0:       lea    -0x2(%rdi),%eax
    0.00 :	  4078c3:       mov    %eax,0xb8(%rsp)
    0.00 :	  4078ca:       add    %rax,%rax
    0.00 :	  4078cd:       mov    %rax,0xc0(%rsp)
    0.00 :	  4078d5:       lea    -0x1(%r10),%eax
    0.00 :	  4078d9:       mov    %eax,0x90(%rsp)
    0.00 :	  4078e0:       mov    0x168(%rsp),%rdi
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.00 :	  4078e8:       mov    0x18(%rsp),%r10
    0.00 :	  4078ed:       mov    %rbp,%r13
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
    0.00 :	  4078f0:       movq   $0x0,0x58(%rsp)
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.00 :	  4078f9:       movslq 0xbc(%rsp),%rax
    0.00 :	  407901:       movapd 0x2f97(%rip),%xmm2        # 40a8a0 <_IO_stdin_used+0x530>
    0.00 :	  407909:       mov    %rax,%rsi
    0.00 :	  40790c:       imul   %rdi,%rax
    0.00 :	  407910:       mov    %rax,%rcx
    0.00 :	  407913:       lea    (%r10,%rax,8),%rdx
    0.00 :	  407917:       mov    %rax,0x68(%rsp)
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
    0.00 :	  40791c:       lea    0x1(%rsi),%eax
    0.00 :	  40791f:       cltq   
    0.00 :	  407921:       add    0xd8(%rsp),%rcx
    0.00 :	  407929:       mov    %rbp,%rsi
    0.00 :	  40792c:       imul   %rdi,%rax
    0.00 :	  407930:       mov    %rcx,0xa0(%rsp)
         :	  double z1[M], z2[M], z3[M];
         :
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
    0.00 :	  407938:       xor    %edi,%edi
    0.00 :	  40793a:       mov    %rax,0x78(%rsp)
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
    0.00 :	  40793f:       lea    (%r10,%rax,8),%rax
    0.00 :	  407943:       mov    %r14,%r10
    0.00 :	  407946:       nopw   %cs:0x0(%rax,%rax,1)
    0.04 :	  407950:       lea    0x1(%rdi),%ecx
    0.00 :	  407953:       mov    %ecx,0x8(%rsp)
         :
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
         :	        for (i1 = 0; i1 < mm1; i1++) {
    0.00 :	  407957:       test   %r12d,%r12d
    0.00 :	  40795a:       jle    409b05 <interp+0x2415>
    0.00 :	  407960:       cmp    $0x1,%r12d
    0.00 :	  407964:       je     409b23 <interp+0x2433>
    0.00 :	  40796a:       mov    0x98(%rsp),%r8
    0.00 :	  407972:       mov    %r11,0x60(%rsp)
    0.04 :	  407977:       lea    0x1e0(%rsp),%rbp
    0.00 :	  40797f:       lea    0xa00(%rsp),%r9
    0.00 :	  407987:       mov    %rbx,0x70(%rsp)
    0.00 :	  40798c:       lea    (%r10,%r8,1),%rcx
    0.04 :	  407990:       add    %rsi,%r8
    0.00 :	  407993:       mov    %rax,0x80(%rsp)
    0.00 :	  40799b:       mov    0xa8(%rsp),%rax
    0.00 :	  4079a3:       mov    %rcx,0x40(%rsp)
    0.00 :	  4079a8:       mov    0x40(%rsp),%r11
    0.00 :	  4079ad:       xor    %ecx,%ecx
    0.00 :	  4079af:       mov    %r8,0x50(%rsp)
    0.00 :	  4079b4:       mov    0x50(%rsp),%rbx
    0.00 :	  4079b9:       lea    0x1220(%rsp),%r8
    0.00 :	  4079c1:       nopl   0x0(%rax)
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
    0.76 :	  4079c8:       movupd (%r10,%rcx,1),%xmm0
    0.64 :	  4079ce:       movupd (%r11,%rcx,1),%xmm8
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
    1.60 :	  4079d4:       movupd (%r10,%rcx,1),%xmm12
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
    0.56 :	  4079da:       movupd (%rsi,%rcx,1),%xmm13
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
         :	        for (i1 = 0; i1 < mm1; i1++) {
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
    0.96 :	  4079e0:       addpd  %xmm0,%xmm8
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
    0.08 :	  4079e5:       movupd (%rsi,%rcx,1),%xmm0
    0.80 :	  4079ea:       addpd  %xmm12,%xmm0
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
         :	        for (i1 = 0; i1 < mm1; i1++) {
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
    0.12 :	  4079ef:       movaps %xmm8,0x0(%rbp,%rcx,1)
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
    0.00 :	  4079f5:       movaps %xmm0,(%r9,%rcx,1)
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
    0.36 :	  4079fa:       movupd (%rbx,%rcx,1),%xmm0
    5.51 :	  4079ff:       addpd  %xmm13,%xmm0
    0.52 :	  407a04:       addpd  %xmm8,%xmm0
    0.88 :	  407a09:       movaps %xmm0,(%r8,%rcx,1)
    0.44 :	  407a0e:       add    $0x10,%rcx
    0.28 :	  407a12:       cmp    %rax,%rcx
    0.00 :	  407a15:       jne    4079c8 <interp+0x2d8>
    0.00 :	  407a17:       mov    0xb0(%rsp),%esi
    0.04 :	  407a1e:       mov    0x60(%rsp),%r11
    0.08 :	  407a23:       mov    0x70(%rsp),%rbx
    0.00 :	  407a28:       mov    0x80(%rsp),%rax
         :
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
         :	        for (i1 = 0; i1 < mm1; i1++) {
    0.04 :	  407a30:       movslq %esi,%rcx
    0.00 :	  407a33:       cmp    %esi,%r12d
    0.00 :	  407a36:       je     407a94 <interp+0x3a4>
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
    0.00 :	  407a38:       movslq 0x8(%rsp),%rsi
    0.00 :	  407a3d:       movslq %edi,%r8
    0.00 :	  407a40:       imul   %r11,%r8
    0.00 :	  407a44:       imul   %r11,%rsi
    0.00 :	  407a48:       add    %rcx,%r8
    0.00 :	  407a4b:       add    %rcx,%rsi
    0.00 :	  407a4e:       movsd  (%r14,%r8,8),%xmm8
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
    0.00 :	  407a54:       movsd  0x0(%r13,%r8,8),%xmm0
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
         :	        for (i1 = 0; i1 < mm1; i1++) {
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
    0.00 :	  407a5b:       movsd  (%r14,%rsi,8),%xmm9
    0.00 :	  407a61:       addsd  %xmm8,%xmm9
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
    0.00 :	  407a66:       addsd  %xmm0,%xmm8
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
    0.00 :	  407a6b:       addsd  0x0(%r13,%rsi,8),%xmm0
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
         :	        for (i1 = 0; i1 < mm1; i1++) {
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
    0.00 :	  407a72:       movsd  %xmm9,0x1e0(%rsp,%rcx,8)
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
    0.00 :	  407a7c:       movsd  %xmm8,0xa00(%rsp,%rcx,8)
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
    0.00 :	  407a86:       addsd  %xmm9,%xmm0
    0.00 :	  407a8b:       movsd  %xmm0,0x1220(%rsp,%rcx,8)
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  407a94:       mov    0x38(%rsp),%ebp
    0.00 :	  407a98:       test   %ebp,%ebp
    0.00 :	  407a9a:       jle    407f21 <interp+0x831>
    0.00 :	  407aa0:       mov    0x8(%rsp),%esi
    0.04 :	  407aa4:       mov    %rbx,%r9
    0.00 :	  407aa7:       mov    0x68(%rsp),%rcx
    0.00 :	  407aac:       mov    0x18(%rsp),%r8
    0.12 :	  407ab1:       lea    (%rsi,%rsi,1),%ebp
    0.00 :	  407ab4:       lea    -0x2(%rbp),%esi
    0.00 :	  407ab7:       movslq %esi,%rsi
    0.00 :	  407aba:       imul   %rsi,%r9
    0.04 :	  407abe:       add    %r9,%rcx
    0.00 :	  407ac1:       mov    %r9,0x60(%rsp)
    0.00 :	  407ac6:       lea    (%r8,%rcx,8),%rcx
    0.00 :	  407aca:       mov    %rcx,0x70(%rsp)
    0.00 :	  407acf:       mov    0xa0(%rsp),%rcx
    0.00 :	  407ad7:       add    %r9,%rcx
    0.00 :	  407ada:       lea    (%r8,%rcx,8),%rcx
    0.00 :	  407ade:       mov    0x88(%rsp),%r8
    0.00 :	  407ae6:       cmp    %rcx,%r10
    0.00 :	  407ae9:       mov    0x58(%rsp),%rcx
    0.00 :	  407aee:       setae  %r9b
    0.00 :	  407af2:       lea    0x8(%rcx,%r8,1),%rcx
    0.00 :	  407af7:       mov    0x70(%rsp),%r8
    0.00 :	  407afc:       cmp    %rcx,%r8
    0.00 :	  407aff:       setae  %cl
    0.00 :	  407b02:       or     %cl,%r9b
    0.00 :	  407b05:       je     409a88 <interp+0x2398>
    0.00 :	  407b0b:       cmpl   $0x1,0xb8(%rsp)
    0.00 :	  407b13:       jbe    409a88 <interp+0x2398>
    0.00 :	  407b19:       lea    0x8(%r10),%r9
    0.00 :	  407b1d:       xor    %ecx,%ecx
    0.04 :	  407b1f:       movapd %xmm2,%xmm10
    0.00 :	  407b24:       nopl   0x0(%rax)
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    1.04 :	  407b28:       movupd (%r8,%rcx,2),%xmm8
         :	                              + z[i3][i2][i1];
    7.98 :	  407b2e:       movupd (%r10,%rcx,1),%xmm0
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
    0.92 :	  407b34:       movupd (%r10,%rcx,1),%xmm14
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.80 :	  407b3a:       movupd 0x10(%r8,%rcx,2),%xmm9
    0.64 :	  407b41:       movhpd 0x10(%r8,%rcx,2),%xmm8
    0.00 :	  407b48:       movlpd 0x8(%r8,%rcx,2),%xmm9
         :	                              + z[i3][i2][i1];
    0.68 :	  407b4f:       addpd  %xmm0,%xmm8
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
    0.72 :	  407b54:       movupd (%r9,%rcx,1),%xmm0
    0.80 :	  407b5a:       addpd  %xmm14,%xmm0
    0.08 :	  407b5f:       mulpd  %xmm2,%xmm0
    0.88 :	  407b63:       addpd  %xmm9,%xmm0
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
    1.36 :	  407b68:       movapd %xmm8,%xmm9
    0.16 :	  407b6d:       unpcklpd %xmm0,%xmm9
    0.64 :	  407b72:       unpckhpd %xmm0,%xmm8
    0.68 :	  407b77:       movups %xmm9,(%r8,%rcx,2)
    2.11 :	  407b7c:       movups %xmm8,0x10(%r8,%rcx,2)
    1.52 :	  407b82:       add    $0x10,%rcx
    0.08 :	  407b86:       cmp    %r15,%rcx
    0.56 :	  407b89:       jne    407b28 <interp+0x438>
    0.00 :	  407b8b:       mov    0x48(%rsp),%r10d
    0.00 :	  407b90:       cmp    %r10d,0x38(%rsp)
    0.00 :	  407b95:       je     407bfd <interp+0x50d>
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.00 :	  407b97:       mov    %rsi,%r9
         :	                              + z[i3][i2][i1];
    0.00 :	  407b9a:       imul   %r11,%rdi
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.00 :	  407b9e:       movslq 0x30(%rsp),%r8
         :	                              + z[i3][i2][i1];
    0.00 :	  407ba3:       movslq %r10d,%rcx
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.00 :	  407ba6:       imul   %rbx,%r9
         :	                              + z[i3][i2][i1];
    0.00 :	  407baa:       add    %rdi,%rcx
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.00 :	  407bad:       add    %r9,%r8
         :	                              + z[i3][i2][i1];
    0.04 :	  407bb0:       movsd  (%r14,%rcx,8),%xmm0
    0.00 :	  407bb6:       addsd  (%rdx,%r8,8),%xmm0
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.08 :	  407bbc:       movsd  %xmm0,(%rdx,%r8,8)
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
    0.00 :	  407bc2:       movslq 0x28(%rsp),%r8
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
    0.00 :	  407bc7:       movsd  (%r14,%rcx,8),%xmm9
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
    0.00 :	  407bcd:       add    %r8,%r9
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
    0.00 :	  407bd0:       movslq 0x10(%rsp),%r8
    0.00 :	  407bd5:       add    %r8,%rdi
    0.00 :	  407bd8:       movsd  (%r14,%rdi,8),%xmm0
    0.00 :	  407bde:       addsd  %xmm9,%xmm0
    0.00 :	  407be3:       movsd  0x2d6c(%rip),%xmm9        # 40a958 <_IO_stdin_used+0x5e8>
    0.00 :	  407bec:       mulsd  %xmm0,%xmm9
    0.00 :	  407bf1:       addsd  (%rdx,%r9,8),%xmm9
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
    0.00 :	  407bf7:       movsd  %xmm9,(%rdx,%r9,8)
    0.04 :	  407bfd:       lea    -0x1(%rbp),%edi
    0.00 :	  407c00:       movslq %edi,%rdi
    0.00 :	  407c03:       mov    0x18(%rsp),%r10
    0.00 :	  407c08:       movapd %xmm1,%xmm8
    0.00 :	  407c0d:       lea    0x1e0(%rsp),%rbp
    0.00 :	  407c15:       mov    %rdi,%rcx
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
    0.00 :	  407c18:       lea    0x8(%rbp),%r9
    0.00 :	  407c1c:       imul   %rbx,%rcx
    0.00 :	  407c20:       add    0x68(%rsp),%rcx
    0.00 :	  407c25:       lea    (%r10,%rcx,8),%r8
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  407c29:       xor    %ecx,%ecx
    0.00 :	  407c2b:       nopl   0x0(%rax,%rax,1)
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
    0.60 :	  407c30:       movapd 0x0(%rbp,%rcx,1),%xmm9
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
    0.08 :	  407c37:       movupd (%r8,%rcx,2),%xmm0
    0.84 :	  407c3d:       movupd 0x10(%r8,%rcx,2),%xmm11
   11.45 :	  407c44:       movlpd 0x8(%r8,%rcx,2),%xmm11
         :	                                + 0.5 * z1[i1];
    0.16 :	  407c4b:       mulpd  %xmm10,%xmm9
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
    0.64 :	  407c50:       movhpd 0x10(%r8,%rcx,2),%xmm0
         :	                                + 0.5 * z1[i1];
    0.24 :	  407c57:       addpd  %xmm0,%xmm9
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
    0.96 :	  407c5c:       movupd (%r9,%rcx,1),%xmm0
    0.76 :	  407c62:       addpd  0x0(%rbp,%rcx,1),%xmm0
    0.44 :	  407c68:       mulpd  %xmm1,%xmm0
    0.44 :	  407c6c:       addpd  %xmm11,%xmm0
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
    0.72 :	  407c71:       movapd %xmm9,%xmm11
    0.32 :	  407c76:       unpcklpd %xmm0,%xmm11
    0.68 :	  407c7b:       unpckhpd %xmm0,%xmm9
    0.36 :	  407c80:       movups %xmm11,(%r8,%rcx,2)
    1.44 :	  407c85:       movups %xmm9,0x10(%r8,%rcx,2)
    1.48 :	  407c8b:       add    $0x10,%rcx
    0.16 :	  407c8f:       cmp    %rcx,%r15
    0.64 :	  407c92:       jne    407c30 <interp+0x540>
    0.00 :	  407c94:       movsd  0x2cbb(%rip),%xmm9        # 40a958 <_IO_stdin_used+0x5e8>
    0.00 :	  407c9d:       mov    0x48(%rsp),%r8d
    0.00 :	  407ca2:       cmp    %r8d,0x38(%rsp)
    0.00 :	  407ca7:       je     407d23 <interp+0x633>
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
    0.00 :	  407ca9:       movslq %r8d,%r9
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
    0.00 :	  407cac:       mov    %rdi,%r10
    0.00 :	  407caf:       lea    (%r8,%r8,1),%ecx
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
    0.00 :	  407cb3:       add    $0x1,%r8d
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
    0.00 :	  407cb7:       movsd  0x1e0(%rsp,%r9,8),%xmm0
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
    0.00 :	  407cc1:       imul   %rbx,%r10
    0.00 :	  407cc5:       movslq %ecx,%r9
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
    0.00 :	  407cc8:       movslq %r8d,%r8
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
    0.04 :	  407ccb:       add    $0x1,%ecx
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
    0.00 :	  407cce:       movapd %xmm0,%xmm8
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
    0.00 :	  407cd3:       movslq %ecx,%rcx
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
    0.04 :	  407cd6:       addsd  0x1e0(%rsp,%r8,8),%xmm0
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
    0.00 :	  407ce0:       mulsd  %xmm9,%xmm8
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
    0.00 :	  407ce5:       add    %r10,%r9
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
    0.00 :	  407ce8:       add    %r10,%rcx
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
    0.00 :	  407ceb:       addsd  (%rdx,%r9,8),%xmm8
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
    0.00 :	  407cf1:       movsd  %xmm8,(%rdx,%r9,8)
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
    0.04 :	  407cf7:       movsd  0x2c50(%rip),%xmm8        # 40a950 <_IO_stdin_used+0x5e0>
    0.00 :	  407d00:       mulsd  %xmm8,%xmm0
    0.00 :	  407d05:       addsd  (%rdx,%rcx,8),%xmm0
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
    0.00 :	  407d0a:       movsd  %xmm0,(%rdx,%rcx,8)
    0.04 :	  407d0f:       cmp    $0x2,%r12d
    0.00 :	  407d13:       je     409a80 <interp+0x2390>
    0.00 :	  407d19:       movapd %xmm4,%xmm10
    0.00 :	  407d1e:       movapd %xmm5,%xmm8
    0.00 :	  407d23:       mov    0x18(%rsp),%r10
    0.00 :	  407d28:       mov    0x60(%rsp),%rcx
    0.00 :	  407d2d:       lea    0xa00(%rsp),%r9
    0.00 :	  407d35:       add    0x78(%rsp),%rcx
    0.00 :	  407d3a:       lea    (%r10,%rcx,8),%r8
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  407d3e:       xor    %ecx,%ecx
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
    0.00 :	  407d40:       lea    0x8(%r9),%r10
    0.00 :	  407d44:       nopl   0x0(%rax)
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
         :	                                  + 0.5 * z2[i1];
    0.72 :	  407d48:       movapd (%r9,%rcx,1),%xmm9
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
    0.04 :	  407d4e:       movupd (%r8,%rcx,2),%xmm0
   10.22 :	  407d54:       movupd 0x10(%r8,%rcx,2),%xmm11
    0.40 :	  407d5b:       movlpd 0x8(%r8,%rcx,2),%xmm11
         :	                                  + 0.5 * z2[i1];
    0.08 :	  407d62:       mulpd  %xmm10,%xmm9
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
    0.64 :	  407d67:       movhpd 0x10(%r8,%rcx,2),%xmm0
         :	                                  + 0.5 * z2[i1];
    0.08 :	  407d6e:       addpd  %xmm0,%xmm9
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
    0.60 :	  407d73:       movupd (%r10,%rcx,1),%xmm0
    0.76 :	  407d79:       addpd  (%r9,%rcx,1),%xmm0
    0.52 :	  407d7f:       mulpd  %xmm8,%xmm0
    0.60 :	  407d84:       addpd  %xmm11,%xmm0
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
    1.08 :	  407d89:       movapd %xmm9,%xmm11
    0.08 :	  407d8e:       unpcklpd %xmm0,%xmm11
    0.80 :	  407d93:       unpckhpd %xmm0,%xmm9
    0.64 :	  407d98:       movups %xmm11,(%r8,%rcx,2)
    1.36 :	  407d9d:       movups %xmm9,0x10(%r8,%rcx,2)
    1.44 :	  407da3:       add    $0x10,%rcx
    0.24 :	  407da7:       cmp    %rcx,%r15
    0.36 :	  407daa:       jne    407d48 <interp+0x658>
    0.00 :	  407dac:       mov    0x48(%rsp),%r8d
    0.00 :	  407db1:       cmp    %r8d,0x38(%rsp)
    0.00 :	  407db6:       je     407e2e <interp+0x73e>
    0.00 :	  407db8:       movsd  0x2b97(%rip),%xmm9        # 40a958 <_IO_stdin_used+0x5e8>
    0.00 :	  407dc1:       movsd  0x2b86(%rip),%xmm8        # 40a950 <_IO_stdin_used+0x5e0>
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
         :	                                  + 0.5 * z2[i1];
    0.00 :	  407dca:       movslq %r8d,%r9
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
    0.00 :	  407dcd:       imul   %rbx,%rsi
    0.00 :	  407dd1:       lea    (%r8,%r8,1),%ecx
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
    0.00 :	  407dd5:       add    $0x1,%r8d
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
         :	                                  + 0.5 * z2[i1];
    0.00 :	  407dd9:       movsd  0xa00(%rsp,%r9,8),%xmm0
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
    0.08 :	  407de3:       movslq %r8d,%r8
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
    0.00 :	  407de6:       movslq %ecx,%r9
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
    0.00 :	  407de9:       add    $0x1,%ecx
    0.00 :	  407dec:       movslq %ecx,%rcx
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
         :	                                  + 0.5 * z2[i1];
    0.04 :	  407def:       mulsd  %xmm0,%xmm9
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
    0.00 :	  407df4:       add    %rsi,%r9
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
    0.00 :	  407df7:       add    %rcx,%rsi
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
    0.00 :	  407dfa:       addsd  0xa00(%rsp,%r8,8),%xmm0
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
         :	                                  + 0.5 * z2[i1];
    0.04 :	  407e04:       addsd  (%rax,%r9,8),%xmm9
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
    0.20 :	  407e0a:       mulsd  %xmm8,%xmm0
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
    0.00 :	  407e0f:       movsd  %xmm9,(%rax,%r9,8)
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
    0.00 :	  407e15:       addsd  (%rax,%rsi,8),%xmm0
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
    0.00 :	  407e1a:       movsd  %xmm0,(%rax,%rsi,8)
    0.00 :	  407e1f:       cmp    $0x2,%r12d
    0.00 :	  407e23:       je     409a78 <interp+0x2388>
    0.00 :	  407e29:       movapd %xmm3,%xmm8
    0.00 :	  407e2e:       mov    %rdi,%rcx
    0.00 :	  407e31:       mov    0x18(%rsp),%rsi
    0.00 :	  407e36:       lea    0x1220(%rsp),%r8
    0.00 :	  407e3e:       imul   %rbx,%rcx
    0.00 :	  407e42:       add    0x78(%rsp),%rcx
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
         :	                                  + 0.25 * z3[i1];
         :	          u[2*i3+1][2*i2+1][2*i1+1] = u[2*i3+1][2*i2+1][2*i1+1]
         :	                                    + 0.125 * (z3[i1] + z3[i1+1]);
    0.00 :	  407e47:       lea    0x8(%r8),%r9
    0.00 :	  407e4b:       lea    (%rsi,%rcx,8),%rsi
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  407e4f:       xor    %ecx,%ecx
    0.00 :	  407e51:       nopl   0x0(%rax)
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
         :	                                  + 0.25 * z3[i1];
    0.36 :	  407e58:       movapd (%r8,%rcx,1),%xmm9
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
    0.04 :	  407e5e:       movupd (%rsi,%rcx,2),%xmm0
    0.96 :	  407e63:       movupd 0x10(%rsi,%rcx,2),%xmm10
   10.14 :	  407e6a:       movlpd 0x8(%rsi,%rcx,2),%xmm10
         :	                                  + 0.25 * z3[i1];
    0.24 :	  407e71:       mulpd  %xmm8,%xmm9
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
    0.56 :	  407e76:       movhpd 0x10(%rsi,%rcx,2),%xmm0
         :	                                  + 0.25 * z3[i1];
    0.08 :	  407e7c:       addpd  %xmm0,%xmm9
         :	          u[2*i3+1][2*i2+1][2*i1+1] = u[2*i3+1][2*i2+1][2*i1+1]
         :	                                    + 0.125 * (z3[i1] + z3[i1+1]);
    0.80 :	  407e81:       movupd (%r9,%rcx,1),%xmm0
    0.56 :	  407e87:       addpd  (%r8,%rcx,1),%xmm0
    0.52 :	  407e8d:       mulpd  %xmm6,%xmm0
    0.48 :	  407e91:       addpd  %xmm10,%xmm0
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
         :	                                  + 0.25 * z3[i1];
         :	          u[2*i3+1][2*i2+1][2*i1+1] = u[2*i3+1][2*i2+1][2*i1+1]
    0.72 :	  407e96:       movapd %xmm9,%xmm10
    0.16 :	  407e9b:       unpcklpd %xmm0,%xmm10
    0.68 :	  407ea0:       unpckhpd %xmm0,%xmm9
    0.56 :	  407ea5:       movups %xmm10,(%rsi,%rcx,2)
    2.00 :	  407eaa:       movups %xmm9,0x10(%rsi,%rcx,2)
    1.28 :	  407eb0:       add    $0x10,%rcx
    0.08 :	  407eb4:       cmp    %rcx,%r15
    0.28 :	  407eb7:       jne    407e58 <interp+0x768>
    0.00 :	  407eb9:       movsd  0x2a8e(%rip),%xmm8        # 40a950 <_IO_stdin_used+0x5e0>
    0.00 :	  407ec2:       mov    0x48(%rsp),%esi
    0.04 :	  407ec6:       cmp    %esi,0x38(%rsp)
    0.00 :	  407eca:       je     407f21 <interp+0x831>
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
         :	                                  + 0.25 * z3[i1];
    0.00 :	  407ecc:       movslq %esi,%r8
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
    0.00 :	  407ecf:       imul   %rbx,%rdi
    0.04 :	  407ed3:       lea    (%rsi,%rsi,1),%ecx
         :	                                  + 0.25 * z3[i1];
         :	          u[2*i3+1][2*i2+1][2*i1+1] = u[2*i3+1][2*i2+1][2*i1+1]
         :	                                    + 0.125 * (z3[i1] + z3[i1+1]);
    0.04 :	  407ed6:       add    $0x1,%esi
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
         :	                                  + 0.25 * z3[i1];
    0.00 :	  407ed9:       movsd  0x1220(%rsp,%r8,8),%xmm0
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
    0.00 :	  407ee3:       movslq %ecx,%r8
         :	                                  + 0.25 * z3[i1];
         :	          u[2*i3+1][2*i2+1][2*i1+1] = u[2*i3+1][2*i2+1][2*i1+1]
    0.04 :	  407ee6:       add    $0x1,%ecx
         :	                                    + 0.125 * (z3[i1] + z3[i1+1]);
    0.00 :	  407ee9:       movslq %esi,%rsi
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
         :	                                  + 0.25 * z3[i1];
         :	          u[2*i3+1][2*i2+1][2*i1+1] = u[2*i3+1][2*i2+1][2*i1+1]
    0.00 :	  407eec:       movslq %ecx,%rcx
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
         :	                                  + 0.25 * z3[i1];
    0.00 :	  407eef:       mulsd  %xmm0,%xmm8
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
    0.00 :	  407ef4:       add    %rdi,%r8
         :	                                  + 0.25 * z3[i1];
         :	          u[2*i3+1][2*i2+1][2*i1+1] = u[2*i3+1][2*i2+1][2*i1+1]
    0.00 :	  407ef7:       add    %rcx,%rdi
         :	                                    + 0.125 * (z3[i1] + z3[i1+1]);
    0.00 :	  407efa:       addsd  0x1220(%rsp,%rsi,8),%xmm0
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
         :	                                  + 0.25 * z3[i1];
    0.00 :	  407f03:       addsd  (%rax,%r8,8),%xmm8
         :	          u[2*i3+1][2*i2+1][2*i1+1] = u[2*i3+1][2*i2+1][2*i1+1]
         :	                                    + 0.125 * (z3[i1] + z3[i1+1]);
    0.00 :	  407f09:       mulsd  0x2a4f(%rip),%xmm0        # 40a960 <_IO_stdin_used+0x5f0>
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
    0.00 :	  407f11:       movsd  %xmm8,(%rax,%r8,8)
         :	                                  + 0.25 * z3[i1];
         :	          u[2*i3+1][2*i2+1][2*i1+1] = u[2*i3+1][2*i2+1][2*i1+1]
         :	                                    + 0.125 * (z3[i1] + z3[i1+1]);
    0.00 :	  407f17:       addsd  (%rax,%rdi,8),%xmm0
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3+1][2*i2+1][2*i1] = u[2*i3+1][2*i2+1][2*i1]
         :	                                  + 0.25 * z3[i1];
         :	          u[2*i3+1][2*i2+1][2*i1+1] = u[2*i3+1][2*i2+1][2*i1+1]
    0.00 :	  407f1c:       movsd  %xmm0,(%rax,%rdi,8)
    0.00 :	  407f21:       mov    0x98(%rsp),%rcx
    0.00 :	  407f29:       mov    0x40(%rsp),%r10
    0.00 :	  407f2e:       mov    0x50(%rsp),%rsi
    0.00 :	  407f33:       add    %rcx,0x58(%rsp)
    0.00 :	  407f38:       movslq 0x8(%rsp),%rdi
         :	  double z1[M], z2[M], z3[M];
         :
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
    0.00 :	  407f3d:       cmp    %edi,0x90(%rsp)
    0.04 :	  407f44:       jne    407950 <interp+0x260>
    0.00 :	  407f4a:       mov    0xc8(%rsp),%rdx
    0.00 :	  407f52:       mov    %r13,%rbp
    0.00 :	  407f55:       addl   $0x2,0xbc(%rsp)
    0.00 :	  407f5d:       add    %rdx,0x88(%rsp)
    0.00 :	  407f65:       mov    0xbc(%rsp),%eax
    0.00 :	  407f6c:       add    %rdx,%r14
    0.00 :	  407f6f:       add    %rdx,%rbp
         :	  //      parameter( m=535 )
         :	  double z1[M], z2[M], z3[M];
         :
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
    0.00 :	  407f72:       cmp    0xd0(%rsp),%eax
    0.00 :	  407f79:       jne    4078e0 <interp+0x1f0>
         :	                     + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	    }
         :	  }
         :	  if (timeron) timer_stop(T_interp);
    0.00 :	  407f7f:       mov    0x1cc(%rsp),%r9d
    0.00 :	  407f87:       test   %r9d,%r9d
    0.00 :	  407f8a:       jne    409b4e <interp+0x245e>
         :
         :	  if (debug_vec[0] >= 1) {
    0.00 :	  407f90:       mov    0x1c504729(%rip),%r8d        # 1c90c6c0 <debug_vec>
    0.00 :	  407f97:       test   %r8d,%r8d
    0.00 :	  407f9a:       jle    4080a5 <interp+0x9b5>
         :	    rep_nrm(z, mm1, mm2, mm3, "z: inter", k-1);
    0.00 :	  407fa0:       mov    0x1a90(%rsp),%eax
         :	rep_nrm():
         :	//---------------------------------------------------------------------
         :	static void rep_nrm(void *u, int n1, int n2, int n3, char *title, int kk)
         :	{
         :	  double rnm2, rnmu;
         :
         :	  norm2u3(u, n1, n2, n3, &rnm2, &rnmu, nx[kk], ny[kk], nz[kk]);
    0.00 :	  407fa7:       sub    $0x8,%rsp
         :	interp():
         :	    }
         :	  }
         :	  if (timeron) timer_stop(T_interp);
         :
         :	  if (debug_vec[0] >= 1) {
         :	    rep_nrm(z, mm1, mm2, mm3, "z: inter", k-1);
    0.00 :	  407fab:       lea    -0x1(%rax),%ebx
         :	rep_nrm():
         :	//---------------------------------------------------------------------
         :	static void rep_nrm(void *u, int n1, int n2, int n3, char *title, int kk)
         :	{
         :	  double rnm2, rnmu;
         :
         :	  norm2u3(u, n1, n2, n3, &rnm2, &rnmu, nx[kk], ny[kk], nz[kk]);
    0.00 :	  407fae:       movslq %ebx,%rax
    0.00 :	  407fb1:       mov    0x1c90c700(,%rax,4),%edx
    0.00 :	  407fb8:       push   %rdx
    0.00 :	  407fb9:       mov    0x1c90c740(,%rax,4),%edx
    0.00 :	  407fc0:       mov    0x1c90c780(,%rax,4),%eax
    0.00 :	  407fc7:       push   %rdx
    0.00 :	  407fc8:       push   %rax
    0.00 :	  407fc9:       mov    0x1a4(%rsp),%ecx
    0.00 :	  407fd0:       mov    0x6c(%rsp),%edx
    0.00 :	  407fd4:       mov    0x44(%rsp),%esi
    0.00 :	  407fd8:       mov    0x168(%rsp),%rdi
    0.00 :	  407fe0:       lea    0x1f8(%rsp),%r9
    0.00 :	  407fe8:       lea    0x1f0(%rsp),%r8
    0.00 :	  407ff0:       callq  402380 <norm2u3>
         :	  printf(" Level%2d in %8s: norms =%21.14E%21.14E\n", kk, title, rnm2, rnmu);
    0.00 :	  407ff5:       add    $0x20,%rsp
    0.00 :	  407ff9:       mov    $0x40a512,%edx
    0.00 :	  407ffe:       mov    %ebx,%esi
    0.00 :	  408000:       movsd  0x1d8(%rsp),%xmm1
    0.00 :	  408009:       mov    $0x40a748,%edi
    0.00 :	  40800e:       mov    $0x2,%eax
    0.00 :	  408013:       movsd  0x1d0(%rsp),%xmm0
    0.00 :	  40801c:       callq  400750 <printf@plt>
         :	//---------------------------------------------------------------------
         :	static void rep_nrm(void *u, int n1, int n2, int n3, char *title, int kk)
         :	{
         :	  double rnm2, rnmu;
         :
         :	  norm2u3(u, n1, n2, n3, &rnm2, &rnmu, nx[kk], ny[kk], nz[kk]);
    0.00 :	  408021:       sub    $0x8,%rsp
    0.00 :	  408025:       movslq 0x1a98(%rsp),%rax
    0.00 :	  40802d:       mov    0x1c90c700(,%rax,4),%edx
    0.00 :	  408034:       push   %rdx
    0.00 :	  408035:       mov    0x1c90c740(,%rax,4),%edx
    0.00 :	  40803c:       mov    0x1c90c780(,%rax,4),%eax
    0.00 :	  408043:       push   %rdx
    0.00 :	  408044:       push   %rax
    0.00 :	  408045:       mov    0x1aa0(%rsp),%edx
    0.00 :	  40804c:       mov    0x38(%rsp),%rdi
    0.00 :	  408051:       mov    0x1aa8(%rsp),%ecx
    0.00 :	  408058:       mov    0x1e8(%rsp),%esi
    0.00 :	  40805f:       lea    0x1f8(%rsp),%r9
    0.00 :	  408067:       lea    0x1f0(%rsp),%r8
    0.00 :	  40806f:       callq  402380 <norm2u3>
         :	  printf(" Level%2d in %8s: norms =%21.14E%21.14E\n", kk, title, rnm2, rnmu);
    0.00 :	  408074:       add    $0x20,%rsp
    0.00 :	  408078:       mov    $0x40a51b,%edx
    0.00 :	  40807d:       movsd  0x1d8(%rsp),%xmm1
    0.00 :	  408086:       movsd  0x1d0(%rsp),%xmm0
    0.00 :	  40808f:       mov    $0x40a748,%edi
    0.00 :	  408094:       mov    $0x2,%eax
    0.00 :	  408099:       mov    0x1a90(%rsp),%esi
    0.00 :	  4080a0:       callq  400750 <printf@plt>
         :	interp():
         :	  if (debug_vec[0] >= 1) {
         :	    rep_nrm(z, mm1, mm2, mm3, "z: inter", k-1);
         :	    rep_nrm(u, n1, n2, n3, "u: inter", k);
         :	  }
         :
         :	  if (debug_vec[5] >= k) {
    0.00 :	  4080a5:       mov    0x1a90(%rsp),%eax
    0.00 :	  4080ac:       cmp    %eax,0x1c504622(%rip)        # 1c90c6d4 <debug_vec+0x14>
    0.00 :	  4080b2:       jge    409b79 <interp+0x2489>
         :	    showall(z, mm1, mm2, mm3);
         :	    showall(u, n1, n2, n3);
         :	  }
         :	}
    0.00 :	  4080b8:       add    $0x1a48,%rsp
    0.00 :	  4080bf:       pop    %rbx
    0.00 :	  4080c0:       pop    %rbp
    0.00 :	  4080c1:       pop    %r12
    0.00 :	  4080c3:       pop    %r13
    0.00 :	  4080c5:       pop    %r14
    0.00 :	  4080c7:       pop    %r15
    0.00 :	  4080c9:       retq   
         :	    if (n1 == 3) {
         :	      d1 = 2;
         :	      t1 = 1;
         :	    } else {
         :	      d1 = 1;
         :	      t1 = 0;
    0.00 :	  4080ca:       xor    %eax,%eax
    0.00 :	  4080cc:       cmpl   $0x3,0x1c8(%rsp)
    0.00 :	  4080d4:       sete   %al
    0.00 :	  4080d7:       mov    %eax,0x138(%rsp)
    0.00 :	  4080de:       add    $0x1,%eax
    0.00 :	  4080e1:       mov    %eax,0x48(%rsp)
         :	    if (n2 == 3) {
         :	      d2 = 2;
         :	      t2 = 1;
         :	    } else {
         :	      d2 = 1;
         :	      t2 = 0;
    0.00 :	  4080e5:       xor    %eax,%eax
    0.00 :	  4080e7:       cmpl   $0x3,0x1a80(%rsp)
    0.00 :	  4080ef:       sete   %al
    0.00 :	  4080f2:       mov    %eax,0xbc(%rsp)
    0.00 :	  4080f9:       add    $0x1,%eax
    0.00 :	  4080fc:       mov    %eax,0xb8(%rsp)
         :	    }
         :
         :	    if (n3 == 3) {
    0.00 :	  408103:       xor    %eax,%eax
    0.00 :	  408105:       cmpl   $0x3,0x1a88(%rsp)
    0.00 :	  40810d:       sete   %al
    0.00 :	  408110:       mov    %eax,0x130(%rsp)
    0.00 :	  408117:       add    $0x1,%eax
    0.00 :	  40811a:       mov    %eax,0x124(%rsp)
         :	    } else {
         :	      d3 = 1;
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
    0.00 :	  408121:       mov    0x184(%rsp),%ebx
    0.00 :	  408128:       cmp    %ebx,%eax
    0.00 :	  40812a:       jge    409dde <interp+0x26ee>
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  408130:       mov    0x188(%rsp),%rdx
    0.00 :	  408138:       mov    0x24(%rsp),%r8d
    0.00 :	  40813d:       sub    $0x1,%eax
    0.00 :	  408140:       mov    0x48(%rsp),%r15d
    0.00 :	  408145:       mov    %eax,0x120(%rsp)
    0.00 :	  40814c:       lea    -0x1(%rbx),%eax
    0.00 :	  40814f:       shr    $0x3,%rdx
    0.00 :	  408153:       lea    -0x1(%r8),%ebx
    0.00 :	  408157:       mov    %r8d,%edi
    0.00 :	  40815a:       mov    %eax,0x150(%rsp)
    0.00 :	  408161:       mov    %rdx,0x8(%rsp)
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  408166:       mov    0x98(%rsp),%rdx
    0.00 :	  40816e:       sub    %r15d,%edi
    0.00 :	  408171:       lea    (%rdi,%rdi,1),%rax
    0.00 :	  408175:       mov    %ebx,0x140(%rsp)
    0.00 :	  40817c:       shr    $0x3,%rdx
    0.00 :	  408180:       mov    %rax,0xd0(%rsp)
    0.00 :	  408188:       mov    %rdx,0x10(%rsp)
    0.00 :	  40818d:       mov    %ebx,%edx
    0.00 :	  40818f:       sub    %r15d,%edx
    0.00 :	  408192:       mov    %edx,%eax
    0.00 :	  408194:       mov    %edx,%esi
    0.00 :	  408196:       mov    %edx,0x68(%rsp)
    0.00 :	  40819a:       shr    %eax
    0.00 :	  40819c:       shl    $0x4,%rax
    0.00 :	  4081a0:       mov    %rax,%r13
    0.00 :	  4081a3:       mov    %edx,%eax
    0.00 :	  4081a5:       mov    $0x10,%edx
    0.00 :	  4081aa:       and    $0xfffffffe,%eax
    0.00 :	  4081ad:       add    %r15d,%eax
    0.00 :	  4081b0:       cmp    $0x1,%r8d
    0.00 :	  4081b4:       mov    %eax,%ecx
    0.00 :	  4081b6:       mov    %eax,0xb0(%rsp)
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  4081bd:       mov    %r15d,%eax
    0.00 :	  4081c0:       not    %eax
    0.00 :	  4081c2:       lea    (%rax,%rcx,2),%eax
    0.00 :	  4081c5:       mov    %eax,0x78(%rsp)
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  4081c9:       mov    %ecx,%eax
    0.00 :	  4081cb:       lea    -0x1(%rcx),%ecx
    0.00 :	  4081ce:       mov    %ecx,0x88(%rsp)
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4081d5:       lea    0x1(%rax),%ecx
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  4081d8:       mov    %r15d,%eax
    0.00 :	  4081db:       not    %eax
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4081dd:       mov    %ecx,0x90(%rsp)
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  4081e4:       lea    (%rax,%rcx,2),%eax
    0.00 :	  4081e7:       mov    %eax,0xc8(%rsp)
    0.00 :	  4081ee:       lea    (%rsi,%rsi,1),%rax
    0.00 :	  4081f2:       mov    %rax,0x118(%rsp)
    0.00 :	  4081fa:       mov    %ebx,%eax
    0.00 :	  4081fc:       lea    0x8(,%rax,8),%rcx
    0.00 :	  408204:       cmovg  %rcx,%rdx
    0.00 :	  408208:       shl    $0x4,%rax
    0.00 :	  40820c:       sub    $0x8,%rax
    0.00 :	  408210:       cmp    $0x1,%r8d
    0.00 :	  408214:       mov    %rdx,0x58(%rsp)
    0.00 :	  408219:       mov    $0x8,%edx
    0.00 :	  40821e:       cmovg  %rax,%rdx
    0.00 :	  408222:       mov    $0x1,%eax
    0.00 :	  408227:       cmovg  %ebx,%eax
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
    0.00 :	  40822a:       mov    0x138(%rsp),%ebx
    0.00 :	  408231:       mov    %rdx,0x60(%rsp)
    0.00 :	  408236:       sub    $0x1,%eax
    0.00 :	  408239:       mov    %eax,%edx
    0.00 :	  40823b:       and    $0xfffffffe,%eax
    0.00 :	  40823e:       shr    %edx
    0.00 :	  408240:       lea    0x1(%rax),%ecx
    0.00 :	  408243:       mov    %eax,0xa0(%rsp)
    0.00 :	  40824a:       shl    $0x4,%rdx
    0.00 :	  40824e:       mov    %ecx,0x70(%rsp)
    0.00 :	  408252:       mov    %rdx,%r14
    0.00 :	  408255:       mov    %eax,%edx
    0.00 :	  408257:       mov    %ebx,%eax
    0.00 :	  408259:       not    %eax
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  40825b:       add    $0x2,%edx
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
    0.00 :	  40825e:       lea    (%rax,%rcx,2),%eax
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  408261:       mov    %edx,0xa8(%rsp)
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
    0.00 :	  408268:       mov    %eax,0x80(%rsp)
    0.00 :	  40826f:       mov    %ebx,%eax
    0.00 :	  408271:       not    %eax
    0.00 :	  408273:       lea    (%rax,%rdx,2),%eax
    0.00 :	  408276:       mov    %eax,0xc0(%rsp)
    0.00 :	  40827d:       movslq %r15d,%rax
    0.00 :	  408280:       mov    %r14,%r15
    0.00 :	  408283:       mov    %r13,%r14
    0.00 :	  408286:       add    %rax,%rdi
    0.00 :	  408289:       lea    0x0(,%rax,8),%rdx
    0.00 :	  408291:       mov    %rax,0x38(%rsp)
    0.00 :	  408296:       lea    0x0(,%rdi,8),%rax
    0.00 :	  40829e:       mov    %rdx,0x108(%rsp)
    0.00 :	  4082a6:       mov    $0x1,%edx
    0.00 :	  4082ab:       mov    %rax,0x128(%rsp)
    0.00 :	  4082b3:       lea    0x8(,%rsi,8),%rax
    0.00 :	  4082bb:       mov    %rax,0x110(%rsp)
    0.00 :	  4082c3:       mov    $0x1,%eax
    0.00 :	  4082c8:       sub    %ebx,%eax
    0.00 :	  4082ca:       mov    %rdi,0xf8(%rsp)
    0.00 :	  4082d2:       cltq   
    0.00 :	  4082d4:       mov    %rax,0x100(%rsp)
    0.00 :	  4082dc:       movslq %ebx,%rax
    0.00 :	  4082df:       sub    %rax,%rdx
    0.00 :	  4082e2:       mov    %rdx,0xd8(%rsp)
    0.00 :	  4082ea:       movapd 0x25ae(%rip),%xmm1        # 40a8a0 <_IO_stdin_used+0x530>
    0.00 :	  4082f2:       nopw   0x0(%rax,%rax,1)
         :	      d3 = 1;
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
    0.00 :	  4082f8:       mov    0x4c(%rsp),%edi
    0.00 :	  4082fc:       mov    0xb8(%rsp),%ebx
    0.00 :	  408303:       cmp    %ebx,%edi
    0.00 :	  408305:       jle    409a20 <interp+0x2330>
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  40830b:       movslq 0x120(%rsp),%rbp
    0.00 :	  408313:       mov    $0x1,%eax
    0.00 :	  408318:       mov    0x18(%rsp),%rdx
    0.00 :	  40831d:       sub    $0x1,%ebx
    0.00 :	  408320:       sub    0x124(%rsp),%eax
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  408327:       mov    0x148(%rsp),%r10
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  40832f:       lea    (%rax,%rbp,2),%eax
    0.00 :	  408332:       imul   0x170(%rsp),%rbp
    0.00 :	  40833b:       cltq   
    0.00 :	  40833d:       imul   0x168(%rsp),%rax
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  408346:       lea    (%r10,%rbp,8),%rcx
    0.00 :	  40834a:       mov    %rbp,0x28(%rsp)
    0.00 :	  40834f:       mov    %r10,%rbp
    0.00 :	  408352:       mov    %rax,%rsi
    0.00 :	  408355:       mov    %rax,0x40(%rsp)
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  40835a:       lea    (%rdx,%rax,8),%rdx
    0.00 :	  40835e:       lea    -0x1(%rdi),%eax
    0.00 :	  408361:       mov    %eax,0x30(%rsp)
    0.00 :	  408365:       mov    0xd0(%rsp),%rax
    0.00 :	  40836d:       add    0x38(%rsp),%rax
    0.00 :	  408372:       add    %rsi,%rax
    0.00 :	  408375:       mov    %rax,0x50(%rsp)
    0.00 :	  40837a:       mov    0xd8(%rsp),%rax
    0.00 :	  408382:       add    %rsi,%rax
    0.00 :	  408385:       mov    %rax,0xe0(%rsp)
    0.00 :	  40838d:       nopl   (%rax)
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  408390:       cmp    0x48(%rsp),%r8d
    0.00 :	  408395:       jle    4098e8 <interp+0x21f8>
    0.00 :	  40839b:       mov    $0x1,%eax
    0.00 :	  4083a0:       sub    0xb8(%rsp),%eax
    0.00 :	  4083a7:       mov    0x8(%rsp),%r12
    0.00 :	  4083ac:       movslq %ebx,%r10
    0.00 :	  4083af:       lea    (%rax,%rbx,2),%r9d
    0.00 :	  4083b3:       mov    0x38(%rsp),%r13
    0.00 :	  4083b8:       mov    0x40(%rsp),%rax
    0.00 :	  4083bd:       movslq %r9d,%r9
    0.00 :	  4083c0:       mov    0x18(%rsp),%rsi
    0.00 :	  4083c5:       mov    0x10(%rsp),%r11
    0.00 :	  4083ca:       imul   %r9,%r12
    0.00 :	  4083ce:       add    %r13,%rax
    0.00 :	  4083d1:       mov    0x50(%rsp),%rdi
    0.00 :	  4083d6:       imul   %r10,%r11
    0.00 :	  4083da:       add    %r12,%rax
    0.00 :	  4083dd:       add    %r12,%rdi
    0.00 :	  4083e0:       lea    -0x8(%rsi,%rax,8),%rax
    0.00 :	  4083e5:       mov    0x28(%rsp),%rsi
    0.00 :	  4083ea:       add    %r13,%rsi
    0.00 :	  4083ed:       mov    0x18(%rsp),%r13
    0.00 :	  4083f2:       add    %r11,%rsi
    0.00 :	  4083f5:       lea    -0x10(%r13,%rdi,8),%rdi
    0.00 :	  4083fa:       lea    -0x8(%rbp,%rsi,8),%rsi
    0.00 :	  4083ff:       cmp    %rdi,%rsi
    0.00 :	  408402:       mov    0x28(%rsp),%rdi
    0.00 :	  408407:       setae  %r13b
    0.00 :	  40840b:       add    0xf8(%rsp),%rdi
    0.00 :	  408413:       add    %r11,%rdi
    0.00 :	  408416:       lea    -0x8(%rbp,%rdi,8),%rdi
    0.00 :	  40841b:       cmp    %rdi,%rax
    0.00 :	  40841e:       setae  %dil
    0.00 :	  408422:       or     %dil,%r13b
    0.00 :	  408425:       je     409970 <interp+0x2280>
    0.00 :	  40842b:       cmpl   $0x16,0x68(%rsp)
    0.00 :	  408430:       jbe    409970 <interp+0x2280>
    0.00 :	  408436:       xor    %edi,%edi
    0.00 :	  408438:       nopl   0x0(%rax,%rax,1)
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  408440:       movupd (%rax,%rdi,2),%xmm0
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  408445:       movupd (%rsi,%rdi,1),%xmm7
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  40844a:       movhpd 0x10(%rax,%rdi,2),%xmm0
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  408450:       addpd  %xmm7,%xmm0
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408454:       movlpd %xmm0,(%rax,%rdi,2)
    0.00 :	  408459:       movhpd %xmm0,0x10(%rax,%rdi,2)
    0.00 :	  40845f:       add    $0x10,%rdi
    0.00 :	  408463:       cmp    %r14,%rdi
    0.00 :	  408466:       jne    408440 <interp+0xd50>
    0.00 :	  408468:       mov    0x8(%rsp),%r11
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  40846d:       mov    0x10(%rsp),%rdi
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408472:       movslq 0x78(%rsp),%rax
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  408477:       movslq 0x88(%rsp),%rsi
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  40847f:       imul   %r9,%r11
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  408483:       imul   %r10,%rdi
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408487:       add    %r11,%rax
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  40848a:       add    %rdi,%rsi
    0.00 :	  40848d:       movsd  (%rcx,%rsi,8),%xmm0
    0.00 :	  408492:       addsd  (%rdx,%rax,8),%xmm0
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408497:       movsd  %xmm0,(%rdx,%rax,8)
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  40849c:       cmp    0x90(%rsp),%r8d
    0.00 :	  4084a4:       jle    4084cd <interp+0xddd>
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  4084a6:       movslq 0xc8(%rsp),%rax
    0.00 :	  4084ae:       add    %rax,%r11
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  4084b1:       movslq 0xb0(%rsp),%rax
    0.00 :	  4084b9:       movsd  (%rdx,%r11,8),%xmm0
    0.00 :	  4084bf:       add    %rax,%rdi
    0.00 :	  4084c2:       addsd  (%rcx,%rdi,8),%xmm0
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  4084c7:       movsd  %xmm0,(%rdx,%r11,8)
    0.00 :	  4084cd:       mov    0x10(%rsp),%r12
    0.00 :	  4084d2:       mov    0x8(%rsp),%r13
    0.00 :	  4084d7:       mov    0x28(%rsp),%rax
    0.00 :	  4084dc:       imul   %r10,%r12
    0.00 :	  4084e0:       imul   %r9,%r13
    0.00 :	  4084e4:       lea    (%rax,%r12,1),%rdi
    0.00 :	  4084e8:       mov    0xe0(%rsp),%rax
    0.00 :	  4084f0:       shl    $0x3,%rdi
    0.00 :	  4084f4:       lea    (%rax,%r13,1),%rsi
    0.00 :	  4084f8:       mov    0x18(%rsp),%rax
    0.00 :	  4084fd:       lea    0x0(%rbp,%rdi,1),%r11
    0.00 :	  408502:       add    0x58(%rsp),%rdi
    0.00 :	  408507:       shl    $0x3,%rsi
    0.00 :	  40850b:       add    %rbp,%rdi
    0.00 :	  40850e:       add    %rsi,%rax
    0.00 :	  408511:       cmp    %rdi,%rax
    0.00 :	  408514:       setae  %dil
    0.00 :	  408518:       add    0x60(%rsp),%rsi
    0.00 :	  40851d:       add    0x18(%rsp),%rsi
    0.00 :	  408522:       cmp    %rsi,%r11
    0.00 :	  408525:       setae  %sil
    0.00 :	  408529:       or     %sil,%dil
    0.00 :	  40852c:       je     409918 <interp+0x2228>
    0.00 :	  408532:       cmp    $0x5,%r8d
    0.00 :	  408536:       jle    409918 <interp+0x2228>
    0.00 :	  40853c:       mov    0x28(%rsp),%rsi
    0.00 :	  408541:       lea    0x1(%rsi,%r12,1),%rsi
    0.00 :	  408546:       lea    0x0(%rbp,%rsi,8),%rdi
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  40854b:       xor    %esi,%esi
    0.00 :	  40854d:       nopl   (%rax)
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408550:       movupd (%rdi,%rsi,1),%xmm0
    0.00 :	  408555:       movupd (%r11,%rsi,1),%xmm6
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
    0.00 :	  40855b:       movupd (%rax,%rsi,2),%xmm2
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408560:       addpd  %xmm6,%xmm0
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
    0.00 :	  408564:       movhpd 0x10(%rax,%rsi,2),%xmm2
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  40856a:       mulpd  %xmm1,%xmm0
    0.00 :	  40856e:       addpd  %xmm2,%xmm0
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  408572:       movlpd %xmm0,(%rax,%rsi,2)
    0.00 :	  408577:       movhpd %xmm0,0x10(%rax,%rsi,2)
    0.00 :	  40857d:       add    $0x10,%rsi
    0.00 :	  408581:       cmp    %r15,%rsi
    0.00 :	  408584:       jne    408550 <interp+0xe60>
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408586:       imul   0x10(%rsp),%r10
    0.00 :	  40858c:       movslq 0x70(%rsp),%rsi
    0.00 :	  408591:       movslq 0xa0(%rsp),%rdi
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  408599:       imul   0x8(%rsp),%r9
    0.00 :	  40859f:       movslq 0x80(%rsp),%rax
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4085a7:       movsd  0x23a9(%rip),%xmm2        # 40a958 <_IO_stdin_used+0x5e8>
    0.00 :	  4085af:       add    %r10,%rdi
    0.00 :	  4085b2:       add    %r10,%rsi
    0.00 :	  4085b5:       movsd  (%rcx,%rsi,8),%xmm0
    0.00 :	  4085ba:       addsd  (%rcx,%rdi,8),%xmm0
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  4085bf:       add    %r9,%rax
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  4085c2:       mov    0xa8(%rsp),%edi
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4085c9:       mulsd  %xmm2,%xmm0
    0.00 :	  4085cd:       addsd  (%rdx,%rax,8),%xmm0
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  4085d2:       movsd  %xmm0,(%rdx,%rax,8)
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  4085d7:       cmp    %r8d,%edi
    0.00 :	  4085da:       jge    408608 <interp+0xf18>
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  4085dc:       movslq 0xc0(%rsp),%rax
    0.00 :	  4085e4:       add    %rax,%r9
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4085e7:       movslq %edi,%rax
    0.00 :	  4085ea:       add    %rax,%r10
    0.00 :	  4085ed:       movsd  (%rcx,%r10,8),%xmm0
    0.00 :	  4085f3:       addsd  (%rcx,%rsi,8),%xmm0
    0.00 :	  4085f8:       mulsd  %xmm2,%xmm0
    0.00 :	  4085fc:       addsd  (%rdx,%r9,8),%xmm0
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  408602:       movsd  %xmm0,(%rdx,%r9,8)
    0.00 :	  408608:       add    $0x1,%ebx
         :	      d3 = 1;
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
    0.00 :	  40860b:       cmp    0x30(%rsp),%ebx
    0.00 :	  40860f:       jne    408390 <interp+0xca0>
    0.00 :	  408615:       mov    0x98(%rsp),%rax
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  40861d:       mov    %rcx,%rdi
    0.00 :	  408620:       mov    $0x1,%ebp
    0.00 :	  408625:       movq   $0x0,0x40(%rsp)
    0.00 :	  40862e:       mov    %r15,0xf0(%rsp)
    0.00 :	  408636:       movapd 0x2252(%rip),%xmm3        # 40a890 <_IO_stdin_used+0x520>
    0.00 :	  40863e:       lea    (%rcx,%rax,1),%rsi
    0.00 :	  408642:       mov    0x108(%rsp),%rax
    0.00 :	  40864a:       movapd 0x224e(%rip),%xmm2        # 40a8a0 <_IO_stdin_used+0x530>
    0.00 :	  408652:       mov    %rsi,0xe0(%rsp)
    0.00 :	  40865a:       sub    $0x8,%rax
    0.00 :	  40865e:       mov    %rax,0xe8(%rsp)
    0.00 :	  408666:       mov    0x128(%rsp),%rax
    0.00 :	  40866e:       sub    $0x8,%rax
    0.00 :	  408672:       mov    %rax,0x50(%rsp)
    0.00 :	  408677:       nopw   0x0(%rax,%rax,1)
    0.00 :	  408680:       mov    %ebp,0x28(%rsp)
    0.00 :	  408684:       cmp    0x48(%rsp),%r8d
    0.00 :	  408689:       jle    4099c0 <interp+0x22d0>
    0.00 :	  40868f:       mov    0xbc(%rsp),%eax
    0.00 :	  408696:       mov    0x8(%rsp),%r9
    0.00 :	  40869b:       mov    0x38(%rsp),%rbx
    0.00 :	  4086a0:       mov    0xe8(%rsp),%r13
    0.00 :	  4086a8:       not    %eax
    0.00 :	  4086aa:       lea    (%rax,%rbp,2),%r10d
    0.00 :	  4086ae:       mov    0x40(%rsp),%eax
    0.00 :	  4086b2:       lea    0x0(%r13,%rsi,1),%r11
    0.00 :	  4086b7:       movslq %r10d,%r10
    0.00 :	  4086ba:       imul   %r10,%r9
    0.00 :	  4086be:       mov    %eax,0x30(%rsp)
    0.00 :	  4086c2:       mov    0xd0(%rsp),%rax
    0.00 :	  4086ca:       add    %rbx,%rax
    0.00 :	  4086cd:       add    %r9,%rax
    0.00 :	  4086d0:       add    %rbx,%r9
    0.00 :	  4086d3:       lea    0x0(%r13,%rdi,1),%rbx
    0.00 :	  4086d8:       mov    0x50(%rsp),%r13
    0.00 :	  4086dd:       shl    $0x3,%r9
    0.00 :	  4086e1:       lea    -0x10(%rdx,%rax,8),%r15
    0.00 :	  4086e6:       lea    0x0(%r13,%rsi,1),%r12
    0.00 :	  4086eb:       lea    -0x8(%rdx,%r9,1),%rax
    0.00 :	  4086f0:       cmp    %r12,%rax
    0.00 :	  4086f3:       setae  %r13b
    0.00 :	  4086f7:       cmp    %r11,%r15
    0.00 :	  4086fa:       setbe  %r12b
    0.00 :	  4086fe:       or     %r12d,%r13d
    0.00 :	  408701:       mov    0x50(%rsp),%r12
    0.00 :	  408706:       add    %rdi,%r12
    0.00 :	  408709:       cmp    %r12,%rax
    0.00 :	  40870c:       setae  %r12b
    0.00 :	  408710:       cmp    %rbx,%r15
    0.00 :	  408713:       setbe  %r15b
    0.00 :	  408717:       or     %r15d,%r12d
    0.00 :	  40871a:       test   %r12b,%r13b
    0.00 :	  40871d:       je     409890 <interp+0x21a0>
    0.00 :	  408723:       cmpl   $0x3,0x68(%rsp)
    0.00 :	  408728:       jbe    409890 <interp+0x21a0>
    0.00 :	  40872e:       xor    %r9d,%r9d
    0.00 :	  408731:       nopl   0x0(%rax)
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408738:       movupd (%r11,%r9,1),%xmm0
    0.00 :	  40873e:       movupd (%rbx,%r9,1),%xmm7
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
    0.00 :	  408744:       movupd (%rax,%r9,2),%xmm4
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  40874a:       addpd  %xmm7,%xmm0
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
    0.00 :	  40874e:       movhpd 0x10(%rax,%r9,2),%xmm4
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408755:       mulpd  %xmm2,%xmm0
    0.00 :	  408759:       addpd  %xmm4,%xmm0
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  40875d:       movlpd %xmm0,(%rax,%r9,2)
    0.00 :	  408763:       movhpd %xmm0,0x10(%rax,%r9,2)
    0.00 :	  40876a:       add    $0x10,%r9
    0.00 :	  40876e:       cmp    %r14,%r9
    0.00 :	  408771:       jne    408738 <interp+0x1048>
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408773:       mov    0x10(%rsp),%r15
    0.00 :	  408778:       movslq 0x28(%rsp),%r11
    0.00 :	  40877d:       movslq 0x30(%rsp),%rbx
    0.00 :	  408782:       movslq 0x88(%rsp),%r9
    0.00 :	  40878a:       imul   %r15,%r11
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  40878e:       mov    0x8(%rsp),%r12
    0.00 :	  408793:       movslq 0x78(%rsp),%rax
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408798:       imul   %r15,%rbx
    0.00 :	  40879c:       movsd  0x21b4(%rip),%xmm4        # 40a958 <_IO_stdin_used+0x5e8>
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  4087a4:       imul   %r10,%r12
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4087a8:       lea    (%r9,%r11,1),%r13
    0.00 :	  4087ac:       add    %rbx,%r9
    0.00 :	  4087af:       movsd  (%rcx,%r13,8),%xmm0
    0.00 :	  4087b5:       addsd  (%rcx,%r9,8),%xmm0
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  4087bb:       add    %r12,%rax
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4087be:       mulsd  %xmm4,%xmm0
    0.00 :	  4087c2:       addsd  (%rdx,%rax,8),%xmm0
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  4087c7:       movsd  %xmm0,(%rdx,%rax,8)
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4087cc:       cmp    0x90(%rsp),%r8d
    0.00 :	  4087d4:       jle    40880a <interp+0x111a>
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  4087d6:       movslq 0xc8(%rsp),%rax
    0.00 :	  4087de:       add    %rax,%r12
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4087e1:       movslq 0xb0(%rsp),%rax
    0.00 :	  4087e9:       add    %rax,%r11
    0.00 :	  4087ec:       add    %rax,%rbx
    0.00 :	  4087ef:       movsd  (%rcx,%r11,8),%xmm0
    0.00 :	  4087f5:       addsd  (%rcx,%rbx,8),%xmm0
    0.00 :	  4087fa:       mulsd  %xmm4,%xmm0
    0.00 :	  4087fe:       addsd  (%rdx,%r12,8),%xmm0
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  408804:       movsd  %xmm0,(%rdx,%r12,8)
    0.00 :	  40880a:       mov    0x8(%rsp),%r12
    0.00 :	  40880f:       mov    0xd8(%rsp),%rax
    0.00 :	  408817:       mov    0x60(%rsp),%rbx
    0.00 :	  40881c:       mov    0x58(%rsp),%r15
    0.00 :	  408821:       imul   %r10,%r12
    0.00 :	  408825:       lea    (%r15,%rsi,1),%r9
    0.00 :	  408829:       add    %r12,%rax
    0.00 :	  40882c:       shl    $0x3,%rax
    0.00 :	  408830:       lea    (%rax,%rbx,1),%r11
    0.00 :	  408834:       add    %rdx,%rax
    0.00 :	  408837:       add    %rdx,%r11
    0.00 :	  40883a:       cmp    %r9,%rax
    0.00 :	  40883d:       setae  %bl
    0.00 :	  408840:       cmp    %rsi,%r11
    0.00 :	  408843:       setbe  %r9b
    0.00 :	  408847:       or     %r9d,%ebx
    0.00 :	  40884a:       mov    %rsi,%r9
    0.00 :	  40884d:       sub    0xe0(%rsp),%r9
    0.00 :	  408855:       add    %r15,%r9
    0.00 :	  408858:       add    %rcx,%r9
    0.00 :	  40885b:       cmp    %r9,%rax
    0.00 :	  40885e:       setae  %r9b
    0.00 :	  408862:       cmp    %rdi,%r11
    0.00 :	  408865:       setbe  %r11b
    0.00 :	  408869:       or     %r11d,%r9d
    0.00 :	  40886c:       test   %r9b,%bl
    0.00 :	  40886f:       je     409820 <interp+0x2130>
    0.00 :	  408875:       cmp    $0x4,%r8d
    0.00 :	  408879:       jle    409820 <interp+0x2130>
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  40887f:       mov    0xf0(%rsp),%r12
    0.00 :	  408887:       lea    0x8(%rsi),%rbx
    0.00 :	  40888b:       lea    0x8(%rdi),%r11
    0.00 :	  40888f:       xor    %r9d,%r9d
    0.00 :	  408892:       nopw   0x0(%rax,%rax,1)
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  408898:       movupd (%r11,%r9,1),%xmm6
    0.00 :	  40889e:       movupd (%rbx,%r9,1),%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4088a4:       movupd (%rsi,%r9,1),%xmm7
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
    0.00 :	  4088aa:       movupd (%rax,%r9,2),%xmm4
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  4088b0:       addpd  %xmm6,%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4088b4:       movupd (%rdi,%r9,1),%xmm6
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
    0.00 :	  4088ba:       movhpd 0x10(%rax,%r9,2),%xmm4
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4088c1:       addpd  %xmm7,%xmm0
    0.00 :	  4088c5:       addpd  %xmm6,%xmm0
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  4088c9:       mulpd  %xmm3,%xmm0
    0.00 :	  4088cd:       addpd  %xmm4,%xmm0
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  4088d1:       movlpd %xmm0,(%rax,%r9,2)
    0.00 :	  4088d7:       movhpd %xmm0,0x10(%rax,%r9,2)
    0.00 :	  4088de:       add    $0x10,%r9
    0.00 :	  4088e2:       cmp    %r12,%r9
    0.00 :	  4088e5:       jne    408898 <interp+0x11a8>
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  4088e7:       mov    0x10(%rsp),%r15
    0.00 :	  4088ec:       movslq 0x28(%rsp),%r9
    0.00 :	  4088f1:       movslq 0x30(%rsp),%rax
    0.00 :	  4088f6:       movslq 0x70(%rsp),%rbx
    0.00 :	  4088fb:       imul   %r15,%r9
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4088ff:       movslq 0xa0(%rsp),%r12
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  408907:       movslq 0x80(%rsp),%r11
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  40890f:       imul   %r15,%rax
    0.00 :	  408913:       movsd  0x2035(%rip),%xmm4        # 40a950 <_IO_stdin_used+0x5e0>
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  40891b:       imul   0x8(%rsp),%r10
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408921:       lea    (%r12,%r9,1),%r15
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  408925:       lea    (%rbx,%r9,1),%r13
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408929:       add    %rax,%r12
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  40892c:       add    %rax,%rbx
    0.00 :	  40892f:       movsd  (%rcx,%r13,8),%xmm0
    0.00 :	  408935:       addsd  (%rcx,%rbx,8),%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  40893a:       addsd  (%rcx,%r15,8),%xmm0
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  408940:       add    %r10,%r11
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408943:       addsd  (%rcx,%r12,8),%xmm0
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  408949:       mov    0xa8(%rsp),%r15d
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  408951:       mulsd  %xmm4,%xmm0
    0.00 :	  408955:       addsd  (%rdx,%r11,8),%xmm0
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  40895b:       movsd  %xmm0,(%rdx,%r11,8)
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  408961:       cmp    %r8d,%r15d
    0.00 :	  408964:       jge    4089a0 <interp+0x12b0>
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  408966:       movslq 0xc0(%rsp),%r11
    0.00 :	  40896e:       add    %r11,%r10
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  408971:       movslq %r15d,%r11
    0.00 :	  408974:       add    %r11,%r9
    0.00 :	  408977:       add    %r11,%rax
    0.00 :	  40897a:       movsd  (%rcx,%r9,8),%xmm0
    0.00 :	  408980:       addsd  (%rcx,%rax,8),%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408985:       addsd  (%rcx,%r13,8),%xmm0
    0.00 :	  40898b:       addsd  (%rcx,%rbx,8),%xmm0
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  408990:       mulsd  %xmm4,%xmm0
    0.00 :	  408994:       addsd  (%rdx,%r10,8),%xmm0
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  40899a:       movsd  %xmm0,(%rdx,%r10,8)
    0.00 :	  4089a0:       mov    0x98(%rsp),%rax
    0.00 :	  4089a8:       addq   $0x1,0x40(%rsp)
    0.00 :	  4089ae:       add    $0x1,%rbp
    0.00 :	  4089b2:       add    %rax,%rsi
    0.00 :	  4089b5:       add    %rax,%rdi
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
    0.00 :	  4089b8:       cmp    %ebp,0x4c(%rsp)
    0.00 :	  4089bc:       jg     408680 <interp+0xf90>
    0.00 :	  4089c2:       mov    0xf0(%rsp),%r15
    0.00 :	  4089ca:       addl   $0x1,0x120(%rsp)
    0.00 :	  4089d2:       mov    0x120(%rsp),%eax
         :	    } else {
         :	      d3 = 1;
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
    0.00 :	  4089d9:       cmp    0x150(%rsp),%eax
    0.00 :	  4089e0:       jne    4082f8 <interp+0xc08>
    0.00 :	  4089e6:       mov    $0x1,%edi
    0.00 :	  4089eb:       mov    0x24(%rsp),%r10d
    0.00 :	  4089f0:       mov    0x48(%rsp),%ecx
    0.00 :	  4089f4:       mov    %edi,%eax
    0.00 :	  4089f6:       sub    0x130(%rsp),%eax
    0.00 :	  4089fd:       mov    0x148(%rsp),%r15
    0.00 :	  408a05:       mov    0x140(%rsp),%ebx
    0.00 :	  408a0c:       mov    %eax,0x180(%rsp)
    0.00 :	  408a13:       mov    %r10d,%esi
    0.00 :	  408a16:       mov    0x170(%rsp),%rax
    0.00 :	  408a1e:       sub    %ecx,%esi
    0.00 :	  408a20:       mov    %ebx,%edx
    0.00 :	  408a22:       lea    (%r15,%rax,8),%rax
    0.00 :	  408a26:       sub    %ecx,%edx
    0.00 :	  408a28:       mov    %rax,0x190(%rsp)
    0.00 :	  408a30:       lea    (%rsi,%rsi,1),%rax
    0.00 :	  408a34:       mov    %rax,0x130(%rsp)
    0.00 :	  408a3c:       mov    %edx,%eax
    0.00 :	  408a3e:       shr    %eax
    0.00 :	  408a40:       mov    %edx,0xd8(%rsp)
    0.00 :	  408a47:       shl    $0x4,%rax
    0.00 :	  408a4b:       mov    %rax,0x110(%rsp)
    0.00 :	  408a53:       mov    %edx,%eax
    0.00 :	  408a55:       and    $0xfffffffe,%eax
    0.00 :	  408a58:       add    %ecx,%eax
    0.00 :	  408a5a:       mov    %eax,%r14d
    0.00 :	  408a5d:       mov    %eax,0x150(%rsp)
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  408a64:       mov    %ecx,%eax
    0.00 :	  408a66:       not    %eax
    0.00 :	  408a68:       lea    (%rax,%r14,2),%eax
    0.00 :	  408a6c:       mov    %eax,0xe8(%rsp)
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408a73:       mov    %r14d,%eax
    0.00 :	  408a76:       lea    -0x1(%r14),%r14d
    0.00 :	  408a7a:       mov    %r14d,0xf0(%rsp)
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  408a82:       lea    0x1(%rax),%r14d
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  408a86:       mov    %ecx,%eax
    0.00 :	  408a88:       mov    $0x8,%ecx
    0.00 :	  408a8d:       not    %eax
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  408a8f:       mov    %r14d,0x120(%rsp)
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  408a97:       lea    (%rax,%r14,2),%eax
    0.00 :	  408a9b:       mov    %eax,0x124(%rsp)
    0.00 :	  408aa2:       mov    %edx,%eax
    0.00 :	  408aa4:       mov    %ebx,%edx
    0.00 :	  408aa6:       lea    0x8(,%rax,8),%rax
    0.00 :	  408aae:       mov    %rax,0x158(%rsp)
    0.00 :	  408ab6:       mov    %rdx,%rax
    0.00 :	  408ab9:       lea    0x8(,%rdx,8),%rdx
    0.00 :	  408ac1:       shl    $0x4,%rax
    0.00 :	  408ac5:       sub    $0x8,%rax
    0.00 :	  408ac9:       cmp    $0x1,%r10d
    0.00 :	  408acd:       cmovg  %rax,%rcx
    0.00 :	  408ad1:       mov    $0x10,%eax
    0.00 :	  408ad6:       cmovle %edi,%ebx
    0.00 :	  408ad9:       cmovg  %rdx,%rax
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408add:       xor    %r13d,%r13d
    0.00 :	  408ae0:       mov    %rcx,0xc0(%rsp)
    0.00 :	  408ae8:       mov    %rax,0x60(%rsp)
    0.00 :	  408aed:       mov    %ebx,%eax
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
    0.00 :	  408aef:       mov    0x138(%rsp),%ebx
    0.00 :	  408af6:       sub    $0x1,%eax
    0.00 :	  408af9:       mov    %eax,%edx
    0.00 :	  408afb:       and    $0xfffffffe,%eax
    0.00 :	  408afe:       shr    %edx
    0.00 :	  408b00:       lea    0x1(%rax),%edi
    0.00 :	  408b03:       mov    %eax,0xf8(%rsp)
    0.00 :	  408b0a:       shl    $0x4,%rdx
    0.00 :	  408b0e:       mov    %edi,0x100(%rsp)
    0.00 :	  408b15:       mov    %rdx,0x108(%rsp)
    0.00 :	  408b1d:       mov    %eax,%edx
    0.00 :	  408b1f:       mov    %ebx,%eax
    0.00 :	  408b21:       not    %eax
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  408b23:       add    $0x2,%edx
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
    0.00 :	  408b26:       lea    (%rax,%rdi,2),%eax
    0.00 :	  408b29:       mov    0x38(%rsp),%rdi
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  408b2e:       mov    %edx,0xa0(%rsp)
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
    0.00 :	  408b35:       mov    %eax,0xe0(%rsp)
    0.00 :	  408b3c:       mov    %ebx,%eax
    0.00 :	  408b3e:       not    %eax
    0.00 :	  408b40:       lea    (%rax,%rdx,2),%eax
    0.00 :	  408b43:       mov    %eax,0x118(%rsp)
    0.00 :	  408b4a:       mov    0x10(%rsp),%rax
    0.00 :	  408b4f:       lea    0x0(,%rax,8),%rdx
    0.00 :	  408b57:       add    %rdi,%rax
    0.00 :	  408b5a:       lea    0x0(,%rax,8),%rcx
    0.00 :	  408b62:       mov    %rdi,%rax
    0.00 :	  408b65:       lea    0x0(,%rdi,8),%rdi
    0.00 :	  408b6d:       mov    %rdx,0x178(%rsp)
    0.00 :	  408b75:       add    %rax,%rsi
    0.00 :	  408b78:       mov    %rcx,0x198(%rsp)
    0.00 :	  408b80:       add    %r15,%rdx
    0.00 :	  408b83:       add    %r15,%rcx
    0.00 :	  408b86:       lea    -0x8(,%rsi,8),%rax
    0.00 :	  408b8e:       mov    %rdi,0x1a0(%rsp)
    0.00 :	  408b96:       add    %r15,%rdi
    0.00 :	  408b99:       mov    %rcx,0x1b8(%rsp)
    0.00 :	  408ba1:       mov    %rdi,0x1c0(%rsp)
         :	        }
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
    0.00 :	  408ba9:       mov    0x4c(%rsp),%edi
    0.00 :	  408bad:       mov    %rsi,0xc8(%rsp)
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408bb5:       mov    $0x1,%esi
         :	        }
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
    0.00 :	  408bba:       mov    0xb8(%rsp),%ecx
    0.00 :	  408bc1:       mov    %rax,0x1a8(%rsp)
    0.00 :	  408bc9:       movslq %ebx,%rax
    0.00 :	  408bcc:       movapd 0x1cbc(%rip),%xmm3        # 40a890 <_IO_stdin_used+0x520>
    0.00 :	  408bd4:       mov    %rdx,0x1b0(%rsp)
    0.00 :	  408bdc:       mov    $0x1,%edx
    0.00 :	  408be1:       sub    %rax,%rdx
    0.00 :	  408be4:       mov    %esi,%eax
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408be6:       mov    %esi,0x154(%rsp)
    0.00 :	  408bed:       sub    %ebx,%eax
    0.00 :	  408bef:       mov    %rdx,0x138(%rsp)
    0.00 :	  408bf7:       cltq   
    0.00 :	  408bf9:       mov    %rax,0x160(%rsp)
         :	        }
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
    0.00 :	  408c01:       cmp    %ecx,%edi
    0.00 :	  408c03:       jle    409616 <interp+0x1f26>
    0.00 :	  408c09:       nopl   0x0(%rax)
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  408c10:       mov    0x18(%rsp),%rdx
    0.00 :	  408c15:       movslq 0x180(%rsp),%rax
    0.00 :	  408c1d:       lea    -0x1(%rcx),%r10d
    0.00 :	  408c21:       mov    %r13,0x28(%rsp)
    0.00 :	  408c26:       imul   0x168(%rsp),%rax
    0.00 :	  408c2f:       mov    0x148(%rsp),%rsi
    0.00 :	  408c37:       mov    %rax,%rbx
    0.00 :	  408c3a:       lea    (%rdx,%rax,8),%r14
    0.00 :	  408c3e:       mov    %rax,0x58(%rsp)
    0.00 :	  408c43:       mov    0x170(%rsp),%rax
    0.00 :	  408c4b:       lea    0x0(,%r13,8),%rdx
    0.00 :	  408c53:       add    %r13,%rax
    0.00 :	  408c56:       lea    (%rsi,%rdx,1),%r15
    0.00 :	  408c5a:       mov    %r10d,%r13d
    0.00 :	  408c5d:       mov    %rax,0x50(%rsp)
    0.00 :	  408c62:       mov    0x190(%rsp),%rax
    0.00 :	  408c6a:       add    %rdx,%rax
    0.00 :	  408c6d:       lea    -0x1(%rdi),%edx
    0.00 :	  408c70:       mov    %edx,0x40(%rsp)
    0.00 :	  408c74:       mov    0x138(%rsp),%rdx
    0.00 :	  408c7c:       add    %rbx,%rdx
    0.00 :	  408c7f:       mov    %rdx,0x68(%rsp)
    0.00 :	  408c84:       mov    0x130(%rsp),%rdx
    0.00 :	  408c8c:       add    0x38(%rsp),%rdx
    0.00 :	  408c91:       add    %rbx,%rdx
    0.00 :	  408c94:       mov    %rdx,0x70(%rsp)
    0.00 :	  408c99:       nopl   0x0(%rax)
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  408ca0:       mov    0x48(%rsp),%edx
    0.00 :	  408ca4:       cmp    %edx,0x24(%rsp)
    0.00 :	  408ca8:       jle    4099f0 <interp+0x2300>
    0.00 :	  408cae:       mov    $0x1,%edx
    0.00 :	  408cb3:       sub    0xb8(%rsp),%edx
    0.00 :	  408cba:       mov    0x8(%rsp),%rbp
    0.00 :	  408cbf:       movslq %r13d,%rcx
    0.00 :	  408cc2:       lea    (%rdx,%r13,2),%r8d
    0.00 :	  408cc6:       mov    0x70(%rsp),%rbx
    0.00 :	  408ccb:       mov    0x10(%rsp),%rdi
    0.00 :	  408cd0:       movslq %r8d,%r8
    0.00 :	  408cd3:       mov    0x18(%rsp),%r11
    0.00 :	  408cd8:       mov    0x38(%rsp),%r10
    0.00 :	  408cdd:       imul   %r8,%rbp
    0.00 :	  408ce1:       imul   %rcx,%rdi
    0.00 :	  408ce5:       lea    (%rbx,%rbp,1),%rdx
    0.00 :	  408ce9:       mov    0x50(%rsp),%rbx
    0.00 :	  408cee:       lea    -0x10(%r11,%rdx,8),%r12
    0.00 :	  408cf3:       mov    %rbx,%rdx
    0.00 :	  408cf6:       add    0xc8(%rsp),%rbx
    0.00 :	  408cfe:       add    %r10,%rdx
    0.00 :	  408d01:       add    %rdi,%rdx
    0.00 :	  408d04:       lea    -0x8(%rsi,%rdx,8),%r9
    0.00 :	  408d09:       mov    0x58(%rsp),%rdx
    0.00 :	  408d0e:       add    %r10,%rdx
    0.00 :	  408d11:       add    0x28(%rsp),%r10
    0.00 :	  408d16:       add    %rbp,%rdx
    0.00 :	  408d19:       add    %rdi,%r10
    0.00 :	  408d1c:       lea    -0x8(%r11,%rdx,8),%rdx
    0.00 :	  408d21:       mov    %rbx,%r11
    0.00 :	  408d24:       lea    -0x8(%rsi,%r10,8),%r10
    0.00 :	  408d29:       add    %rdi,%r11
    0.00 :	  408d2c:       lea    -0x8(%rsi,%r11,8),%r11
    0.00 :	  408d31:       cmp    %r11,%rdx
    0.00 :	  408d34:       setae  %bl
    0.00 :	  408d37:       cmp    %r9,%r12
    0.00 :	  408d3a:       setbe  %r11b
    0.00 :	  408d3e:       or     %r11d,%ebx
    0.00 :	  408d41:       mov    0xc8(%rsp),%r11
    0.00 :	  408d49:       add    0x28(%rsp),%r11
    0.00 :	  408d4e:       add    %rdi,%r11
    0.00 :	  408d51:       lea    -0x8(%rsi,%r11,8),%r11
    0.00 :	  408d56:       cmp    %r11,%rdx
    0.00 :	  408d59:       setae  %r11b
    0.00 :	  408d5d:       cmp    %r10,%r12
    0.00 :	  408d60:       setbe  %r12b
    0.00 :	  408d64:       or     %r12d,%r11d
    0.00 :	  408d67:       test   %r11b,%bl
    0.00 :	  408d6a:       je     4097c0 <interp+0x20d0>
    0.00 :	  408d70:       cmpl   $0x3,0xd8(%rsp)
    0.00 :	  408d78:       jbe    4097c0 <interp+0x20d0>
    0.00 :	  408d7e:       movapd 0x1b1a(%rip),%xmm2        # 40a8a0 <_IO_stdin_used+0x530>
    0.00 :	  408d86:       mov    0x110(%rsp),%r11
    0.00 :	  408d8e:       xor    %edi,%edi
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408d90:       movupd (%r9,%rdi,1),%xmm0
    0.00 :	  408d96:       movupd (%r10,%rdi,1),%xmm7
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  408d9c:       movupd (%rdx,%rdi,2),%xmm1
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408da1:       addpd  %xmm7,%xmm0
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
    0.00 :	  408da5:       movhpd 0x10(%rdx,%rdi,2),%xmm1
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408dab:       mulpd  %xmm2,%xmm0
    0.00 :	  408daf:       addpd  %xmm1,%xmm0
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408db3:       movlpd %xmm0,(%rdx,%rdi,2)
    0.00 :	  408db8:       movhpd %xmm0,0x10(%rdx,%rdi,2)
    0.00 :	  408dbe:       add    $0x10,%rdi
    0.00 :	  408dc2:       cmp    %r11,%rdi
    0.00 :	  408dc5:       jne    408d90 <interp+0x16a0>
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408dc7:       mov    0x10(%rsp),%r9
    0.00 :	  408dcc:       movslq 0xf0(%rsp),%rdi
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408dd4:       mov    0x8(%rsp),%r10
    0.00 :	  408dd9:       movslq 0xe8(%rsp),%rdx
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408de1:       imul   %rcx,%r9
    0.00 :	  408de5:       movsd  0x1b6b(%rip),%xmm1        # 40a958 <_IO_stdin_used+0x5e8>
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408ded:       imul   %r8,%r10
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408df1:       add    %r9,%rdi
    0.00 :	  408df4:       movsd  (%rax,%rdi,8),%xmm0
    0.00 :	  408df9:       addsd  (%r15,%rdi,8),%xmm0
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408dff:       add    %r10,%rdx
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408e02:       mulsd  %xmm1,%xmm0
    0.00 :	  408e06:       addsd  (%r14,%rdx,8),%xmm0
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408e0c:       movsd  %xmm0,(%r14,%rdx,8)
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  408e12:       mov    0x24(%rsp),%edx
    0.00 :	  408e16:       cmp    %edx,0x120(%rsp)
    0.00 :	  408e1d:       jge    408e51 <interp+0x1761>
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408e1f:       movslq 0x124(%rsp),%rdx
    0.00 :	  408e27:       add    %rdx,%r10
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408e2a:       movslq 0x150(%rsp),%rdx
    0.00 :	  408e32:       add    %rdx,%r9
    0.00 :	  408e35:       movsd  (%rax,%r9,8),%xmm0
    0.00 :	  408e3b:       addsd  (%r15,%r9,8),%xmm0
    0.00 :	  408e41:       mulsd  %xmm1,%xmm0
    0.00 :	  408e45:       addsd  (%r14,%r10,8),%xmm0
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  408e4b:       movsd  %xmm0,(%r14,%r10,8)
    0.00 :	  408e51:       mov    0x8(%rsp),%r12
    0.00 :	  408e56:       mov    0x68(%rsp),%rbx
    0.00 :	  408e5b:       mov    0x50(%rsp),%r10
    0.00 :	  408e60:       mov    0x18(%rsp),%rdi
    0.00 :	  408e65:       imul   %r8,%r12
    0.00 :	  408e69:       lea    (%rbx,%r12,1),%rdx
    0.00 :	  408e6d:       mov    0xc0(%rsp),%rbx
    0.00 :	  408e75:       shl    $0x3,%rdx
    0.00 :	  408e79:       lea    (%rdx,%rbx,1),%r11
    0.00 :	  408e7d:       mov    0x10(%rsp),%rbx
    0.00 :	  408e82:       add    %rdi,%rdx
    0.00 :	  408e85:       add    %rdi,%r11
    0.00 :	  408e88:       mov    0x28(%rsp),%rdi
    0.00 :	  408e8d:       imul   %rcx,%rbx
    0.00 :	  408e91:       lea    (%r10,%rbx,1),%rbp
    0.00 :	  408e95:       add    %rbx,%rdi
    0.00 :	  408e98:       shl    $0x3,%rbp
    0.00 :	  408e9c:       shl    $0x3,%rdi
    0.00 :	  408ea0:       lea    (%rsi,%rbp,1),%r9
    0.00 :	  408ea4:       add    0x60(%rsp),%rbp
    0.00 :	  408ea9:       lea    (%rsi,%rdi,1),%r10
    0.00 :	  408ead:       add    %rsi,%rbp
    0.00 :	  408eb0:       cmp    %rbp,%rdx
    0.00 :	  408eb3:       setae  0x30(%rsp)
    0.00 :	  408eb8:       cmp    %r9,%r11
    0.00 :	  408ebb:       setbe  %bpl
    0.00 :	  408ebf:       add    0x60(%rsp),%rdi
    0.00 :	  408ec4:       or     0x30(%rsp),%bpl
    0.00 :	  408ec9:       add    %rsi,%rdi
    0.00 :	  408ecc:       cmp    %rdi,%rdx
    0.00 :	  408ecf:       setae  %dil
    0.00 :	  408ed3:       cmp    %r10,%r11
    0.00 :	  408ed6:       setbe  %r11b
    0.00 :	  408eda:       or     %r11d,%edi
    0.00 :	  408edd:       test   %dil,%bpl
    0.00 :	  408ee0:       je     409750 <interp+0x2060>
    0.00 :	  408ee6:       cmpl   $0x4,0x24(%rsp)
    0.00 :	  408eeb:       jle    409750 <interp+0x2060>
    0.00 :	  408ef1:       mov    0x50(%rsp),%rdi
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  408ef6:       mov    0x108(%rsp),%rbp
    0.00 :	  408efe:       lea    0x1(%rbx,%rdi,1),%rdi
    0.00 :	  408f03:       lea    (%rsi,%rdi,8),%r11
    0.00 :	  408f07:       mov    0x28(%rsp),%rdi
    0.00 :	  408f0c:       lea    0x1(%rbx,%rdi,1),%rdi
    0.00 :	  408f11:       lea    (%rsi,%rdi,8),%rbx
    0.00 :	  408f15:       xor    %edi,%edi
    0.00 :	  408f17:       nopw   0x0(%rax,%rax,1)
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408f20:       movupd (%r9,%rdi,1),%xmm6
    0.00 :	  408f26:       movupd (%r11,%rdi,1),%xmm0
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408f2c:       movupd (%rbx,%rdi,1),%xmm7
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
    0.00 :	  408f31:       movupd (%rdx,%rdi,2),%xmm1
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408f36:       addpd  %xmm6,%xmm0
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408f3a:       movupd (%r10,%rdi,1),%xmm6
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
    0.00 :	  408f40:       movhpd 0x10(%rdx,%rdi,2),%xmm1
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408f46:       addpd  %xmm7,%xmm0
    0.00 :	  408f4a:       addpd  %xmm6,%xmm0
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408f4e:       mulpd  %xmm3,%xmm0
    0.00 :	  408f52:       addpd  %xmm1,%xmm0
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  408f56:       movlpd %xmm0,(%rdx,%rdi,2)
    0.00 :	  408f5b:       movhpd %xmm0,0x10(%rdx,%rdi,2)
    0.00 :	  408f61:       add    $0x10,%rdi
    0.00 :	  408f65:       cmp    %rbp,%rdi
    0.00 :	  408f68:       jne    408f20 <interp+0x1830>
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408f6a:       imul   0x10(%rsp),%rcx
    0.00 :	  408f70:       movslq 0xf8(%rsp),%rdi
    0.00 :	  408f78:       movslq 0x100(%rsp),%r9
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  408f80:       imul   0x8(%rsp),%r8
    0.00 :	  408f86:       movslq 0xe0(%rsp),%rdx
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408f8e:       movsd  0x19ba(%rip),%xmm1        # 40a950 <_IO_stdin_used+0x5e0>
    0.00 :	  408f96:       add    %rcx,%rdi
    0.00 :	  408f99:       add    %rcx,%r9
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  408f9c:       mov    0xa0(%rsp),%ebx
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408fa3:       movsd  (%rax,%rdi,8),%xmm0
    0.00 :	  408fa8:       addsd  (%rax,%r9,8),%xmm0
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  408fae:       add    %r8,%rdx
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408fb1:       addsd  (%r15,%r9,8),%xmm0
    0.00 :	  408fb7:       addsd  (%r15,%rdi,8),%xmm0
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408fbd:       mulsd  %xmm1,%xmm0
    0.00 :	  408fc1:       addsd  (%r14,%rdx,8),%xmm0
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  408fc7:       movsd  %xmm0,(%r14,%rdx,8)
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  408fcd:       mov    0x24(%rsp),%edx
    0.00 :	  408fd1:       cmp    %edx,%ebx
    0.00 :	  408fd3:       jge    40900d <interp+0x191d>
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  408fd5:       movslq 0x118(%rsp),%rdx
    0.00 :	  408fdd:       add    %rdx,%r8
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408fe0:       movslq %ebx,%rdx
    0.00 :	  408fe3:       add    %rdx,%rcx
    0.00 :	  408fe6:       movsd  (%rax,%rcx,8),%xmm0
    0.00 :	  408feb:       addsd  (%rax,%r9,8),%xmm0
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  408ff1:       addsd  (%r15,%rcx,8),%xmm0
    0.00 :	  408ff7:       addsd  (%r15,%r9,8),%xmm0
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  408ffd:       mulsd  %xmm1,%xmm0
    0.00 :	  409001:       addsd  (%r14,%r8,8),%xmm0
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  409007:       movsd  %xmm0,(%r14,%r8,8)
    0.00 :	  40900d:       add    $0x1,%r13d
         :	        }
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
    0.00 :	  409011:       cmp    0x40(%rsp),%r13d
    0.00 :	  409016:       jne    408ca0 <interp+0x15b0>
    0.00 :	  40901c:       mov    0x28(%rsp),%r13
    0.00 :	  409021:       mov    0x198(%rsp),%rbx
    0.00 :	  409029:       lea    0x0(,%r13,8),%rdx
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  409031:       movl   $0x1,0x28(%rsp)
    0.00 :	  409039:       xor    %r12d,%r12d
    0.00 :	  40903c:       movsd  0x191c(%rip),%xmm4        # 40a960 <_IO_stdin_used+0x5f0>
    0.00 :	  409044:       movapd 0x1864(%rip),%xmm2        # 40a8b0 <_IO_stdin_used+0x540>
    0.00 :	  40904c:       add    %rax,%rbx
    0.00 :	  40904f:       movapd 0x1839(%rip),%xmm1        # 40a890 <_IO_stdin_used+0x520>
    0.00 :	  409057:       mov    %rbx,0x78(%rsp)
    0.00 :	  40905c:       mov    0x1a0(%rsp),%rbx
    0.00 :	  409064:       add    %rax,%rbx
    0.00 :	  409067:       mov    %rbx,0x80(%rsp)
    0.00 :	  40906f:       mov    0x1b8(%rsp),%rbx
    0.00 :	  409077:       add    %rdx,%rbx
    0.00 :	  40907a:       mov    %rbx,0x88(%rsp)
    0.00 :	  409082:       mov    0x1c0(%rsp),%rbx
    0.00 :	  40908a:       add    %rdx,%rbx
    0.00 :	  40908d:       mov    %rbx,0x90(%rsp)
    0.00 :	  409095:       mov    0x178(%rsp),%rbx
    0.00 :	  40909d:       lea    (%rbx,%rax,1),%rsi
    0.00 :	  4090a1:       mov    %rbx,0x58(%rsp)
    0.00 :	  4090a6:       mov    %rbx,%r13
    0.00 :	  4090a9:       mov    %rsi,0xa8(%rsp)
    0.00 :	  4090b1:       mov    0x1b0(%rsp),%rsi
    0.00 :	  4090b9:       add    %rdx,%rsi
    0.00 :	  4090bc:       add    0x148(%rsp),%rdx
    0.00 :	  4090c4:       mov    %rdx,0x68(%rsp)
    0.00 :	  4090c9:       mov    0x1a8(%rsp),%rdx
    0.00 :	  4090d1:       mov    %rsi,0xb0(%rsp)
    0.00 :	  4090d9:       mov    %rdx,0x30(%rsp)
    0.00 :	  4090de:       lea    0x8(%rax),%rdx
    0.00 :	  4090e2:       mov    %rdx,0x140(%rsp)
    0.00 :	  4090ea:       nopw   0x0(%rax,%rax,1)
    0.00 :	  4090f0:       mov    0x48(%rsp),%esi
    0.00 :	  4090f4:       cmp    %esi,0x24(%rsp)
    0.00 :	  4090f8:       jle    409638 <interp+0x1f48>
    0.00 :	  4090fe:       mov    0xbc(%rsp),%edx
    0.00 :	  409105:       mov    0x28(%rsp),%ebx
    0.00 :	  409109:       mov    0x8(%rsp),%rcx
    0.00 :	  40910e:       mov    0x38(%rsp),%rsi
    0.00 :	  409113:       not    %edx
    0.00 :	  409115:       mov    0x30(%rsp),%rdi
    0.00 :	  40911a:       lea    (%rdx,%rbx,2),%edx
    0.00 :	  40911d:       sub    $0x1,%ebx
    0.00 :	  409120:       mov    %ebx,0x70(%rsp)
    0.00 :	  409124:       movslq %edx,%rbx
    0.00 :	  409127:       mov    0x130(%rsp),%rdx
    0.00 :	  40912f:       imul   %rbx,%rcx
    0.00 :	  409133:       mov    %rbx,0x40(%rsp)
    0.00 :	  409138:       add    %rsi,%rdx
    0.00 :	  40913b:       add    %rcx,%rdx
    0.00 :	  40913e:       add    %rsi,%rcx
    0.00 :	  409141:       mov    0x80(%rsp),%rsi
    0.00 :	  409149:       lea    -0x10(%r14,%rdx,8),%rbx
    0.00 :	  40914e:       mov    0x78(%rsp),%rdx
    0.00 :	  409153:       shl    $0x3,%rcx
    0.00 :	  409157:       lea    -0x8(%rsi),%r9
    0.00 :	  40915b:       mov    0x88(%rsp),%rsi
    0.00 :	  409163:       lea    -0x8(%rdx),%r8
    0.00 :	  409167:       lea    -0x8(%r14,%rcx,1),%rdx
    0.00 :	  40916c:       lea    -0x8(%rsi),%r10
    0.00 :	  409170:       mov    0x90(%rsp),%rsi
    0.00 :	  409178:       lea    -0x8(%rsi),%r11
    0.00 :	  40917c:       lea    (%rax,%rdi,1),%rsi
    0.00 :	  409180:       cmp    %rsi,%rdx
    0.00 :	  409183:       setae  %bpl
    0.00 :	  409187:       cmp    %r9,%rbx
    0.00 :	  40918a:       setbe  %sil
    0.00 :	  40918e:       or     %esi,%ebp
    0.00 :	  409190:       mov    0xa8(%rsp),%rsi
    0.00 :	  409198:       add    %rdi,%rsi
    0.00 :	  40919b:       cmp    %rsi,%rdx
    0.00 :	  40919e:       setae  %dil
    0.00 :	  4091a2:       cmp    %r8,%rbx
    0.00 :	  4091a5:       setbe  %sil
    0.00 :	  4091a9:       or     %edi,%esi
    0.00 :	  4091ab:       and    %ebp,%esi
    0.00 :	  4091ad:       cmpl   $0x2,0xd8(%rsp)
    0.00 :	  4091b5:       seta   %dil
    0.00 :	  4091b9:       and    %edi,%esi
    0.00 :	  4091bb:       mov    0x30(%rsp),%rdi
    0.00 :	  4091c0:       add    0xb0(%rsp),%rdi
    0.00 :	  4091c8:       cmp    %rdi,%rdx
    0.00 :	  4091cb:       setae  %dil
    0.00 :	  4091cf:       cmp    %r10,%rbx
    0.00 :	  4091d2:       setbe  %bpl
    0.00 :	  4091d6:       or     %ebp,%edi
    0.00 :	  4091d8:       test   %dil,%sil
    0.00 :	  4091db:       je     4096e0 <interp+0x1ff0>
    0.00 :	  4091e1:       mov    0x30(%rsp),%rsi
    0.00 :	  4091e6:       add    0x68(%rsp),%rsi
    0.00 :	  4091eb:       cmp    %rsi,%rdx
    0.00 :	  4091ee:       setae  %sil
    0.00 :	  4091f2:       cmp    %r11,%rbx
    0.00 :	  4091f5:       setbe  %dil
    0.00 :	  4091f9:       or     %dil,%sil
    0.00 :	  4091fc:       je     4096e0 <interp+0x1ff0>
    0.00 :	  409202:       mov    0x110(%rsp),%rsi
    0.00 :	  40920a:       xor    %ecx,%ecx
    0.00 :	  40920c:       nopl   0x0(%rax)
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409210:       movupd (%r8,%rcx,1),%xmm0
    0.00 :	  409216:       movupd (%r9,%rcx,1),%xmm7
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  40921c:       movupd (%r10,%rcx,1),%xmm6
    0.00 :	  409222:       movupd (%r11,%rcx,1),%xmm5
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409228:       addpd  %xmm7,%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  40922c:       addpd  %xmm6,%xmm0
    0.00 :	  409230:       addpd  %xmm5,%xmm0
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
    0.00 :	  409234:       movupd (%rdx,%rcx,2),%xmm5
    0.00 :	  409239:       movhpd 0x10(%rdx,%rcx,2),%xmm5
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  40923f:       mulpd  %xmm1,%xmm0
    0.00 :	  409243:       addpd  %xmm5,%xmm0
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  409247:       movlpd %xmm0,(%rdx,%rcx,2)
    0.00 :	  40924c:       movhpd %xmm0,0x10(%rdx,%rcx,2)
    0.00 :	  409252:       add    $0x10,%rcx
    0.00 :	  409256:       cmp    %rsi,%rcx
    0.00 :	  409259:       jne    409210 <interp+0x1b20>
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  40925b:       mov    0x10(%rsp),%rbx
    0.00 :	  409260:       movslq 0x70(%rsp),%rdi
    0.00 :	  409265:       movslq 0x28(%rsp),%rcx
    0.00 :	  40926a:       movslq 0xf0(%rsp),%rdx
    0.00 :	  409272:       imul   %rbx,%rdi
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  409276:       mov    0x40(%rsp),%r9
    0.00 :	  40927b:       movslq 0xe8(%rsp),%rsi
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409283:       imul   %rbx,%rcx
    0.00 :	  409287:       movsd  0x16c1(%rip),%xmm5        # 40a950 <_IO_stdin_used+0x5e0>
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  40928f:       imul   0x8(%rsp),%r9
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409295:       lea    (%rdx,%rdi,1),%r8
    0.00 :	  409299:       add    %rcx,%rdx
    0.00 :	  40929c:       movsd  (%rax,%r8,8),%xmm0
    0.00 :	  4092a2:       addsd  (%rax,%rdx,8),%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4092a7:       addsd  (%r15,%rdx,8),%xmm0
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  4092ad:       add    %r9,%rsi
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4092b0:       addsd  (%r15,%r8,8),%xmm0
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4092b6:       mov    0x24(%rsp),%edx
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  4092ba:       mulsd  %xmm5,%xmm0
    0.00 :	  4092be:       addsd  (%r14,%rsi,8),%xmm0
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  4092c4:       movsd  %xmm0,(%r14,%rsi,8)
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4092ca:       cmp    %edx,0x120(%rsp)
    0.00 :	  4092d1:       jge    409312 <interp+0x1c22>
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  4092d3:       movslq 0x124(%rsp),%rdx
    0.00 :	  4092db:       add    %rdx,%r9
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  4092de:       movslq 0x150(%rsp),%rdx
    0.00 :	  4092e6:       add    %rdx,%rcx
    0.00 :	  4092e9:       add    %rdx,%rdi
    0.00 :	  4092ec:       movsd  (%rax,%rcx,8),%xmm0
    0.00 :	  4092f1:       addsd  (%rax,%rdi,8),%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4092f6:       addsd  (%r15,%rcx,8),%xmm0
    0.00 :	  4092fc:       addsd  (%r15,%rdi,8),%xmm0
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409302:       mulsd  %xmm5,%xmm0
    0.00 :	  409306:       addsd  (%r14,%r9,8),%xmm0
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  40930c:       movsd  %xmm0,(%r14,%r9,8)
    0.00 :	  409312:       mov    0x40(%rsp),%rbx
    0.00 :	  409317:       imul   0x8(%rsp),%rbx
    0.00 :	  40931d:       lea    (%rax,%r12,1),%r8
    0.00 :	  409321:       mov    0x138(%rsp),%rdx
    0.00 :	  409329:       mov    0xb0(%rsp),%r10
    0.00 :	  409331:       mov    0x58(%rsp),%r11
    0.00 :	  409336:       add    %rbx,%rdx
    0.00 :	  409339:       mov    %rbx,0x128(%rsp)
    0.00 :	  409341:       lea    (%r12,%r10,1),%r9
    0.00 :	  409345:       mov    0xc0(%rsp),%rbx
    0.00 :	  40934d:       shl    $0x3,%rdx
    0.00 :	  409351:       mov    0x68(%rsp),%r10
    0.00 :	  409356:       lea    (%rdx,%rbx,1),%rsi
    0.00 :	  40935a:       mov    0xa8(%rsp),%rbx
    0.00 :	  409362:       add    %r14,%rdx
    0.00 :	  409365:       add    %r14,%rsi
    0.00 :	  409368:       add    %r12,%r10
    0.00 :	  40936b:       lea    (%r12,%rbx,1),%rdi
    0.00 :	  40936f:       mov    0x60(%rsp),%rbx
    0.00 :	  409374:       add    %rbx,%r11
    0.00 :	  409377:       add    %r12,%rbx
    0.00 :	  40937a:       lea    (%rax,%rbx,1),%rcx
    0.00 :	  40937e:       cmp    %rcx,%rdx
    0.00 :	  409381:       setae  %bpl
    0.00 :	  409385:       cmp    %r8,%rsi
    0.00 :	  409388:       setbe  %cl
    0.00 :	  40938b:       or     %ecx,%ebp
    0.00 :	  40938d:       lea    (%rax,%r11,1),%rcx
    0.00 :	  409391:       cmp    %rcx,%rdx
    0.00 :	  409394:       setae  %cl
    0.00 :	  409397:       cmp    %rdi,%rsi
    0.00 :	  40939a:       setbe  0xd0(%rsp)
    0.00 :	  4093a2:       or     0xd0(%rsp),%cl
    0.00 :	  4093a9:       and    %ecx,%ebp
    0.00 :	  4093ab:       cmpl   $0x3,0x24(%rsp)
    0.00 :	  4093b0:       setg   %cl
    0.00 :	  4093b3:       add    %r15,%r11
    0.00 :	  4093b6:       and    %ecx,%ebp
    0.00 :	  4093b8:       cmp    %r11,%rdx
    0.00 :	  4093bb:       setae  %cl
    0.00 :	  4093be:       cmp    %r9,%rsi
    0.00 :	  4093c1:       setbe  %r11b
    0.00 :	  4093c5:       or     %r11d,%ecx
    0.00 :	  4093c8:       test   %cl,%bpl
    0.00 :	  4093cb:       je     409650 <interp+0x1f60>
    0.00 :	  4093d1:       add    %r15,%rbx
    0.00 :	  4093d4:       cmp    %rbx,%rdx
    0.00 :	  4093d7:       setae  %cl
    0.00 :	  4093da:       cmp    %r10,%rsi
    0.00 :	  4093dd:       setbe  %sil
    0.00 :	  4093e1:       mov    %ecx,%ebx
    0.00 :	  4093e3:       or     %sil,%bl
    0.00 :	  4093e6:       je     409650 <interp+0x1f60>
    0.00 :	  4093ec:       mov    0x140(%rsp),%rbx
    0.00 :	  4093f4:       mov    0x68(%rsp),%rsi
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4093f9:       mov    %rax,0xd0(%rsp)
    0.00 :	  409401:       mov    0x58(%rsp),%rcx
    0.00 :	  409406:       mov    0x108(%rsp),%rax
    0.00 :	  40940e:       mov    %rbx,%rbp
    0.00 :	  409411:       add    $0x8,%rsi
    0.00 :	  409415:       add    %r12,%rbx
    0.00 :	  409418:       lea    (%rsi,%rcx,1),%r11
    0.00 :	  40941c:       add    %rcx,%rbp
    0.00 :	  40941f:       add    %r12,%rsi
    0.00 :	  409422:       xor    %ecx,%ecx
    0.00 :	  409424:       nopl   0x0(%rax)
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  409428:       movupd 0x0(%rbp,%rcx,1),%xmm7
    0.00 :	  40942e:       movupd (%rbx,%rcx,1),%xmm0
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409433:       movupd (%rdi,%rcx,1),%xmm6
    0.00 :	  409438:       movupd (%r8,%rcx,1),%xmm5
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  40943e:       addpd  %xmm7,%xmm0
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                     + z[i3-1][i2][i1  ] + z[i3-1][i2-1][i1  ]
    0.00 :	  409442:       movupd (%r11,%rcx,1),%xmm7
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409448:       addpd  %xmm6,%xmm0
         :	                     + z[i3-1][i2][i1  ] + z[i3-1][i2-1][i1  ]
    0.00 :	  40944c:       movupd (%rsi,%rcx,1),%xmm6
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409451:       addpd  %xmm5,%xmm0
         :	                     + z[i3-1][i2][i1  ] + z[i3-1][i2-1][i1  ]
         :	                     + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  409455:       movupd (%r9,%rcx,1),%xmm5
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                     + z[i3-1][i2][i1  ] + z[i3-1][i2-1][i1  ]
    0.00 :	  40945b:       addpd  %xmm7,%xmm0
         :	                     + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  40945f:       movupd (%r10,%rcx,1),%xmm7
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                     + z[i3-1][i2][i1  ] + z[i3-1][i2-1][i1  ]
    0.00 :	  409465:       addpd  %xmm6,%xmm0
         :	                     + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  409469:       addpd  %xmm5,%xmm0
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
    0.00 :	  40946d:       movupd (%rdx,%rcx,2),%xmm5
    0.00 :	  409472:       movhpd 0x10(%rdx,%rcx,2),%xmm5
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                     + z[i3-1][i2][i1  ] + z[i3-1][i2-1][i1  ]
         :	                     + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  409478:       addpd  %xmm7,%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  40947c:       mulpd  %xmm2,%xmm0
    0.00 :	  409480:       addpd  %xmm5,%xmm0
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  409484:       movlpd %xmm0,(%rdx,%rcx,2)
    0.00 :	  409489:       movhpd %xmm0,0x10(%rdx,%rcx,2)
    0.00 :	  40948f:       add    $0x10,%rcx
    0.00 :	  409493:       cmp    %rax,%rcx
    0.00 :	  409496:       jne    409428 <interp+0x1d38>
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  409498:       mov    0x10(%rsp),%rbx
    0.00 :	  40949d:       movslq 0x70(%rsp),%rdx
    0.00 :	  4094a2:       movslq 0x28(%rsp),%r8
    0.00 :	  4094a7:       movslq 0x100(%rsp),%rcx
    0.00 :	  4094af:       imul   %rbx,%rdx
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  4094b3:       movslq 0xf8(%rsp),%rdi
    0.00 :	  4094bb:       mov    0xd0(%rsp),%rax
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  4094c3:       imul   %rbx,%r8
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  4094c7:       mov    0x40(%rsp),%r11
    0.00 :	  4094cc:       movslq 0xe0(%rsp),%rsi
    0.00 :	  4094d4:       imul   0x8(%rsp),%r11
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  4094da:       movsd  0x147e(%rip),%xmm5        # 40a960 <_IO_stdin_used+0x5f0>
    0.00 :	  4094e2:       lea    (%rcx,%rdx,1),%r9
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  4094e6:       lea    (%rdi,%r8,1),%r10
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  4094ea:       add    %r8,%rcx
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  4094ed:       add    %rdx,%rdi
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  4094f0:       movsd  (%rax,%r9,8),%xmm0
    0.00 :	  4094f6:       addsd  (%rax,%rcx,8),%xmm0
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  4094fb:       addsd  (%rax,%r10,8),%xmm0
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  409501:       add    %r11,%rsi
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409504:       addsd  (%rax,%rdi,8),%xmm0
         :	                     + z[i3-1][i2][i1  ] + z[i3-1][i2-1][i1  ]
    0.00 :	  409509:       addsd  (%r15,%rcx,8),%xmm0
    0.00 :	  40950f:       addsd  (%r15,%r9,8),%xmm0
         :	                     + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  409515:       addsd  (%r15,%r10,8),%xmm0
    0.00 :	  40951b:       addsd  (%r15,%rdi,8),%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  409521:       mulsd  %xmm5,%xmm0
    0.00 :	  409525:       addsd  (%r14,%rsi,8),%xmm0
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  40952b:       movsd  %xmm0,(%r14,%rsi,8)
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  409531:       mov    0x24(%rsp),%esi
    0.00 :	  409535:       cmp    %esi,0xa0(%rsp)
    0.00 :	  40953c:       jge    409643 <interp+0x1f53>
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  409542:       movslq 0x118(%rsp),%rsi
    0.00 :	  40954a:       lea    (%r12,%r13,1),%rdi
    0.00 :	  40954e:       add    %rsi,%r11
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  409551:       movslq 0xa0(%rsp),%rsi
    0.00 :	  409559:       add    %rsi,%rdx
    0.00 :	  40955c:       add    %rsi,%r8
    0.00 :	  40955f:       movsd  (%rax,%rdx,8),%xmm0
    0.00 :	  409564:       addsd  (%rax,%r8,8),%xmm0
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  40956a:       addsd  (%rax,%rcx,8),%xmm0
    0.00 :	  40956f:       addsd  (%rax,%r9,8),%xmm0
         :	                     + z[i3-1][i2][i1  ] + z[i3-1][i2-1][i1  ]
    0.00 :	  409575:       addsd  (%r15,%r8,8),%xmm0
    0.00 :	  40957b:       addsd  (%r15,%rdx,8),%xmm0
         :	                     + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  409581:       addsd  (%r15,%rcx,8),%xmm0
    0.00 :	  409587:       addsd  (%r15,%r9,8),%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  40958d:       mulsd  %xmm5,%xmm0
    0.00 :	  409591:       addsd  (%r14,%r11,8),%xmm0
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  409597:       movsd  %xmm0,(%r14,%r11,8)
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
    0.00 :	  40959d:       addl   $0x1,0x28(%rsp)
    0.00 :	  4095a2:       mov    %rdi,%r12
    0.00 :	  4095a5:       mov    0x28(%rsp),%ebx
    0.00 :	  4095a9:       add    %r13,0x58(%rsp)
    0.00 :	  4095ae:       add    %r13,0x78(%rsp)
    0.00 :	  4095b3:       add    %r13,0x80(%rsp)
    0.00 :	  4095bb:       add    %r13,0x88(%rsp)
    0.00 :	  4095c3:       add    %r13,0x90(%rsp)
    0.00 :	  4095cb:       add    %r13,0x30(%rsp)
    0.00 :	  4095d0:       cmp    %ebx,0x4c(%rsp)
    0.00 :	  4095d4:       jg     4090f0 <interp+0x1a00>
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
    0.00 :	  4095da:       addl   $0x1,0x154(%rsp)
    0.00 :	  4095e2:       mov    0x50(%rsp),%r13
    0.00 :	  4095e7:       mov    0x154(%rsp),%eax
    0.00 :	  4095ee:       addl   $0x2,0x180(%rsp)
    0.00 :	  4095f6:       cmp    %eax,0x184(%rsp)
    0.00 :	  4095fd:       jle    407f7f <interp+0x88f>
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
    0.00 :	  409603:       mov    0x4c(%rsp),%edi
    0.00 :	  409607:       mov    0xb8(%rsp),%ecx
    0.00 :	  40960e:       cmp    %ecx,%edi
    0.00 :	  409610:       jg     408c10 <interp+0x1520>
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
    0.00 :	  409616:       cmpl   $0x2,0x4c(%rsp)
    0.00 :	  40961b:       je     409e4f <interp+0x275f>
    0.00 :	  409621:       mov    0x170(%rsp),%rax
    0.00 :	  409629:       add    %r13,%rax
    0.00 :	  40962c:       mov    %rax,0x50(%rsp)
    0.00 :	  409631:       jmp    4095da <interp+0x1eea>
    0.00 :	  409633:       nopl   0x0(%rax,%rax,1)
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  409638:       cmpl   $0x2,0x24(%rsp)
    0.00 :	  40963d:       je     409e2b <interp+0x273b>
    0.00 :	  409643:       lea    (%r12,%r13,1),%rdi
    0.00 :	  409647:       jmpq   40959d <interp+0x1ead>
    0.00 :	  40964c:       nopl   0x0(%rax)
    0.00 :	  409650:       lea    0x0(%r13,%r12,1),%rdi
    0.00 :	  409655:       mov    0x128(%rsp),%rdx
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  40965d:       mov    0x24(%rsp),%r9d
    0.00 :	  409662:       mov    $0x1,%r8d
    0.00 :	  409668:       add    0x160(%rsp),%rdx
    0.00 :	  409670:       mov    %rdi,%rcx
    0.00 :	  409673:       lea    (%r14,%rdx,8),%rsi
    0.00 :	  409677:       mov    %r12,%rdx
    0.00 :	  40967a:       nopw   0x0(%rax,%rax,1)
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  409680:       movsd  0x8(%rax,%rdx,1),%xmm0
    0.00 :	  409686:       addsd  0x8(%rax,%rcx,1),%xmm0
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  40968c:       add    $0x1,%r8d
    0.00 :	  409690:       add    $0x10,%rsi
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
         :	                     + z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409694:       addsd  (%rax,%rcx,1),%xmm0
    0.00 :	  409699:       addsd  (%rax,%rdx,1),%xmm0
         :	                     + z[i3-1][i2][i1  ] + z[i3-1][i2-1][i1  ]
    0.00 :	  40969e:       addsd  0x8(%r15,%rcx,1),%xmm0
    0.00 :	  4096a5:       addsd  0x8(%r15,%rdx,1),%xmm0
         :	                     + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4096ac:       addsd  (%r15,%rcx,1),%xmm0
    0.00 :	  4096b2:       addsd  (%r15,%rdx,1),%xmm0
    0.00 :	  4096b8:       add    $0x8,%rcx
    0.00 :	  4096bc:       add    $0x8,%rdx
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.125 * (z[i3  ][i2][i1  ] + z[i3  ][i2-1][i1  ]
    0.00 :	  4096c0:       mulsd  %xmm4,%xmm0
    0.00 :	  4096c4:       addsd  -0x10(%rsi),%xmm0
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  4096c9:       movsd  %xmm0,-0x10(%rsi)
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  4096ce:       cmp    %r8d,%r9d
    0.00 :	  4096d1:       jg     409680 <interp+0x1f90>
    0.00 :	  4096d3:       jmpq   40959d <interp+0x1ead>
    0.00 :	  4096d8:       nopl   0x0(%rax,%rax,1)
    0.00 :	  4096e0:       movsd  0x1268(%rip),%xmm5        # 40a950 <_IO_stdin_used+0x5e0>
    0.00 :	  4096e8:       mov    0x78(%rsp),%rsi
    0.00 :	  4096ed:       add    %r14,%rcx
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4096f0:       xor    %edx,%edx
    0.00 :	  4096f2:       mov    0x80(%rsp),%rdi
    0.00 :	  4096fa:       mov    0x88(%rsp),%r8
    0.00 :	  409702:       mov    0x90(%rsp),%r9
    0.00 :	  40970a:       mov    0x158(%rsp),%r10
    0.00 :	  409712:       nopw   0x0(%rax,%rax,1)
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409718:       movsd  -0x8(%rsi,%rdx,1),%xmm0
    0.00 :	  40971e:       addsd  -0x8(%rdi,%rdx,1),%xmm0
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  409724:       addsd  -0x8(%r8,%rdx,1),%xmm0
    0.00 :	  40972b:       addsd  -0x8(%r9,%rdx,1),%xmm0
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.25 * (z[i3  ][i2][i1-1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409732:       mulsd  %xmm5,%xmm0
    0.00 :	  409736:       addsd  -0x8(%rcx,%rdx,2),%xmm0
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  40973c:       movsd  %xmm0,-0x8(%rcx,%rdx,2)
    0.00 :	  409742:       add    $0x8,%rdx
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  409746:       cmp    %r10,%rdx
    0.00 :	  409749:       jne    409718 <interp+0x2028>
    0.00 :	  40974b:       jmpq   409312 <interp+0x1c22>
    0.00 :	  409750:       imul   0x178(%rsp),%rcx
    0.00 :	  409759:       mov    0x24(%rsp),%r8d
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  40975e:       mov    $0x1,%edi
    0.00 :	  409763:       add    0x160(%rsp),%r12
    0.00 :	  40976b:       movsd  0x11dd(%rip),%xmm1        # 40a950 <_IO_stdin_used+0x5e0>
    0.00 :	  409773:       lea    (%r14,%r12,8),%rdx
    0.00 :	  409777:       nopw   0x0(%rax,%rax,1)
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  409780:       movsd  0x8(%rax,%rcx,1),%xmm0
    0.00 :	  409786:       addsd  (%rax,%rcx,1),%xmm0
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  40978b:       add    $0x1,%edi
    0.00 :	  40978e:       add    $0x10,%rdx
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
         :	                    + z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  409792:       addsd  0x8(%r15,%rcx,1),%xmm0
    0.00 :	  409799:       addsd  (%r15,%rcx,1),%xmm0
    0.00 :	  40979f:       add    $0x8,%rcx
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3  ][i2-1][i1] + z[i3  ][i2-1][i1-1]
    0.00 :	  4097a3:       mulsd  %xmm1,%xmm0
    0.00 :	  4097a7:       addsd  -0x10(%rdx),%xmm0
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  4097ac:       movsd  %xmm0,-0x10(%rdx)
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  4097b1:       cmp    %edi,%r8d
    0.00 :	  4097b4:       jg     409780 <interp+0x2090>
    0.00 :	  4097b6:       jmpq   40900d <interp+0x191d>
    0.00 :	  4097bb:       nopl   0x0(%rax,%rax,1)
    0.00 :	  4097c0:       mov    0x38(%rsp),%rbx
    0.00 :	  4097c5:       movsd  0x118b(%rip),%xmm1        # 40a958 <_IO_stdin_used+0x5e8>
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4097cd:       xor    %edx,%edx
    0.00 :	  4097cf:       mov    0x158(%rsp),%r11
    0.00 :	  4097d7:       add    %rbx,%rdi
    0.00 :	  4097da:       add    %rbx,%rbp
    0.00 :	  4097dd:       shl    $0x3,%rdi
    0.00 :	  4097e1:       lea    (%r14,%rbp,8),%r9
    0.00 :	  4097e5:       lea    (%rax,%rdi,1),%r10
    0.00 :	  4097e9:       add    %r15,%rdi
    0.00 :	  4097ec:       nopl   0x0(%rax)
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4097f0:       movsd  -0x8(%r10,%rdx,1),%xmm0
    0.00 :	  4097f7:       addsd  -0x8(%rdi,%rdx,1),%xmm0
    0.00 :	  4097fd:       mulsd  %xmm1,%xmm0
    0.00 :	  409801:       addsd  -0x8(%r9,%rdx,2),%xmm0
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  409808:       movsd  %xmm0,-0x8(%r9,%rdx,2)
    0.00 :	  40980f:       add    $0x8,%rdx
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  409813:       cmp    %r11,%rdx
    0.00 :	  409816:       jne    4097f0 <interp+0x2100>
    0.00 :	  409818:       jmpq   408e51 <interp+0x1761>
    0.00 :	  40981d:       nopl   (%rax)
    0.00 :	  409820:       mov    0x40(%rsp),%r11
    0.00 :	  409825:       add    0x100(%rsp),%r12
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  40982d:       mov    %rsi,%rax
    0.00 :	  409830:       mov    $0x1,%r10d
    0.00 :	  409836:       movsd  0x1112(%rip),%xmm4        # 40a950 <_IO_stdin_used+0x5e0>
    0.00 :	  40983e:       lea    (%rdx,%r12,8),%r9
    0.00 :	  409842:       sub    %rbp,%r11
    0.00 :	  409845:       imul   0x10(%rsp),%r11
    0.00 :	  40984b:       nopl   0x0(%rax,%rax,1)
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  409850:       movsd  0x8(%rax),%xmm0
    0.00 :	  409855:       addsd  0x8(%rax,%r11,8),%xmm0
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  40985c:       add    $0x1,%r10d
    0.00 :	  409860:       add    $0x10,%r9
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  409864:       addsd  (%rax),%xmm0
    0.00 :	  409868:       addsd  (%rax,%r11,8),%xmm0
    0.00 :	  40986e:       add    $0x8,%rax
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1]
         :	            + 0.25 * (z[i3-1][i2][i1] + z[i3-1][i2-1][i1]
    0.00 :	  409872:       mulsd  %xmm4,%xmm0
    0.00 :	  409876:       addsd  -0x10(%r9),%xmm0
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-t1-1] =
    0.00 :	  40987c:       movsd  %xmm0,-0x10(%r9)
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  409882:       cmp    %r10d,%r8d
    0.00 :	  409885:       jg     409850 <interp+0x2160>
    0.00 :	  409887:       jmpq   4089a0 <interp+0x12b0>
    0.00 :	  40988c:       nopl   0x0(%rax)
    0.00 :	  409890:       mov    0x108(%rsp),%rax
    0.00 :	  409898:       movsd  0x10b8(%rip),%xmm4        # 40a958 <_IO_stdin_used+0x5e8>
    0.00 :	  4098a0:       add    %rdx,%r9
    0.00 :	  4098a3:       mov    0x110(%rsp),%r12
    0.00 :	  4098ab:       lea    (%rsi,%rax,1),%rbx
    0.00 :	  4098af:       lea    (%rdi,%rax,1),%r11
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4098b3:       xor    %eax,%eax
    0.00 :	  4098b5:       nopl   (%rax)
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  4098b8:       movsd  -0x8(%rbx,%rax,1),%xmm0
    0.00 :	  4098be:       addsd  -0x8(%r11,%rax,1),%xmm0
    0.00 :	  4098c5:       mulsd  %xmm4,%xmm0
    0.00 :	  4098c9:       addsd  -0x8(%r9,%rax,2),%xmm0
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
    0.00 :	  4098d0:       movsd  %xmm0,-0x8(%r9,%rax,2)
    0.00 :	  4098d7:       add    $0x8,%rax
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4098db:       cmp    %r12,%rax
    0.00 :	  4098de:       jne    4098b8 <interp+0x21c8>
    0.00 :	  4098e0:       jmpq   40880a <interp+0x111a>
    0.00 :	  4098e5:       nopl   (%rax)
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  4098e8:       cmp    $0x2,%r8d
    0.00 :	  4098ec:       jne    408608 <interp+0xf18>
    0.00 :	  4098f2:       mov    $0x1,%eax
    0.00 :	  4098f7:       sub    0xb8(%rsp),%eax
    0.00 :	  4098fe:       movslq %ebx,%r12
    0.00 :	  409901:       imul   0x10(%rsp),%r12
    0.00 :	  409907:       lea    (%rax,%rbx,2),%r13d
    0.00 :	  40990b:       movslq %r13d,%r13
    0.00 :	  40990e:       imul   0x8(%rsp),%r13
    0.00 :	  409914:       nopl   0x0(%rax)
    0.00 :	  409918:       add    0x100(%rsp),%r13
    0.00 :	  409920:       lea    0x8(%rcx,%r12,8),%rax
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  409925:       mov    $0x1,%edi
    0.00 :	  40992a:       movsd  0x1026(%rip),%xmm2        # 40a958 <_IO_stdin_used+0x5e8>
    0.00 :	  409932:       lea    (%rdx,%r13,8),%rsi
    0.00 :	  409936:       nopw   %cs:0x0(%rax,%rax,1)
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  409940:       movsd  (%rax),%xmm0
    0.00 :	  409944:       addsd  -0x8(%rax),%xmm0
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  409949:       add    $0x1,%edi
    0.00 :	  40994c:       add    $0x10,%rsi
    0.00 :	  409950:       add    $0x8,%rax
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
    0.00 :	  409954:       mulsd  %xmm2,%xmm0
    0.00 :	  409958:       addsd  -0x10(%rsi),%xmm0
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
    0.00 :	  40995d:       movsd  %xmm0,-0x10(%rsi)
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  409962:       cmp    %edi,%r8d
    0.00 :	  409965:       jg     409940 <interp+0x2250>
    0.00 :	  409967:       jmpq   408608 <interp+0xf18>
    0.00 :	  40996c:       nopl   0x0(%rax)
    0.00 :	  409970:       mov    0x38(%rsp),%rdi
    0.00 :	  409975:       lea    (%r12,%rdi,1),%rax
    0.00 :	  409979:       add    %rdi,%r11
    0.00 :	  40997c:       add    0x118(%rsp),%rdi
    0.00 :	  409984:       add    %rdi,%r12
    0.00 :	  409987:       lea    (%rdx,%rax,8),%rax
    0.00 :	  40998b:       lea    (%rcx,%r11,8),%rsi
    0.00 :	  40998f:       lea    0x10(%rdx,%r12,8),%rdi
    0.00 :	  409994:       nopl   0x0(%rax)
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + z[i3-1][i2-1][i1-1];
    0.00 :	  409998:       movsd  -0x8(%rax),%xmm0
    0.00 :	  40999d:       addsd  -0x8(%rsi),%xmm0
    0.00 :	  4099a2:       add    $0x10,%rax
    0.00 :	  4099a6:       add    $0x8,%rsi
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-d1-1] =
    0.00 :	  4099aa:       movsd  %xmm0,-0x18(%rax)
         :	      t3 = 0;
         :	    }
         :
         :	    for (i3 = d3; i3 <= mm3-1; i3++) {
         :	      for (i2 = d2; i2 <= mm2-1; i2++) {
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
    0.00 :	  4099af:       cmp    %rdi,%rax
    0.00 :	  4099b2:       jne    409998 <interp+0x22a8>
    0.00 :	  4099b4:       jmpq   4084cd <interp+0xddd>
    0.00 :	  4099b9:       nopl   0x0(%rax)
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1] =
         :	            u[2*i3-d3-1][2*i2-t2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  4099c0:       cmp    $0x2,%r8d
    0.00 :	  4099c4:       jne    4089a0 <interp+0x12b0>
    0.00 :	  4099ca:       mov    0xbc(%rsp),%eax
    0.00 :	  4099d1:       not    %eax
    0.00 :	  4099d3:       lea    (%rax,%rbp,2),%r10d
    0.00 :	  4099d7:       lea    -0x1(%rbp),%eax
    0.00 :	  4099da:       mov    %eax,0x30(%rsp)
    0.00 :	  4099de:       movslq %r10d,%r10
    0.00 :	  4099e1:       jmpq   40880a <interp+0x111a>
    0.00 :	  4099e6:       nopw   %cs:0x0(%rax,%rax,1)
         :	        for (i1 = d1; i1 <= mm1-1; i1++) {
         :	          u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1] =
         :	            u[2*i3-t3-1][2*i2-d2-1][2*i1-d1-1]
         :	            + 0.5 * (z[i3][i2-1][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	        for (i1 = 1; i1 <= mm1-1; i1++) {
    0.00 :	  4099f0:       cmpl   $0x2,0x24(%rsp)
    0.00 :	  4099f5:       jne    40900d <interp+0x191d>
    0.00 :	  4099fb:       mov    $0x1,%edx
    0.00 :	  409a00:       sub    0xb8(%rsp),%edx
    0.00 :	  409a07:       movslq %r13d,%rcx
    0.00 :	  409a0a:       lea    (%rdx,%r13,2),%r8d
    0.00 :	  409a0e:       movslq %r8d,%r8
    0.00 :	  409a11:       jmpq   408e51 <interp+0x1761>
    0.00 :	  409a16:       nopw   %cs:0x0(%rax,%rax,1)
         :	          u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1] =
         :	            u[2*i3-d3-1][2*i2-d2-1][2*i1-t1-1]
         :	            + 0.5 * (z[i3-1][i2-1][i1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	      for (i2 = 1; i2 <= mm2-1; i2++) {
    0.00 :	  409a20:       cmpl   $0x2,0x4c(%rsp)
    0.00 :	  409a25:       jne    4089ca <interp+0x12da>
    0.00 :	  409a2b:       mov    0x120(%rsp),%ebx
    0.00 :	  409a32:       mov    $0x1,%eax
    0.00 :	  409a37:       mov    0x18(%rsp),%rdx
    0.00 :	  409a3c:       sub    0x124(%rsp),%eax
    0.00 :	  409a43:       lea    (%rax,%rbx,2),%eax
    0.00 :	  409a46:       cltq   
    0.00 :	  409a48:       imul   0x168(%rsp),%rax
    0.00 :	  409a51:       lea    (%rdx,%rax,8),%rdx
    0.00 :	  409a55:       movslq %ebx,%rax
    0.00 :	  409a58:       mov    0x148(%rsp),%rbx
    0.00 :	  409a60:       imul   0x170(%rsp),%rax
    0.00 :	  409a69:       lea    (%rbx,%rax,8),%rcx
    0.00 :	  409a6d:       jmpq   408615 <interp+0xf25>
    0.00 :	  409a72:       nopw   0x0(%rax,%rax,1)
         :	          u[2*i3+1][2*i2][2*i1] = u[2*i3+1][2*i2][2*i1]
         :	                                  + 0.5 * z2[i1];
         :	          u[2*i3+1][2*i2][2*i1+1] = u[2*i3+1][2*i2][2*i1+1]
         :	                                  + 0.25 * (z2[i1] + z2[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  409a78:       xor    %esi,%esi
    0.00 :	  409a7a:       jmpq   407ecc <interp+0x7dc>
    0.00 :	  409a7f:       nop
         :	          u[2*i3][2*i2+1][2*i1] = u[2*i3][2*i2+1][2*i1]
         :	                                + 0.5 * z1[i1];
         :	          u[2*i3][2*i2+1][2*i1+1] = u[2*i3][2*i2+1][2*i1+1]
         :	                                  + 0.25 * (z1[i1] + z1[i1+1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  409a80:       xor    %r8d,%r8d
    0.00 :	  409a83:       jmpq   407dca <interp+0x6da>
    0.00 :	  409a88:       mov    0x188(%rsp),%rcx
    0.00 :	  409a90:       mov    0x58(%rsp),%rdi
    0.00 :	  409a95:       mov    0xc0(%rsp),%r8
    0.00 :	  409a9d:       add    0x60(%rsp),%r8
    0.00 :	  409aa2:       imul   %rsi,%rcx
    0.00 :	  409aa6:       add    %r14,%rdi
    0.00 :	  409aa9:       lea    0x10(%rdx,%r8,8),%r8
    0.00 :	  409aae:       movsd  0xea1(%rip),%xmm9        # 40a958 <_IO_stdin_used+0x5e8>
    0.00 :	  409ab7:       add    %rdx,%rcx
    0.00 :	  409aba:       nopw   0x0(%rax,%rax,1)
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
         :	                              + z[i3][i2][i1];
    0.00 :	  409ac0:       movsd  (%rcx),%xmm0
    0.00 :	  409ac4:       addsd  (%rdi),%xmm0
    0.00 :	  409ac8:       add    $0x10,%rcx
    0.00 :	  409acc:       add    $0x8,%rdi
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
    0.00 :	  409ad0:       movsd  %xmm0,-0x10(%rcx)
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
    0.00 :	  409ad5:       movsd  -0x8(%rdi),%xmm0
    0.00 :	  409ada:       addsd  (%rdi),%xmm0
    0.00 :	  409ade:       mulsd  %xmm9,%xmm0
    0.00 :	  409ae3:       addsd  -0x8(%rcx),%xmm0
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
    0.00 :	  409ae8:       movsd  %xmm0,-0x8(%rcx)
         :	          z1[i1] = z[i3][i2+1][i1] + z[i3][i2][i1];
         :	          z2[i1] = z[i3+1][i2][i1] + z[i3][i2][i1];
         :	          z3[i1] = z[i3+1][i2+1][i1] + z[i3+1][i2][i1] + z1[i1];
         :	        }
         :
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  409aed:       cmp    %rcx,%r8
    0.00 :	  409af0:       jne    409ac0 <interp+0x23d0>
    0.00 :	  409af2:       lea    -0x1(%rbp),%edi
    0.00 :	  409af5:       cmp    $0x2,%r12d
    0.00 :	  409af9:       je     409b43 <interp+0x2453>
    0.00 :	  409afb:       movapd %xmm7,%xmm10
    0.00 :	  409b00:       jmpq   407c00 <interp+0x510>
    0.00 :	  409b05:       mov    0x98(%rsp),%rcx
    0.00 :	  409b0d:       lea    (%r10,%rcx,1),%r8
    0.00 :	  409b11:       add    %rcx,%rsi
    0.00 :	  409b14:       mov    %r8,0x40(%rsp)
    0.00 :	  409b19:       mov    %rsi,0x50(%rsp)
    0.00 :	  409b1e:       jmpq   407a94 <interp+0x3a4>
    0.00 :	  409b23:       mov    0x98(%rsp),%r8
         :
         :	  if (timeron) timer_start(T_interp);
         :	  if (n1 != 3 && n2 != 3 && n3 != 3) {
         :	    for (i3 = 0; i3 < mm3-1; i3++) {
         :	      for (i2 = 0; i2 < mm2-1; i2++) {
         :	        for (i1 = 0; i1 < mm1; i1++) {
    0.00 :	  409b2b:       xor    %ecx,%ecx
    0.00 :	  409b2d:       lea    (%r10,%r8,1),%r9
    0.00 :	  409b31:       add    %r8,%rsi
    0.00 :	  409b34:       mov    %r9,0x40(%rsp)
    0.00 :	  409b39:       mov    %rsi,0x50(%rsp)
    0.00 :	  409b3e:       jmpq   407a38 <interp+0x348>
         :	          u[2*i3][2*i2][2*i1] = u[2*i3][2*i2][2*i1]
         :	                              + z[i3][i2][i1];
         :	          u[2*i3][2*i2][2*i1+1] = u[2*i3][2*i2][2*i1+1]
         :	                                + 0.5 * (z[i3][i2][i1+1] + z[i3][i2][i1]);
         :	        }
         :	        for (i1 = 0; i1 < mm1-1; i1++) {
    0.00 :	  409b43:       xor    %r8d,%r8d
    0.00 :	  409b46:       movslq %edi,%rdi
    0.00 :	  409b49:       jmpq   407ca9 <interp+0x5b9>
         :	                     + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	    }
         :	  }
         :	  if (timeron) timer_stop(T_interp);
    0.00 :	  409b4e:       mov    $0x7,%edi
    0.00 :	  409b53:       callq  4015f0 <timer_stop>
    0.00 :	  409b58:       jmpq   407f90 <interp+0x8a0>
         :	  // 535 to handle up to 1024^3
         :	  //      integer m
         :	  //      parameter( m=535 )
         :	  double z1[M], z2[M], z3[M];
         :
         :	  if (timeron) timer_start(T_interp);
    0.00 :	  409b5d:       mov    $0x7,%edi
    0.00 :	  409b62:       callq  4015c0 <timer_start>
    0.00 :	  409b67:       mov    0x1c502a33(%rip),%eax        # 1c90c5a0 <timeron>
    0.00 :	  409b6d:       mov    %eax,0x1cc(%rsp)
    0.00 :	  409b74:       jmpq   407783 <interp+0x93>
         :	showall():
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  409b79:       mov    0x24(%rsp),%ebx
    0.00 :	  409b7d:       mov    $0x12,%eax
         :	  m2 = min(n2, 14);
    0.00 :	  409b82:       mov    $0xe,%r13d
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
    0.00 :	  409b88:       mov    $0x40a4e5,%edi
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  409b8d:       cmp    $0x12,%ebx
    0.00 :	  409b90:       cmovg  %eax,%ebx
    0.00 :	  409b93:       mov    %ebx,0x8(%rsp)
         :	  m2 = min(n2, 14);
    0.00 :	  409b97:       mov    0x4c(%rsp),%ebx
    0.00 :	  409b9b:       cmp    $0xe,%ebx
    0.00 :	  409b9e:       cmovle %ebx,%r13d
         :	  m3 = min(n3, 18);
    0.00 :	  409ba2:       mov    0x184(%rsp),%ebx
    0.00 :	  409ba9:       cmp    $0x12,%ebx
    0.00 :	  409bac:       cmovle %ebx,%eax
    0.00 :	  409baf:       mov    %eax,0x30(%rsp)
         :
         :	  printf("   \n");
    0.00 :	  409bb3:       callq  400730 <puts@plt>
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  409bb8:       test   %ebx,%ebx
    0.00 :	  409bba:       jle    409c6e <interp+0x257e>
    0.00 :	  409bc0:       mov    0x170(%rsp),%rax
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  409bc8:       mov    0x98(%rsp),%rbp
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  409bd0:       movl   $0x0,0x10(%rsp)
    0.00 :	  409bd8:       mov    0x148(%rsp),%rbx
    0.00 :	  409be0:       shl    $0x3,%rax
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  409be4:       shr    $0x3,%rbp
    0.00 :	  409be8:       mov    %rax,0x28(%rsp)
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  409bed:       mov    0x24(%rsp),%esi
    0.00 :	  409bf1:       test   %esi,%esi
    0.00 :	  409bf3:       jle    409c4c <interp+0x255c>
    0.00 :	  409bf5:       xor    %r14d,%r14d
    0.00 :	  409bf8:       nopl   0x0(%rax,%rax,1)
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  409c00:       mov    0x4c(%rsp),%edi
    0.00 :	  409c04:       xor    %r15d,%r15d
    0.00 :	  409c07:       movslq %r14d,%r12
    0.00 :	  409c0a:       test   %edi,%edi
    0.00 :	  409c0c:       jle    409c37 <interp+0x2547>
    0.00 :	  409c0e:       xchg   %ax,%ax
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  409c10:       movslq %r15d,%rax
    0.00 :	  409c13:       mov    $0x40a4e9,%edi
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  409c18:       add    $0x1,%r15d
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  409c1c:       imul   %rbp,%rax
    0.00 :	  409c20:       add    %r12,%rax
    0.00 :	  409c23:       movsd  (%rbx,%rax,8),%xmm0
    0.00 :	  409c28:       mov    $0x1,%eax
    0.00 :	  409c2d:       callq  400750 <printf@plt>
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  409c32:       cmp    %r15d,%r13d
    0.00 :	  409c35:       jg     409c10 <interp+0x2520>
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
    0.00 :	  409c37:       mov    $0xa,%edi
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  409c3c:       add    $0x1,%r14d
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
    0.00 :	  409c40:       callq  400710 <putchar@plt>
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  409c45:       cmp    %r14d,0x8(%rsp)
    0.00 :	  409c4a:       jg     409c00 <interp+0x2510>
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
    0.00 :	  409c4c:       mov    $0x40a4ef,%edi
    0.00 :	  409c51:       callq  400730 <puts@plt>
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  409c56:       addl   $0x1,0x10(%rsp)
    0.00 :	  409c5b:       add    0x28(%rsp),%rbx
    0.00 :	  409c60:       mov    0x10(%rsp),%eax
    0.00 :	  409c64:       cmp    %eax,0x30(%rsp)
    0.00 :	  409c68:       jg     409bed <interp+0x24fd>
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
         :	  }
         :	  printf("   \n");
    0.00 :	  409c6e:       mov    $0x40a4e5,%edi
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
    0.00 :	  409c73:       mov    $0xe,%r13d
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
         :	  }
         :	  printf("   \n");
    0.00 :	  409c79:       callq  400730 <puts@plt>
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  409c7e:       mov    $0x12,%eax
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
    0.00 :	  409c83:       mov    $0x40a4e5,%edi
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  409c88:       mov    0x1c8(%rsp),%ebx
    0.00 :	  409c8f:       cmp    $0x12,%ebx
    0.00 :	  409c92:       cmovg  %eax,%ebx
         :	  m2 = min(n2, 14);
    0.00 :	  409c95:       cmpl   $0xe,0x1a80(%rsp)
    0.00 :	  409c9d:       cmovle 0x1a80(%rsp),%r13d
         :	  m3 = min(n3, 18);
    0.00 :	  409ca6:       cmpl   $0x12,0x1a88(%rsp)
    0.00 :	  409cae:       cmovle 0x1a88(%rsp),%eax
         :	  double (*z)[n2][n1] = (double (*)[n2][n1])oz;
         :
         :	  int i1, i2, i3;
         :	  int m1, m2, m3;
         :
         :	  m1 = min(n1, 18);
    0.00 :	  409cb6:       mov    %ebx,0x8(%rsp)
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
    0.00 :	  409cba:       mov    %eax,0x24(%rsp)
         :
         :	  printf("   \n");
    0.00 :	  409cbe:       callq  400730 <puts@plt>
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  409cc3:       mov    0x1a88(%rsp),%ecx
    0.00 :	  409cca:       test   %ecx,%ecx
    0.00 :	  409ccc:       jle    409d86 <interp+0x2696>
    0.00 :	  409cd2:       mov    0x168(%rsp),%rax
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  409cda:       mov    0x188(%rsp),%r12
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  409ce2:       movl   $0x0,0x10(%rsp)
    0.00 :	  409cea:       mov    0x18(%rsp),%rbx
    0.00 :	  409cef:       shl    $0x3,%rax
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  409cf3:       shr    $0x3,%r12
    0.00 :	  409cf7:       mov    %rax,0x28(%rsp)
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  409cfc:       mov    0x1c8(%rsp),%eax
    0.00 :	  409d03:       test   %eax,%eax
    0.00 :	  409d05:       jle    409d64 <interp+0x2674>
    0.00 :	  409d07:       xor    %r14d,%r14d
    0.00 :	  409d0a:       nopw   0x0(%rax,%rax,1)
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  409d10:       mov    0x1a80(%rsp),%edx
    0.00 :	  409d17:       xor    %r15d,%r15d
    0.00 :	  409d1a:       movslq %r14d,%rbp
    0.00 :	  409d1d:       test   %edx,%edx
    0.00 :	  409d1f:       jle    409d4f <interp+0x265f>
    0.00 :	  409d21:       nopl   0x0(%rax)
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  409d28:       movslq %r15d,%rax
    0.00 :	  409d2b:       mov    $0x40a4e9,%edi
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  409d30:       add    $0x1,%r15d
         :	        printf("%6.3f", z[i3][i2][i1]);
    0.00 :	  409d34:       imul   %r12,%rax
    0.00 :	  409d38:       add    %rbp,%rax
    0.00 :	  409d3b:       movsd  (%rbx,%rax,8),%xmm0
    0.00 :	  409d40:       mov    $0x1,%eax
    0.00 :	  409d45:       callq  400750 <printf@plt>
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
         :	      for (i2 = 0; i2 < m2; i2++) {
    0.00 :	  409d4a:       cmp    %r15d,%r13d
    0.00 :	  409d4d:       jg     409d28 <interp+0x2638>
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
    0.00 :	  409d4f:       mov    $0xa,%edi
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  409d54:       add    $0x1,%r14d
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
    0.00 :	  409d58:       callq  400710 <putchar@plt>
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
         :	    for (i1 = 0; i1 < m1; i1++) {
    0.00 :	  409d5d:       cmp    %r14d,0x8(%rsp)
    0.00 :	  409d62:       jg     409d10 <interp+0x2620>
         :	      for (i2 = 0; i2 < m2; i2++) {
         :	        printf("%6.3f", z[i3][i2][i1]);
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
    0.00 :	  409d64:       mov    $0x40a4ef,%edi
    0.00 :	  409d69:       callq  400730 <puts@plt>
         :	  m1 = min(n1, 18);
         :	  m2 = min(n2, 14);
         :	  m3 = min(n3, 18);
         :
         :	  printf("   \n");
         :	  for (i3 = 0; i3 < m3; i3++) {
    0.00 :	  409d6e:       addl   $0x1,0x10(%rsp)
    0.00 :	  409d73:       add    0x28(%rsp),%rbx
    0.00 :	  409d78:       mov    0x10(%rsp),%eax
    0.00 :	  409d7c:       cmp    %eax,0x24(%rsp)
    0.00 :	  409d80:       jg     409cfc <interp+0x260c>
         :	      }
         :	      printf("\n");
         :	    }
         :	    printf("  - - - - - - - \n");
         :	  }
         :	  printf("   \n");
    0.00 :	  409d86:       mov    $0x40a4e5,%edi
    0.00 :	  409d8b:       callq  400730 <puts@plt>
         :	interp():
         :
         :	  if (debug_vec[5] >= k) {
         :	    showall(z, mm1, mm2, mm3);
         :	    showall(u, n1, n2, n3);
         :	  }
         :	}
    0.00 :	  409d90:       jmpq   4080b8 <interp+0x9c8>
         :	    if (n1 == 3) {
         :	      d1 = 2;
         :	      t1 = 1;
         :	    } else {
         :	      d1 = 1;
         :	      t1 = 0;
    0.00 :	  409d95:       movl   $0x0,0x138(%rsp)
         :	      d2 = 1;
         :	      t2 = 0;
         :	    }
         :
         :	    if (n3 == 3) {
         :	      d3 = 2;
    0.00 :	  409da0:       mov    $0x2,%eax
         :	  } else {
         :	    if (n1 == 3) {
         :	      d1 = 2;
         :	      t1 = 1;
         :	    } else {
         :	      d1 = 1;
    0.00 :	  409da5:       movl   $0x1,0x48(%rsp)
         :	    if (n2 == 3) {
         :	      d2 = 2;
         :	      t2 = 1;
         :	    } else {
         :	      d2 = 1;
         :	      t2 = 0;
    0.00 :	  409dad:       movl   $0x0,0xbc(%rsp)
         :
         :	    if (n2 == 3) {
         :	      d2 = 2;
         :	      t2 = 1;
         :	    } else {
         :	      d2 = 1;
    0.00 :	  409db8:       movl   $0x1,0xb8(%rsp)
    0.00 :	  409dc3:       movl   $0x1,0x130(%rsp)
    0.00 :	  409dce:       movl   $0x2,0x124(%rsp)
    0.00 :	  409dd9:       jmpq   408121 <interp+0xa31>
         :	                    + z[i3-1][i2][i1-1] + z[i3-1][i2-1][i1-1]);
         :	        }
         :	      }
         :	    }
         :
         :	    for (i3 = 1; i3 <= mm3-1; i3++) {
    0.00 :	  409dde:       cmpl   $0x2,0x184(%rsp)
    0.00 :	  409de6:       jne    407f7f <interp+0x88f>
    0.00 :	  409dec:       mov    0x98(%rsp),%rax
    0.00 :	  409df4:       shr    $0x3,%rax
    0.00 :	  409df8:       mov    %rax,0x10(%rsp)
    0.00 :	  409dfd:       mov    0x188(%rsp),%rax
    0.00 :	  409e05:       shr    $0x3,%rax
    0.00 :	  409e09:       mov    %rax,0x8(%rsp)
    0.00 :	  409e0e:       mov    0x24(%rsp),%eax
    0.00 :	  409e12:       sub    $0x1,%eax
    0.00 :	  409e15:       mov    %eax,0x140(%rsp)
    0.00 :	  409e1c:       movslq 0x48(%rsp),%rax
    0.00 :	  409e21:       mov    %rax,0x38(%rsp)
    0.00 :	  409e26:       jmpq   4089e6 <interp+0x12f6>
    0.00 :	  409e2b:       mov    0xbc(%rsp),%edx
    0.00 :	  409e32:       mov    0x28(%rsp),%ebx
    0.00 :	  409e36:       not    %edx
    0.00 :	  409e38:       lea    (%rdx,%rbx,2),%edx
    0.00 :	  409e3b:       sub    $0x1,%ebx
    0.00 :	  409e3e:       mov    %ebx,0x70(%rsp)
    0.00 :	  409e42:       movslq %edx,%rbx
    0.00 :	  409e45:       mov    %rbx,0x40(%rsp)
    0.00 :	  409e4a:       jmpq   409312 <interp+0x1c22>
    0.00 :	  409e4f:       movslq 0x180(%rsp),%rax
    0.00 :	  409e57:       mov    0x18(%rsp),%rbx
    0.00 :	  409e5c:       lea    0x0(,%r13,8),%rdx
    0.00 :	  409e64:       imul   0x168(%rsp),%rax
    0.00 :	  409e6d:       lea    (%rbx,%rax,8),%r14
    0.00 :	  409e71:       mov    0x148(%rsp),%rbx
    0.00 :	  409e79:       mov    0x190(%rsp),%rax
    0.00 :	  409e81:       lea    (%rbx,%rdx,1),%r15
    0.00 :	  409e85:       mov    0x170(%rsp),%rbx
    0.00 :	  409e8d:       add    %rdx,%rax
    0.00 :	  409e90:       add    %r13,%rbx
    0.00 :	  409e93:       mov    %rbx,0x50(%rsp)
    0.00 :	  409e98:       jmpq   409021 <interp+0x1931>
 Percent |	Source code & Disassembly of real for cycles (2033 samples)
---------------------------------------------------------------------------
         :
         :
         :
         :	Disassembly of section .text:
         :
         :	0000000000401810 <vranlc>:
         :	vranlc():
         :	  int i;
         :
         :	  //--------------------------------------------------------------------
         :	  //  Break A into two parts such that A = 2^23 * A1 + A2.
         :	  //--------------------------------------------------------------------
         :	  t1 = r23 * a;
    0.00 :	  401810:       movsd  0x8c98(%rip),%xmm5        # 40a4b0 <_IO_stdin_used+0x140>
    0.00 :	  401818:       movapd %xmm0,%xmm1
         :	  a1 = (int) t1;
    0.00 :	  40181c:       pxor   %xmm7,%xmm7
         :	  a2 = a - t23 * a1;
    0.00 :	  401820:       movsd  0x8c90(%rip),%xmm4        # 40a4b8 <_IO_stdin_used+0x148>
         :	  int i;
         :
         :	  //--------------------------------------------------------------------
         :	  //  Break A into two parts such that A = 2^23 * A1 + A2.
         :	  //--------------------------------------------------------------------
         :	  t1 = r23 * a;
    0.05 :	  401828:       mulsd  %xmm5,%xmm1
         :	  a1 = (int) t1;
    0.00 :	  40182c:       cvttsd2si %xmm1,%eax
    0.00 :	  401830:       cvtsi2sd %eax,%xmm7
         :	  a2 = a - t23 * a1;
    0.00 :	  401834:       movapd %xmm7,%xmm1
    0.00 :	  401838:       mulsd  %xmm4,%xmm1
    0.00 :	  40183c:       subsd  %xmm1,%xmm0
         :
         :	  //--------------------------------------------------------------------
         :	  //  Generate N results.   This loop is not vectorizable.
         :	  //--------------------------------------------------------------------
         :	  for ( i = 0; i < n; i++ ) {
    0.00 :	  401840:       test   %edi,%edi
    0.05 :	  401842:       jle    401905 <vranlc+0xf5>
    0.00 :	  401848:       lea    -0x1(%rdi),%eax
    0.00 :	  40184b:       movsd  0x8c6d(%rip),%xmm6        # 40a4c0 <_IO_stdin_used+0x150>
    0.00 :	  401853:       movsd  0x8c6c(%rip),%xmm8        # 40a4c8 <_IO_stdin_used+0x158>
    0.00 :	  40185c:       lea    0x8(%rdx,%rax,8),%rcx
    0.00 :	  401861:       nopl   0x0(%rax)
         :	    //--------------------------------------------------------------------
         :	    //  Break X into two parts such that X = 2^23 * X1 + X2, compute
         :	    //  Z = A1 * X2 + A2 * X1  (mod 2^23), and then
         :	    //  X = 2^23 * Z + A2 * X2  (mod 2^46).
         :	    //--------------------------------------------------------------------
         :	    t1 = r23 * (*x);
    1.33 :	  401868:       movsd  (%rsi),%xmm9
         :	    x1 = (int) t1;
    0.00 :	  40186d:       pxor   %xmm3,%xmm3
    0.00 :	  401871:       add    $0x8,%rdx
         :	    //--------------------------------------------------------------------
         :	    //  Break X into two parts such that X = 2^23 * X1 + X2, compute
         :	    //  Z = A1 * X2 + A2 * X1  (mod 2^23), and then
         :	    //  X = 2^23 * Z + A2 * X2  (mod 2^46).
         :	    //--------------------------------------------------------------------
         :	    t1 = r23 * (*x);
    0.00 :	  401875:       movapd %xmm9,%xmm2
    0.84 :	  40187a:       mulsd  %xmm5,%xmm2
         :	    x1 = (int) t1;
    4.82 :	  40187e:       cvttsd2si %xmm2,%eax
         :	    x2 = *x - t23 * x1;
         :	    t1 = a1 * x2 + a2 * x1;
    2.51 :	  401882:       movapd %xmm7,%xmm2
         :	    //  Break X into two parts such that X = 2^23 * X1 + X2, compute
         :	    //  Z = A1 * X2 + A2 * X1  (mod 2^23), and then
         :	    //  X = 2^23 * Z + A2 * X2  (mod 2^46).
         :	    //--------------------------------------------------------------------
         :	    t1 = r23 * (*x);
         :	    x1 = (int) t1;
    0.00 :	  401886:       cvtsi2sd %eax,%xmm3
         :	    x2 = *x - t23 * x1;
    3.98 :	  40188a:       movapd %xmm3,%xmm1
    2.31 :	  40188e:       mulsd  %xmm4,%xmm1
         :	    t1 = a1 * x2 + a2 * x1;
    6.15 :	  401892:       mulsd  %xmm0,%xmm3
         :	    //  Z = A1 * X2 + A2 * X1  (mod 2^23), and then
         :	    //  X = 2^23 * Z + A2 * X2  (mod 2^46).
         :	    //--------------------------------------------------------------------
         :	    t1 = r23 * (*x);
         :	    x1 = (int) t1;
         :	    x2 = *x - t23 * x1;
    0.00 :	  401896:       subsd  %xmm1,%xmm9
         :	    t1 = a1 * x2 + a2 * x1;
    3.20 :	  40189b:       mulsd  %xmm9,%xmm2
         :	    t2 = (int) (r23 * t1);
         :	    z = t1 - t23 * t2;
         :	    t3 = t23 * z + a2 * x2;
    5.02 :	  4018a0:       mulsd  %xmm0,%xmm9
         :	    //  X = 2^23 * Z + A2 * X2  (mod 2^46).
         :	    //--------------------------------------------------------------------
         :	    t1 = r23 * (*x);
         :	    x1 = (int) t1;
         :	    x2 = *x - t23 * x1;
         :	    t1 = a1 * x2 + a2 * x1;
    0.98 :	  4018a5:       addsd  %xmm3,%xmm2
         :	    t2 = (int) (r23 * t1);
    1.97 :	  4018a9:       movapd %xmm2,%xmm1
    2.02 :	  4018ad:       mulsd  %xmm5,%xmm1
    7.23 :	  4018b1:       cvttsd2si %xmm1,%eax
    3.64 :	  4018b5:       pxor   %xmm1,%xmm1
    0.00 :	  4018b9:       cvtsi2sd %eax,%xmm1
         :	    z = t1 - t23 * t2;
    4.33 :	  4018bd:       mulsd  %xmm4,%xmm1
    5.21 :	  4018c1:       subsd  %xmm1,%xmm2
    2.90 :	  4018c5:       movapd %xmm2,%xmm1
         :	    t3 = t23 * z + a2 * x2;
    2.75 :	  4018c9:       mulsd  %xmm4,%xmm1
    5.36 :	  4018cd:       addsd  %xmm9,%xmm1
         :	    t4 = (int) (r46 * t3) ;
    3.05 :	  4018d2:       movapd %xmm1,%xmm2
    1.48 :	  4018d6:       mulsd  %xmm6,%xmm2
    5.51 :	  4018da:       cvttsd2si %xmm2,%eax
    3.34 :	  4018de:       pxor   %xmm2,%xmm2
    0.00 :	  4018e2:       cvtsi2sd %eax,%xmm2
         :	    *x = t3 - t46 * t4;
    3.98 :	  4018e6:       mulsd  %xmm8,%xmm2
    5.16 :	  4018eb:       subsd  %xmm2,%xmm1
    3.30 :	  4018ef:       movsd  %xmm1,(%rsi)
         :	    y[i] = r46 * (*x);
    1.08 :	  4018f3:       mulsd  %xmm6,%xmm1
    5.31 :	  4018f7:       movsd  %xmm1,-0x8(%rdx)
         :	  a2 = a - t23 * a1;
         :
         :	  //--------------------------------------------------------------------
         :	  //  Generate N results.   This loop is not vectorizable.
         :	  //--------------------------------------------------------------------
         :	  for ( i = 0; i < n; i++ ) {
    1.13 :	  4018fc:       cmp    %rdx,%rcx
    0.00 :	  4018ff:       jne    401868 <vranlc+0x58>
         :	    *x = t3 - t46 * t4;
         :	    y[i] = r46 * (*x);
         :	  }
         :
         :	  return;
         :	}
    0.00 :	  401905:       retq   
